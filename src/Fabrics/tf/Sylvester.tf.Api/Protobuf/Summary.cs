// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: tensorflow/core/framework/summary.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tensorflow {

  /// <summary>Holder for reflection information generated from tensorflow/core/framework/summary.proto</summary>
  public static partial class SummaryReflection {

    #region Descriptor
    /// <summary>File descriptor for tensorflow/core/framework/summary.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SummaryReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cid0ZW5zb3JmbG93L2NvcmUvZnJhbWV3b3JrL3N1bW1hcnkucHJvdG8SCnRl",
            "bnNvcmZsb3caJnRlbnNvcmZsb3cvY29yZS9mcmFtZXdvcmsvdGVuc29yLnBy",
            "b3RvIicKElN1bW1hcnlEZXNjcmlwdGlvbhIRCgl0eXBlX2hpbnQYASABKAki",
            "hwEKDkhpc3RvZ3JhbVByb3RvEgsKA21pbhgBIAEoARILCgNtYXgYAiABKAES",
            "CwoDbnVtGAMgASgBEgsKA3N1bRgEIAEoARITCgtzdW1fc3F1YXJlcxgFIAEo",
            "ARIYCgxidWNrZXRfbGltaXQYBiADKAFCAhABEhIKBmJ1Y2tldBgHIAMoAUIC",
            "EAEitQEKD1N1bW1hcnlNZXRhZGF0YRI7CgtwbHVnaW5fZGF0YRgBIAEoCzIm",
            "LnRlbnNvcmZsb3cuU3VtbWFyeU1ldGFkYXRhLlBsdWdpbkRhdGESFAoMZGlz",
            "cGxheV9uYW1lGAIgASgJEhsKE3N1bW1hcnlfZGVzY3JpcHRpb24YAyABKAka",
            "MgoKUGx1Z2luRGF0YRITCgtwbHVnaW5fbmFtZRgBIAEoCRIPCgdjb250ZW50",
            "GAIgASgMIt4ECgdTdW1tYXJ5EigKBXZhbHVlGAEgAygLMhkudGVuc29yZmxv",
            "dy5TdW1tYXJ5LlZhbHVlGlgKBUltYWdlEg4KBmhlaWdodBgBIAEoBRINCgV3",
            "aWR0aBgCIAEoBRISCgpjb2xvcnNwYWNlGAMgASgFEhwKFGVuY29kZWRfaW1h",
            "Z2Vfc3RyaW5nGAQgASgMGn0KBUF1ZGlvEhMKC3NhbXBsZV9yYXRlGAEgASgC",
            "EhQKDG51bV9jaGFubmVscxgCIAEoAxIVCg1sZW5ndGhfZnJhbWVzGAMgASgD",
            "EhwKFGVuY29kZWRfYXVkaW9fc3RyaW5nGAQgASgMEhQKDGNvbnRlbnRfdHlw",
            "ZRgFIAEoCRrPAgoFVmFsdWUSEQoJbm9kZV9uYW1lGAcgASgJEgsKA3RhZxgB",
            "IAEoCRItCghtZXRhZGF0YRgJIAEoCzIbLnRlbnNvcmZsb3cuU3VtbWFyeU1l",
            "dGFkYXRhEhYKDHNpbXBsZV92YWx1ZRgCIAEoAkgAEiYKHG9ic29sZXRlX29s",
            "ZF9zdHlsZV9oaXN0b2dyYW0YAyABKAxIABIqCgVpbWFnZRgEIAEoCzIZLnRl",
            "bnNvcmZsb3cuU3VtbWFyeS5JbWFnZUgAEisKBWhpc3RvGAUgASgLMhoudGVu",
            "c29yZmxvdy5IaXN0b2dyYW1Qcm90b0gAEioKBWF1ZGlvGAYgASgLMhkudGVu",
            "c29yZmxvdy5TdW1tYXJ5LkF1ZGlvSAASKQoGdGVuc29yGAggASgLMhcudGVu",
            "c29yZmxvdy5UZW5zb3JQcm90b0gAQgcKBXZhbHVlQm0KGG9yZy50ZW5zb3Jm",
            "bG93LmZyYW1ld29ya0INU3VtbWFyeVByb3Rvc1ABWj1naXRodWIuY29tL3Rl",
            "bnNvcmZsb3cvdGVuc29yZmxvdy90ZW5zb3JmbG93L2dvL2NvcmUvZnJhbWV3",
            "b3Jr+AEBYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Tensorflow.TensorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.SummaryDescription), global::Tensorflow.SummaryDescription.Parser, new[]{ "TypeHint" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.HistogramProto), global::Tensorflow.HistogramProto.Parser, new[]{ "Min", "Max", "Num", "Sum", "SumSquares", "BucketLimit", "Bucket" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.SummaryMetadata), global::Tensorflow.SummaryMetadata.Parser, new[]{ "PluginData", "DisplayName", "SummaryDescription" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.SummaryMetadata.Types.PluginData), global::Tensorflow.SummaryMetadata.Types.PluginData.Parser, new[]{ "PluginName", "Content" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Summary), global::Tensorflow.Summary.Parser, new[]{ "Value" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Summary.Types.Image), global::Tensorflow.Summary.Types.Image.Parser, new[]{ "Height", "Width", "Colorspace", "EncodedImageString" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Summary.Types.Audio), global::Tensorflow.Summary.Types.Audio.Parser, new[]{ "SampleRate", "NumChannels", "LengthFrames", "EncodedAudioString", "ContentType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Summary.Types.Value), global::Tensorflow.Summary.Types.Value.Parser, new[]{ "NodeName", "Tag", "Metadata", "SimpleValue", "ObsoleteOldStyleHistogram", "Image", "Histo", "Audio", "Tensor" }, new[]{ "Value" }, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Metadata associated with a series of Summary data
  /// </summary>
  public sealed partial class SummaryDescription : pb::IMessage<SummaryDescription> {
    private static readonly pb::MessageParser<SummaryDescription> _parser = new pb::MessageParser<SummaryDescription>(() => new SummaryDescription());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SummaryDescription> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.SummaryReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SummaryDescription() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SummaryDescription(SummaryDescription other) : this() {
      typeHint_ = other.typeHint_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SummaryDescription Clone() {
      return new SummaryDescription(this);
    }

    /// <summary>Field number for the "type_hint" field.</summary>
    public const int TypeHintFieldNumber = 1;
    private string typeHint_ = "";
    /// <summary>
    /// Hint on how plugins should process the data in this series.
    /// Supported values include "scalar", "histogram", "image", "audio"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TypeHint {
      get { return typeHint_; }
      set {
        typeHint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SummaryDescription);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SummaryDescription other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TypeHint != other.TypeHint) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TypeHint.Length != 0) hash ^= TypeHint.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TypeHint.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TypeHint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TypeHint.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TypeHint);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SummaryDescription other) {
      if (other == null) {
        return;
      }
      if (other.TypeHint.Length != 0) {
        TypeHint = other.TypeHint;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TypeHint = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Serialization format for histogram module in
  /// core/lib/histogram/histogram.h
  /// </summary>
  public sealed partial class HistogramProto : pb::IMessage<HistogramProto> {
    private static readonly pb::MessageParser<HistogramProto> _parser = new pb::MessageParser<HistogramProto>(() => new HistogramProto());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HistogramProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.SummaryReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistogramProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistogramProto(HistogramProto other) : this() {
      min_ = other.min_;
      max_ = other.max_;
      num_ = other.num_;
      sum_ = other.sum_;
      sumSquares_ = other.sumSquares_;
      bucketLimit_ = other.bucketLimit_.Clone();
      bucket_ = other.bucket_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistogramProto Clone() {
      return new HistogramProto(this);
    }

    /// <summary>Field number for the "min" field.</summary>
    public const int MinFieldNumber = 1;
    private double min_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Min {
      get { return min_; }
      set {
        min_ = value;
      }
    }

    /// <summary>Field number for the "max" field.</summary>
    public const int MaxFieldNumber = 2;
    private double max_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Max {
      get { return max_; }
      set {
        max_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 3;
    private double num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    /// <summary>Field number for the "sum" field.</summary>
    public const int SumFieldNumber = 4;
    private double sum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Sum {
      get { return sum_; }
      set {
        sum_ = value;
      }
    }

    /// <summary>Field number for the "sum_squares" field.</summary>
    public const int SumSquaresFieldNumber = 5;
    private double sumSquares_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SumSquares {
      get { return sumSquares_; }
      set {
        sumSquares_ = value;
      }
    }

    /// <summary>Field number for the "bucket_limit" field.</summary>
    public const int BucketLimitFieldNumber = 6;
    private static readonly pb::FieldCodec<double> _repeated_bucketLimit_codec
        = pb::FieldCodec.ForDouble(50);
    private readonly pbc::RepeatedField<double> bucketLimit_ = new pbc::RepeatedField<double>();
    /// <summary>
    /// Parallel arrays encoding the bucket boundaries and the bucket values.
    /// bucket(i) is the count for the bucket i.  The range for
    /// a bucket is:
    ///   i == 0:  -DBL_MAX .. bucket_limit(0)
    ///   i != 0:  bucket_limit(i-1) .. bucket_limit(i)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> BucketLimit {
      get { return bucketLimit_; }
    }

    /// <summary>Field number for the "bucket" field.</summary>
    public const int BucketFieldNumber = 7;
    private static readonly pb::FieldCodec<double> _repeated_bucket_codec
        = pb::FieldCodec.ForDouble(58);
    private readonly pbc::RepeatedField<double> bucket_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> Bucket {
      get { return bucket_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HistogramProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HistogramProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Min, other.Min)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Max, other.Max)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Num, other.Num)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Sum, other.Sum)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SumSquares, other.SumSquares)) return false;
      if(!bucketLimit_.Equals(other.bucketLimit_)) return false;
      if(!bucket_.Equals(other.bucket_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Min != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Min);
      if (Max != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Max);
      if (Num != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Num);
      if (Sum != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Sum);
      if (SumSquares != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SumSquares);
      hash ^= bucketLimit_.GetHashCode();
      hash ^= bucket_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Min != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Min);
      }
      if (Max != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Max);
      }
      if (Num != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Num);
      }
      if (Sum != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Sum);
      }
      if (SumSquares != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(SumSquares);
      }
      bucketLimit_.WriteTo(output, _repeated_bucketLimit_codec);
      bucket_.WriteTo(output, _repeated_bucket_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Min != 0D) {
        size += 1 + 8;
      }
      if (Max != 0D) {
        size += 1 + 8;
      }
      if (Num != 0D) {
        size += 1 + 8;
      }
      if (Sum != 0D) {
        size += 1 + 8;
      }
      if (SumSquares != 0D) {
        size += 1 + 8;
      }
      size += bucketLimit_.CalculateSize(_repeated_bucketLimit_codec);
      size += bucket_.CalculateSize(_repeated_bucket_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HistogramProto other) {
      if (other == null) {
        return;
      }
      if (other.Min != 0D) {
        Min = other.Min;
      }
      if (other.Max != 0D) {
        Max = other.Max;
      }
      if (other.Num != 0D) {
        Num = other.Num;
      }
      if (other.Sum != 0D) {
        Sum = other.Sum;
      }
      if (other.SumSquares != 0D) {
        SumSquares = other.SumSquares;
      }
      bucketLimit_.Add(other.bucketLimit_);
      bucket_.Add(other.bucket_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Min = input.ReadDouble();
            break;
          }
          case 17: {
            Max = input.ReadDouble();
            break;
          }
          case 25: {
            Num = input.ReadDouble();
            break;
          }
          case 33: {
            Sum = input.ReadDouble();
            break;
          }
          case 41: {
            SumSquares = input.ReadDouble();
            break;
          }
          case 50:
          case 49: {
            bucketLimit_.AddEntriesFrom(input, _repeated_bucketLimit_codec);
            break;
          }
          case 58:
          case 57: {
            bucket_.AddEntriesFrom(input, _repeated_bucket_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A SummaryMetadata encapsulates information on which plugins are able to make
  /// use of a certain summary value.
  /// </summary>
  public sealed partial class SummaryMetadata : pb::IMessage<SummaryMetadata> {
    private static readonly pb::MessageParser<SummaryMetadata> _parser = new pb::MessageParser<SummaryMetadata>(() => new SummaryMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SummaryMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.SummaryReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SummaryMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SummaryMetadata(SummaryMetadata other) : this() {
      pluginData_ = other.pluginData_ != null ? other.pluginData_.Clone() : null;
      displayName_ = other.displayName_;
      summaryDescription_ = other.summaryDescription_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SummaryMetadata Clone() {
      return new SummaryMetadata(this);
    }

    /// <summary>Field number for the "plugin_data" field.</summary>
    public const int PluginDataFieldNumber = 1;
    private global::Tensorflow.SummaryMetadata.Types.PluginData pluginData_;
    /// <summary>
    /// Data that associates a summary with a certain plugin.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.SummaryMetadata.Types.PluginData PluginData {
      get { return pluginData_; }
      set {
        pluginData_ = value;
      }
    }

    /// <summary>Field number for the "display_name" field.</summary>
    public const int DisplayNameFieldNumber = 2;
    private string displayName_ = "";
    /// <summary>
    /// Display name for viewing in TensorBoard.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayName {
      get { return displayName_; }
      set {
        displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "summary_description" field.</summary>
    public const int SummaryDescriptionFieldNumber = 3;
    private string summaryDescription_ = "";
    /// <summary>
    /// Longform readable description of the summary sequence. Markdown supported.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SummaryDescription {
      get { return summaryDescription_; }
      set {
        summaryDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SummaryMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SummaryMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PluginData, other.PluginData)) return false;
      if (DisplayName != other.DisplayName) return false;
      if (SummaryDescription != other.SummaryDescription) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pluginData_ != null) hash ^= PluginData.GetHashCode();
      if (DisplayName.Length != 0) hash ^= DisplayName.GetHashCode();
      if (SummaryDescription.Length != 0) hash ^= SummaryDescription.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pluginData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PluginData);
      }
      if (DisplayName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DisplayName);
      }
      if (SummaryDescription.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SummaryDescription);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pluginData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PluginData);
      }
      if (DisplayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
      }
      if (SummaryDescription.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SummaryDescription);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SummaryMetadata other) {
      if (other == null) {
        return;
      }
      if (other.pluginData_ != null) {
        if (pluginData_ == null) {
          pluginData_ = new global::Tensorflow.SummaryMetadata.Types.PluginData();
        }
        PluginData.MergeFrom(other.PluginData);
      }
      if (other.DisplayName.Length != 0) {
        DisplayName = other.DisplayName;
      }
      if (other.SummaryDescription.Length != 0) {
        SummaryDescription = other.SummaryDescription;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (pluginData_ == null) {
              pluginData_ = new global::Tensorflow.SummaryMetadata.Types.PluginData();
            }
            input.ReadMessage(pluginData_);
            break;
          }
          case 18: {
            DisplayName = input.ReadString();
            break;
          }
          case 26: {
            SummaryDescription = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SummaryMetadata message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class PluginData : pb::IMessage<PluginData> {
        private static readonly pb::MessageParser<PluginData> _parser = new pb::MessageParser<PluginData>(() => new PluginData());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PluginData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Tensorflow.SummaryMetadata.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PluginData() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PluginData(PluginData other) : this() {
          pluginName_ = other.pluginName_;
          content_ = other.content_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PluginData Clone() {
          return new PluginData(this);
        }

        /// <summary>Field number for the "plugin_name" field.</summary>
        public const int PluginNameFieldNumber = 1;
        private string pluginName_ = "";
        /// <summary>
        /// The name of the plugin this data pertains to.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PluginName {
          get { return pluginName_; }
          set {
            pluginName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "content" field.</summary>
        public const int ContentFieldNumber = 2;
        private pb::ByteString content_ = pb::ByteString.Empty;
        /// <summary>
        /// The content to store for the plugin. The best practice is for this to be
        /// a binary serialized protocol buffer.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Content {
          get { return content_; }
          set {
            content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PluginData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PluginData other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PluginName != other.PluginName) return false;
          if (Content != other.Content) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (PluginName.Length != 0) hash ^= PluginName.GetHashCode();
          if (Content.Length != 0) hash ^= Content.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (PluginName.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(PluginName);
          }
          if (Content.Length != 0) {
            output.WriteRawTag(18);
            output.WriteBytes(Content);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (PluginName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PluginName);
          }
          if (Content.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Content);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PluginData other) {
          if (other == null) {
            return;
          }
          if (other.PluginName.Length != 0) {
            PluginName = other.PluginName;
          }
          if (other.Content.Length != 0) {
            Content = other.Content;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                PluginName = input.ReadString();
                break;
              }
              case 18: {
                Content = input.ReadBytes();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// A Summary is a set of named values to be displayed by the
  /// visualizer.
  ///
  /// Summaries are produced regularly during training, as controlled by
  /// the "summary_interval_secs" attribute of the training operation.
  /// Summaries are also produced at the end of an evaluation.
  /// </summary>
  public sealed partial class Summary : pb::IMessage<Summary> {
    private static readonly pb::MessageParser<Summary> _parser = new pb::MessageParser<Summary>(() => new Summary());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Summary> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.SummaryReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Summary() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Summary(Summary other) : this() {
      value_ = other.value_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Summary Clone() {
      return new Summary(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tensorflow.Summary.Types.Value> _repeated_value_codec
        = pb::FieldCodec.ForMessage(10, global::Tensorflow.Summary.Types.Value.Parser);
    private readonly pbc::RepeatedField<global::Tensorflow.Summary.Types.Value> value_ = new pbc::RepeatedField<global::Tensorflow.Summary.Types.Value>();
    /// <summary>
    /// Set of values for the summary.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tensorflow.Summary.Types.Value> Value {
      get { return value_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Summary);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Summary other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!value_.Equals(other.value_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= value_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      value_.WriteTo(output, _repeated_value_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += value_.CalculateSize(_repeated_value_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Summary other) {
      if (other == null) {
        return;
      }
      value_.Add(other.value_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            value_.AddEntriesFrom(input, _repeated_value_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Summary message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Image : pb::IMessage<Image> {
        private static readonly pb::MessageParser<Image> _parser = new pb::MessageParser<Image>(() => new Image());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Image> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Tensorflow.Summary.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Image() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Image(Image other) : this() {
          height_ = other.height_;
          width_ = other.width_;
          colorspace_ = other.colorspace_;
          encodedImageString_ = other.encodedImageString_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Image Clone() {
          return new Image(this);
        }

        /// <summary>Field number for the "height" field.</summary>
        public const int HeightFieldNumber = 1;
        private int height_;
        /// <summary>
        /// Dimensions of the image.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Height {
          get { return height_; }
          set {
            height_ = value;
          }
        }

        /// <summary>Field number for the "width" field.</summary>
        public const int WidthFieldNumber = 2;
        private int width_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Width {
          get { return width_; }
          set {
            width_ = value;
          }
        }

        /// <summary>Field number for the "colorspace" field.</summary>
        public const int ColorspaceFieldNumber = 3;
        private int colorspace_;
        /// <summary>
        /// Valid colorspace values are
        ///   1 - grayscale
        ///   2 - grayscale + alpha
        ///   3 - RGB
        ///   4 - RGBA
        ///   5 - DIGITAL_YUV
        ///   6 - BGRA
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Colorspace {
          get { return colorspace_; }
          set {
            colorspace_ = value;
          }
        }

        /// <summary>Field number for the "encoded_image_string" field.</summary>
        public const int EncodedImageStringFieldNumber = 4;
        private pb::ByteString encodedImageString_ = pb::ByteString.Empty;
        /// <summary>
        /// Image data in encoded format.  All image formats supported by
        /// image_codec::CoderUtil can be stored here.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString EncodedImageString {
          get { return encodedImageString_; }
          set {
            encodedImageString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Image);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Image other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Height != other.Height) return false;
          if (Width != other.Width) return false;
          if (Colorspace != other.Colorspace) return false;
          if (EncodedImageString != other.EncodedImageString) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Height != 0) hash ^= Height.GetHashCode();
          if (Width != 0) hash ^= Width.GetHashCode();
          if (Colorspace != 0) hash ^= Colorspace.GetHashCode();
          if (EncodedImageString.Length != 0) hash ^= EncodedImageString.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Height != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Height);
          }
          if (Width != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Width);
          }
          if (Colorspace != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Colorspace);
          }
          if (EncodedImageString.Length != 0) {
            output.WriteRawTag(34);
            output.WriteBytes(EncodedImageString);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Height != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
          }
          if (Width != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
          }
          if (Colorspace != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Colorspace);
          }
          if (EncodedImageString.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncodedImageString);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Image other) {
          if (other == null) {
            return;
          }
          if (other.Height != 0) {
            Height = other.Height;
          }
          if (other.Width != 0) {
            Width = other.Width;
          }
          if (other.Colorspace != 0) {
            Colorspace = other.Colorspace;
          }
          if (other.EncodedImageString.Length != 0) {
            EncodedImageString = other.EncodedImageString;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Height = input.ReadInt32();
                break;
              }
              case 16: {
                Width = input.ReadInt32();
                break;
              }
              case 24: {
                Colorspace = input.ReadInt32();
                break;
              }
              case 34: {
                EncodedImageString = input.ReadBytes();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Audio : pb::IMessage<Audio> {
        private static readonly pb::MessageParser<Audio> _parser = new pb::MessageParser<Audio>(() => new Audio());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Audio> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Tensorflow.Summary.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Audio() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Audio(Audio other) : this() {
          sampleRate_ = other.sampleRate_;
          numChannels_ = other.numChannels_;
          lengthFrames_ = other.lengthFrames_;
          encodedAudioString_ = other.encodedAudioString_;
          contentType_ = other.contentType_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Audio Clone() {
          return new Audio(this);
        }

        /// <summary>Field number for the "sample_rate" field.</summary>
        public const int SampleRateFieldNumber = 1;
        private float sampleRate_;
        /// <summary>
        /// Sample rate of the audio in Hz.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float SampleRate {
          get { return sampleRate_; }
          set {
            sampleRate_ = value;
          }
        }

        /// <summary>Field number for the "num_channels" field.</summary>
        public const int NumChannelsFieldNumber = 2;
        private long numChannels_;
        /// <summary>
        /// Number of channels of audio.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long NumChannels {
          get { return numChannels_; }
          set {
            numChannels_ = value;
          }
        }

        /// <summary>Field number for the "length_frames" field.</summary>
        public const int LengthFramesFieldNumber = 3;
        private long lengthFrames_;
        /// <summary>
        /// Length of the audio in frames (samples per channel).
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long LengthFrames {
          get { return lengthFrames_; }
          set {
            lengthFrames_ = value;
          }
        }

        /// <summary>Field number for the "encoded_audio_string" field.</summary>
        public const int EncodedAudioStringFieldNumber = 4;
        private pb::ByteString encodedAudioString_ = pb::ByteString.Empty;
        /// <summary>
        /// Encoded audio data and its associated RFC 2045 content type (e.g.
        /// "audio/wav").
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString EncodedAudioString {
          get { return encodedAudioString_; }
          set {
            encodedAudioString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "content_type" field.</summary>
        public const int ContentTypeFieldNumber = 5;
        private string contentType_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ContentType {
          get { return contentType_; }
          set {
            contentType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Audio);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Audio other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SampleRate, other.SampleRate)) return false;
          if (NumChannels != other.NumChannels) return false;
          if (LengthFrames != other.LengthFrames) return false;
          if (EncodedAudioString != other.EncodedAudioString) return false;
          if (ContentType != other.ContentType) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (SampleRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SampleRate);
          if (NumChannels != 0L) hash ^= NumChannels.GetHashCode();
          if (LengthFrames != 0L) hash ^= LengthFrames.GetHashCode();
          if (EncodedAudioString.Length != 0) hash ^= EncodedAudioString.GetHashCode();
          if (ContentType.Length != 0) hash ^= ContentType.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (SampleRate != 0F) {
            output.WriteRawTag(13);
            output.WriteFloat(SampleRate);
          }
          if (NumChannels != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(NumChannels);
          }
          if (LengthFrames != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(LengthFrames);
          }
          if (EncodedAudioString.Length != 0) {
            output.WriteRawTag(34);
            output.WriteBytes(EncodedAudioString);
          }
          if (ContentType.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(ContentType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (SampleRate != 0F) {
            size += 1 + 4;
          }
          if (NumChannels != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(NumChannels);
          }
          if (LengthFrames != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(LengthFrames);
          }
          if (EncodedAudioString.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncodedAudioString);
          }
          if (ContentType.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ContentType);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Audio other) {
          if (other == null) {
            return;
          }
          if (other.SampleRate != 0F) {
            SampleRate = other.SampleRate;
          }
          if (other.NumChannels != 0L) {
            NumChannels = other.NumChannels;
          }
          if (other.LengthFrames != 0L) {
            LengthFrames = other.LengthFrames;
          }
          if (other.EncodedAudioString.Length != 0) {
            EncodedAudioString = other.EncodedAudioString;
          }
          if (other.ContentType.Length != 0) {
            ContentType = other.ContentType;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 13: {
                SampleRate = input.ReadFloat();
                break;
              }
              case 16: {
                NumChannels = input.ReadInt64();
                break;
              }
              case 24: {
                LengthFrames = input.ReadInt64();
                break;
              }
              case 34: {
                EncodedAudioString = input.ReadBytes();
                break;
              }
              case 42: {
                ContentType = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Value : pb::IMessage<Value> {
        private static readonly pb::MessageParser<Value> _parser = new pb::MessageParser<Value>(() => new Value());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Value> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Tensorflow.Summary.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Value() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Value(Value other) : this() {
          nodeName_ = other.nodeName_;
          tag_ = other.tag_;
          metadata_ = other.metadata_ != null ? other.metadata_.Clone() : null;
          switch (other.ValueCase) {
            case ValueOneofCase.SimpleValue:
              SimpleValue = other.SimpleValue;
              break;
            case ValueOneofCase.ObsoleteOldStyleHistogram:
              ObsoleteOldStyleHistogram = other.ObsoleteOldStyleHistogram;
              break;
            case ValueOneofCase.Image:
              Image = other.Image.Clone();
              break;
            case ValueOneofCase.Histo:
              Histo = other.Histo.Clone();
              break;
            case ValueOneofCase.Audio:
              Audio = other.Audio.Clone();
              break;
            case ValueOneofCase.Tensor:
              Tensor = other.Tensor.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Value Clone() {
          return new Value(this);
        }

        /// <summary>Field number for the "node_name" field.</summary>
        public const int NodeNameFieldNumber = 7;
        private string nodeName_ = "";
        /// <summary>
        /// This field is deprecated and will not be set.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string NodeName {
          get { return nodeName_; }
          set {
            nodeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "tag" field.</summary>
        public const int TagFieldNumber = 1;
        private string tag_ = "";
        /// <summary>
        /// Tag name for the data. Used by TensorBoard plugins to organize data. Tags
        /// are often organized by scope (which contains slashes to convey
        /// hierarchy). For example: foo/bar/0
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Tag {
          get { return tag_; }
          set {
            tag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "metadata" field.</summary>
        public const int MetadataFieldNumber = 9;
        private global::Tensorflow.SummaryMetadata metadata_;
        /// <summary>
        /// Contains metadata on the summary value such as which plugins may use it.
        /// Take note that many summary values may lack a metadata field. This is
        /// because the FileWriter only keeps a metadata object on the first summary
        /// value with a certain tag for each tag. TensorBoard then remembers which
        /// tags are associated with which plugins. This saves space.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Tensorflow.SummaryMetadata Metadata {
          get { return metadata_; }
          set {
            metadata_ = value;
          }
        }

        /// <summary>Field number for the "simple_value" field.</summary>
        public const int SimpleValueFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float SimpleValue {
          get { return valueCase_ == ValueOneofCase.SimpleValue ? (float) value_ : 0F; }
          set {
            value_ = value;
            valueCase_ = ValueOneofCase.SimpleValue;
          }
        }

        /// <summary>Field number for the "obsolete_old_style_histogram" field.</summary>
        public const int ObsoleteOldStyleHistogramFieldNumber = 3;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString ObsoleteOldStyleHistogram {
          get { return valueCase_ == ValueOneofCase.ObsoleteOldStyleHistogram ? (pb::ByteString) value_ : pb::ByteString.Empty; }
          set {
            value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            valueCase_ = ValueOneofCase.ObsoleteOldStyleHistogram;
          }
        }

        /// <summary>Field number for the "image" field.</summary>
        public const int ImageFieldNumber = 4;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Tensorflow.Summary.Types.Image Image {
          get { return valueCase_ == ValueOneofCase.Image ? (global::Tensorflow.Summary.Types.Image) value_ : null; }
          set {
            value_ = value;
            valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Image;
          }
        }

        /// <summary>Field number for the "histo" field.</summary>
        public const int HistoFieldNumber = 5;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Tensorflow.HistogramProto Histo {
          get { return valueCase_ == ValueOneofCase.Histo ? (global::Tensorflow.HistogramProto) value_ : null; }
          set {
            value_ = value;
            valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Histo;
          }
        }

        /// <summary>Field number for the "audio" field.</summary>
        public const int AudioFieldNumber = 6;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Tensorflow.Summary.Types.Audio Audio {
          get { return valueCase_ == ValueOneofCase.Audio ? (global::Tensorflow.Summary.Types.Audio) value_ : null; }
          set {
            value_ = value;
            valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Audio;
          }
        }

        /// <summary>Field number for the "tensor" field.</summary>
        public const int TensorFieldNumber = 8;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Tensorflow.TensorProto Tensor {
          get { return valueCase_ == ValueOneofCase.Tensor ? (global::Tensorflow.TensorProto) value_ : null; }
          set {
            value_ = value;
            valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Tensor;
          }
        }

        private object value_;
        /// <summary>Enum of possible cases for the "value" oneof.</summary>
        public enum ValueOneofCase {
          None = 0,
          SimpleValue = 2,
          ObsoleteOldStyleHistogram = 3,
          Image = 4,
          Histo = 5,
          Audio = 6,
          Tensor = 8,
        }
        private ValueOneofCase valueCase_ = ValueOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ValueOneofCase ValueCase {
          get { return valueCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearValue() {
          valueCase_ = ValueOneofCase.None;
          value_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Value);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Value other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (NodeName != other.NodeName) return false;
          if (Tag != other.Tag) return false;
          if (!object.Equals(Metadata, other.Metadata)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SimpleValue, other.SimpleValue)) return false;
          if (ObsoleteOldStyleHistogram != other.ObsoleteOldStyleHistogram) return false;
          if (!object.Equals(Image, other.Image)) return false;
          if (!object.Equals(Histo, other.Histo)) return false;
          if (!object.Equals(Audio, other.Audio)) return false;
          if (!object.Equals(Tensor, other.Tensor)) return false;
          if (ValueCase != other.ValueCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (NodeName.Length != 0) hash ^= NodeName.GetHashCode();
          if (Tag.Length != 0) hash ^= Tag.GetHashCode();
          if (metadata_ != null) hash ^= Metadata.GetHashCode();
          if (valueCase_ == ValueOneofCase.SimpleValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SimpleValue);
          if (valueCase_ == ValueOneofCase.ObsoleteOldStyleHistogram) hash ^= ObsoleteOldStyleHistogram.GetHashCode();
          if (valueCase_ == ValueOneofCase.Image) hash ^= Image.GetHashCode();
          if (valueCase_ == ValueOneofCase.Histo) hash ^= Histo.GetHashCode();
          if (valueCase_ == ValueOneofCase.Audio) hash ^= Audio.GetHashCode();
          if (valueCase_ == ValueOneofCase.Tensor) hash ^= Tensor.GetHashCode();
          hash ^= (int) valueCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Tag.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Tag);
          }
          if (valueCase_ == ValueOneofCase.SimpleValue) {
            output.WriteRawTag(21);
            output.WriteFloat(SimpleValue);
          }
          if (valueCase_ == ValueOneofCase.ObsoleteOldStyleHistogram) {
            output.WriteRawTag(26);
            output.WriteBytes(ObsoleteOldStyleHistogram);
          }
          if (valueCase_ == ValueOneofCase.Image) {
            output.WriteRawTag(34);
            output.WriteMessage(Image);
          }
          if (valueCase_ == ValueOneofCase.Histo) {
            output.WriteRawTag(42);
            output.WriteMessage(Histo);
          }
          if (valueCase_ == ValueOneofCase.Audio) {
            output.WriteRawTag(50);
            output.WriteMessage(Audio);
          }
          if (NodeName.Length != 0) {
            output.WriteRawTag(58);
            output.WriteString(NodeName);
          }
          if (valueCase_ == ValueOneofCase.Tensor) {
            output.WriteRawTag(66);
            output.WriteMessage(Tensor);
          }
          if (metadata_ != null) {
            output.WriteRawTag(74);
            output.WriteMessage(Metadata);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (NodeName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(NodeName);
          }
          if (Tag.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Tag);
          }
          if (metadata_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
          }
          if (valueCase_ == ValueOneofCase.SimpleValue) {
            size += 1 + 4;
          }
          if (valueCase_ == ValueOneofCase.ObsoleteOldStyleHistogram) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(ObsoleteOldStyleHistogram);
          }
          if (valueCase_ == ValueOneofCase.Image) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Image);
          }
          if (valueCase_ == ValueOneofCase.Histo) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Histo);
          }
          if (valueCase_ == ValueOneofCase.Audio) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Audio);
          }
          if (valueCase_ == ValueOneofCase.Tensor) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tensor);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Value other) {
          if (other == null) {
            return;
          }
          if (other.NodeName.Length != 0) {
            NodeName = other.NodeName;
          }
          if (other.Tag.Length != 0) {
            Tag = other.Tag;
          }
          if (other.metadata_ != null) {
            if (metadata_ == null) {
              metadata_ = new global::Tensorflow.SummaryMetadata();
            }
            Metadata.MergeFrom(other.Metadata);
          }
          switch (other.ValueCase) {
            case ValueOneofCase.SimpleValue:
              SimpleValue = other.SimpleValue;
              break;
            case ValueOneofCase.ObsoleteOldStyleHistogram:
              ObsoleteOldStyleHistogram = other.ObsoleteOldStyleHistogram;
              break;
            case ValueOneofCase.Image:
              if (Image == null) {
                Image = new global::Tensorflow.Summary.Types.Image();
              }
              Image.MergeFrom(other.Image);
              break;
            case ValueOneofCase.Histo:
              if (Histo == null) {
                Histo = new global::Tensorflow.HistogramProto();
              }
              Histo.MergeFrom(other.Histo);
              break;
            case ValueOneofCase.Audio:
              if (Audio == null) {
                Audio = new global::Tensorflow.Summary.Types.Audio();
              }
              Audio.MergeFrom(other.Audio);
              break;
            case ValueOneofCase.Tensor:
              if (Tensor == null) {
                Tensor = new global::Tensorflow.TensorProto();
              }
              Tensor.MergeFrom(other.Tensor);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Tag = input.ReadString();
                break;
              }
              case 21: {
                SimpleValue = input.ReadFloat();
                break;
              }
              case 26: {
                ObsoleteOldStyleHistogram = input.ReadBytes();
                break;
              }
              case 34: {
                global::Tensorflow.Summary.Types.Image subBuilder = new global::Tensorflow.Summary.Types.Image();
                if (valueCase_ == ValueOneofCase.Image) {
                  subBuilder.MergeFrom(Image);
                }
                input.ReadMessage(subBuilder);
                Image = subBuilder;
                break;
              }
              case 42: {
                global::Tensorflow.HistogramProto subBuilder = new global::Tensorflow.HistogramProto();
                if (valueCase_ == ValueOneofCase.Histo) {
                  subBuilder.MergeFrom(Histo);
                }
                input.ReadMessage(subBuilder);
                Histo = subBuilder;
                break;
              }
              case 50: {
                global::Tensorflow.Summary.Types.Audio subBuilder = new global::Tensorflow.Summary.Types.Audio();
                if (valueCase_ == ValueOneofCase.Audio) {
                  subBuilder.MergeFrom(Audio);
                }
                input.ReadMessage(subBuilder);
                Audio = subBuilder;
                break;
              }
              case 58: {
                NodeName = input.ReadString();
                break;
              }
              case 66: {
                global::Tensorflow.TensorProto subBuilder = new global::Tensorflow.TensorProto();
                if (valueCase_ == ValueOneofCase.Tensor) {
                  subBuilder.MergeFrom(Tensor);
                }
                input.ReadMessage(subBuilder);
                Tensor = subBuilder;
                break;
              }
              case 74: {
                if (metadata_ == null) {
                  metadata_ = new global::Tensorflow.SummaryMetadata();
                }
                input.ReadMessage(metadata_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
