//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from antlr-grammars\tptp_v7_0_0_0.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class tptp_v7_0_0_0Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, Or=44, And=45, Iff=46, 
		Impl=47, If=48, Niff=49, Nor=50, Nand=51, Not=52, ForallComb=53, TyForall=54, 
		Infix_inequality=55, Infix_equality=56, Forall=57, ExistsComb=58, TyExists=59, 
		Exists=60, Lambda=61, ChoiceComb=62, Choice=63, DescriptionComb=64, Description=65, 
		EqComb=66, App=67, Assignment=68, Arrow=69, Star=70, Plus=71, Subtype_sign=72, 
		Gentzen_arrow=73, Real=74, Signed_real=75, Unsigned_real=76, Rational=77, 
		Signed_rational=78, Unsigned_rational=79, Integer=80, Signed_integer=81, 
		Unsigned_integer=82, Decimal=83, Positive_decimal=84, Decimal_exponent=85, 
		Decimal_fraction=86, Dot_decimal=87, Exp_integer=88, Signed_exp_integer=89, 
		Unsigned_exp_integer=90, Dollar_word=91, Dollar_dollar_word=92, Upper_word=93, 
		Lower_word=94, Single_quoted=95, Distinct_object=96, WS=97, Line_comment=98, 
		Block_comment=99;
	public const int
		RULE_tptp_file = 0, RULE_tptp_input = 1, RULE_annotated_formula = 2, RULE_tpi_annotated = 3, 
		RULE_tpi_formula = 4, RULE_thf_annotated = 5, RULE_tfx_annotated = 6, 
		RULE_tff_annotated = 7, RULE_tcf_annotated = 8, RULE_fof_annotated = 9, 
		RULE_cnf_annotated = 10, RULE_annotations = 11, RULE_formula_role = 12, 
		RULE_thf_formula = 13, RULE_thf_logic_formula = 14, RULE_thf_binary_formula = 15, 
		RULE_thf_binary_pair = 16, RULE_thf_binary_tuple = 17, RULE_thf_or_formula = 18, 
		RULE_thf_and_formula = 19, RULE_thf_apply_formula = 20, RULE_thf_unitary_formula = 21, 
		RULE_thf_quantified_formula = 22, RULE_thf_quantification = 23, RULE_thf_variable = 24, 
		RULE_thf_typed_variable = 25, RULE_thf_unary_formula = 26, RULE_thf_atom = 27, 
		RULE_thf_function = 28, RULE_thf_conn_term = 29, RULE_thf_conditional = 30, 
		RULE_thf_let = 31, RULE_thf_arguments = 32, RULE_thf_type_formula = 33, 
		RULE_thf_typeable_formula = 34, RULE_thf_subtype = 35, RULE_thf_top_level_type = 36, 
		RULE_thf_unitary_type = 37, RULE_thf_apply_type = 38, RULE_thf_binary_type = 39, 
		RULE_thf_mapping_type = 40, RULE_thf_xprod_type = 41, RULE_thf_union_type = 42, 
		RULE_thf_sequent = 43, RULE_thf_tuple = 44, RULE_thf_formula_list = 45, 
		RULE_tfx_formula = 46, RULE_tfx_logic_formula = 47, RULE_tff_formula = 48, 
		RULE_tff_logic_formula = 49, RULE_tff_binary_formula = 50, RULE_tff_binary_nonassoc = 51, 
		RULE_tff_binary_assoc = 52, RULE_tff_or_formula = 53, RULE_tff_and_formula = 54, 
		RULE_tff_unitary_formula = 55, RULE_tff_quantified_formula = 56, RULE_tff_variable_list = 57, 
		RULE_tff_variable = 58, RULE_tff_typed_variable = 59, RULE_tff_unary_formula = 60, 
		RULE_tff_atomic_formula = 61, RULE_tff_conditional = 62, RULE_tff_let = 63, 
		RULE_tff_let_term_defns = 64, RULE_tff_let_term_list = 65, RULE_tff_let_term_defn = 66, 
		RULE_tff_let_term_binding = 67, RULE_tff_let_formula_defns = 68, RULE_tff_let_formula_list = 69, 
		RULE_tff_let_formula_defn = 70, RULE_tff_let_formula_binding = 71, RULE_tff_sequent = 72, 
		RULE_tff_formula_tuple = 73, RULE_tff_formula_tuple_list = 74, RULE_tff_typed_atom = 75, 
		RULE_tff_subtype = 76, RULE_tff_top_level_type = 77, RULE_tf1_quantified_type = 78, 
		RULE_tff_monotype = 79, RULE_tff_unitary_type = 80, RULE_tff_atomic_type = 81, 
		RULE_tff_type_arguments = 82, RULE_tff_mapping_type = 83, RULE_tff_xprod_type = 84, 
		RULE_tcf_formula = 85, RULE_tcf_logic_formula = 86, RULE_tcf_quantified_formula = 87, 
		RULE_fof_formula = 88, RULE_fof_logic_formula = 89, RULE_fof_binary_formula = 90, 
		RULE_fof_binary_nonassoc = 91, RULE_fof_binary_assoc = 92, RULE_fof_or_formula = 93, 
		RULE_fof_and_formula = 94, RULE_fof_unitary_formula = 95, RULE_fof_quantified_formula = 96, 
		RULE_fof_variable_list = 97, RULE_fof_unary_formula = 98, RULE_fof_infix_unary = 99, 
		RULE_fof_atomic_formula = 100, RULE_fof_plain_atomic_formula = 101, RULE_fof_defined_atomic_formula = 102, 
		RULE_fof_defined_plain_formula = 103, RULE_fof_defined_infix_formula = 104, 
		RULE_fof_system_atomic_formula = 105, RULE_fof_plain_term = 106, RULE_fof_defined_term = 107, 
		RULE_fof_defined_atomic_term = 108, RULE_fof_defined_plain_term = 109, 
		RULE_fof_system_term = 110, RULE_fof_arguments = 111, RULE_fof_term = 112, 
		RULE_fof_function_term = 113, RULE_tff_conditional_term = 114, RULE_tff_let_term = 115, 
		RULE_tff_tuple_term = 116, RULE_fof_sequent = 117, RULE_fof_formula_tuple = 118, 
		RULE_fof_formula_tuple_list = 119, RULE_cnf_formula = 120, RULE_cnf_disjunction = 121, 
		RULE_cnf_literal = 122, RULE_thf_quantifier = 123, RULE_th0_quantifier = 124, 
		RULE_th1_quantifier = 125, RULE_thf_pair_connective = 126, RULE_thf_unary_connective = 127, 
		RULE_th1_unary_connective = 128, RULE_tff_pair_connective = 129, RULE_fof_quantifier = 130, 
		RULE_binary_connective = 131, RULE_assoc_connective = 132, RULE_unary_connective = 133, 
		RULE_type_constant = 134, RULE_type_functor = 135, RULE_defined_type = 136, 
		RULE_system_type = 137, RULE_atom = 138, RULE_untyped_atom = 139, RULE_defined_proposition = 140, 
		RULE_defined_predicate = 141, RULE_defined_infix_pred = 142, RULE_constant = 143, 
		RULE_functor = 144, RULE_system_constant = 145, RULE_system_functor = 146, 
		RULE_defined_constant = 147, RULE_defined_functor = 148, RULE_defined_term = 149, 
		RULE_variable = 150, RULE_source = 151, RULE_sources = 152, RULE_dag_source = 153, 
		RULE_inference_record = 154, RULE_inference_rule = 155, RULE_inference_parents = 156, 
		RULE_parent_list = 157, RULE_parent_info = 158, RULE_parent_details = 159, 
		RULE_internal_source = 160, RULE_intro_type = 161, RULE_external_source = 162, 
		RULE_file_source = 163, RULE_file_info = 164, RULE_theory = 165, RULE_theory_name = 166, 
		RULE_creator_source = 167, RULE_creator_name = 168, RULE_optional_info = 169, 
		RULE_useful_info = 170, RULE_info_items = 171, RULE_info_item = 172, RULE_formula_item = 173, 
		RULE_description_item = 174, RULE_iquote_item = 175, RULE_inference_item = 176, 
		RULE_inference_status = 177, RULE_status_value = 178, RULE_inference_info = 179, 
		RULE_assumptions_record = 180, RULE_refutation = 181, RULE_new_symbol_record = 182, 
		RULE_new_symbol_list = 183, RULE_principal_symbol = 184, RULE_include = 185, 
		RULE_formula_selection = 186, RULE_name_list = 187, RULE_general_term = 188, 
		RULE_general_data = 189, RULE_general_function = 190, RULE_formula_data = 191, 
		RULE_general_list = 192, RULE_general_terms = 193, RULE_name = 194, RULE_atomic_word = 195, 
		RULE_atomic_defined_word = 196, RULE_atomic_system_word = 197, RULE_number = 198, 
		RULE_file_name = 199;
	public static readonly string[] ruleNames = {
		"tptp_file", "tptp_input", "annotated_formula", "tpi_annotated", "tpi_formula", 
		"thf_annotated", "tfx_annotated", "tff_annotated", "tcf_annotated", "fof_annotated", 
		"cnf_annotated", "annotations", "formula_role", "thf_formula", "thf_logic_formula", 
		"thf_binary_formula", "thf_binary_pair", "thf_binary_tuple", "thf_or_formula", 
		"thf_and_formula", "thf_apply_formula", "thf_unitary_formula", "thf_quantified_formula", 
		"thf_quantification", "thf_variable", "thf_typed_variable", "thf_unary_formula", 
		"thf_atom", "thf_function", "thf_conn_term", "thf_conditional", "thf_let", 
		"thf_arguments", "thf_type_formula", "thf_typeable_formula", "thf_subtype", 
		"thf_top_level_type", "thf_unitary_type", "thf_apply_type", "thf_binary_type", 
		"thf_mapping_type", "thf_xprod_type", "thf_union_type", "thf_sequent", 
		"thf_tuple", "thf_formula_list", "tfx_formula", "tfx_logic_formula", "tff_formula", 
		"tff_logic_formula", "tff_binary_formula", "tff_binary_nonassoc", "tff_binary_assoc", 
		"tff_or_formula", "tff_and_formula", "tff_unitary_formula", "tff_quantified_formula", 
		"tff_variable_list", "tff_variable", "tff_typed_variable", "tff_unary_formula", 
		"tff_atomic_formula", "tff_conditional", "tff_let", "tff_let_term_defns", 
		"tff_let_term_list", "tff_let_term_defn", "tff_let_term_binding", "tff_let_formula_defns", 
		"tff_let_formula_list", "tff_let_formula_defn", "tff_let_formula_binding", 
		"tff_sequent", "tff_formula_tuple", "tff_formula_tuple_list", "tff_typed_atom", 
		"tff_subtype", "tff_top_level_type", "tf1_quantified_type", "tff_monotype", 
		"tff_unitary_type", "tff_atomic_type", "tff_type_arguments", "tff_mapping_type", 
		"tff_xprod_type", "tcf_formula", "tcf_logic_formula", "tcf_quantified_formula", 
		"fof_formula", "fof_logic_formula", "fof_binary_formula", "fof_binary_nonassoc", 
		"fof_binary_assoc", "fof_or_formula", "fof_and_formula", "fof_unitary_formula", 
		"fof_quantified_formula", "fof_variable_list", "fof_unary_formula", "fof_infix_unary", 
		"fof_atomic_formula", "fof_plain_atomic_formula", "fof_defined_atomic_formula", 
		"fof_defined_plain_formula", "fof_defined_infix_formula", "fof_system_atomic_formula", 
		"fof_plain_term", "fof_defined_term", "fof_defined_atomic_term", "fof_defined_plain_term", 
		"fof_system_term", "fof_arguments", "fof_term", "fof_function_term", "tff_conditional_term", 
		"tff_let_term", "tff_tuple_term", "fof_sequent", "fof_formula_tuple", 
		"fof_formula_tuple_list", "cnf_formula", "cnf_disjunction", "cnf_literal", 
		"thf_quantifier", "th0_quantifier", "th1_quantifier", "thf_pair_connective", 
		"thf_unary_connective", "th1_unary_connective", "tff_pair_connective", 
		"fof_quantifier", "binary_connective", "assoc_connective", "unary_connective", 
		"type_constant", "type_functor", "defined_type", "system_type", "atom", 
		"untyped_atom", "defined_proposition", "defined_predicate", "defined_infix_pred", 
		"constant", "functor", "system_constant", "system_functor", "defined_constant", 
		"defined_functor", "defined_term", "variable", "source", "sources", "dag_source", 
		"inference_record", "inference_rule", "inference_parents", "parent_list", 
		"parent_info", "parent_details", "internal_source", "intro_type", "external_source", 
		"file_source", "file_info", "theory", "theory_name", "creator_source", 
		"creator_name", "optional_info", "useful_info", "info_items", "info_item", 
		"formula_item", "description_item", "iquote_item", "inference_item", "inference_status", 
		"status_value", "inference_info", "assumptions_record", "refutation", 
		"new_symbol_record", "new_symbol_list", "principal_symbol", "include", 
		"formula_selection", "name_list", "general_term", "general_data", "general_function", 
		"formula_data", "general_list", "general_terms", "name", "atomic_word", 
		"atomic_defined_word", "atomic_system_word", "number", "file_name"
	};

	private static readonly string[] _LiteralNames = {
		null, "'tpi('", "','", "').'", "'thf('", "'tfx('", "'tff('", "'tcf('", 
		"'fof('", "'cnf('", "'('", "')'", "'['", "']'", "':'", "'$ite('", "'$let('", 
		"'[]'", "'{}'", "'{'", "'}'", "'$ite_f('", "'$let_tf('", "'$let_ff('", 
		"'$ite_t('", "'$let_ft('", "'$let_tt('", "'inference('", "'introduced('", 
		"'file('", "'theory('", "'creator('", "'description('", "'iquote('", "'status('", 
		"'assumptions('", "'refutation('", "'new_symbols('", "'include('", "'$thf('", 
		"'$tff('", "'$fof('", "'$cnf('", "'$fot('", "'|'", "'&'", "'<=>'", "'=>'", 
		"'<='", "'<~>'", "'~|'", "'~&'", "'~'", "'!!'", "'!>'", "'!='", "'='", 
		"'!'", "'??'", "'?*'", "'?'", "'^'", "'@@+'", "'@+'", "'@@-'", "'@-'", 
		"'@='", "'@'", "':='", "'>'", "'*'", "'+'", "'<<'", "'-->'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "Or", "And", "Iff", "Impl", 
		"If", "Niff", "Nor", "Nand", "Not", "ForallComb", "TyForall", "Infix_inequality", 
		"Infix_equality", "Forall", "ExistsComb", "TyExists", "Exists", "Lambda", 
		"ChoiceComb", "Choice", "DescriptionComb", "Description", "EqComb", "App", 
		"Assignment", "Arrow", "Star", "Plus", "Subtype_sign", "Gentzen_arrow", 
		"Real", "Signed_real", "Unsigned_real", "Rational", "Signed_rational", 
		"Unsigned_rational", "Integer", "Signed_integer", "Unsigned_integer", 
		"Decimal", "Positive_decimal", "Decimal_exponent", "Decimal_fraction", 
		"Dot_decimal", "Exp_integer", "Signed_exp_integer", "Unsigned_exp_integer", 
		"Dollar_word", "Dollar_dollar_word", "Upper_word", "Lower_word", "Single_quoted", 
		"Distinct_object", "WS", "Line_comment", "Block_comment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "tptp_v7_0_0_0.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static tptp_v7_0_0_0Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public tptp_v7_0_0_0Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public tptp_v7_0_0_0Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class Tptp_fileContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(tptp_v7_0_0_0Parser.Eof, 0); }
		public Tptp_inputContext[] tptp_input() {
			return GetRuleContexts<Tptp_inputContext>();
		}
		public Tptp_inputContext tptp_input(int i) {
			return GetRuleContext<Tptp_inputContext>(i);
		}
		public Tptp_fileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tptp_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTptp_file(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTptp_file(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTptp_file(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tptp_fileContext tptp_file() {
		Tptp_fileContext _localctx = new Tptp_fileContext(Context, State);
		EnterRule(_localctx, 0, RULE_tptp_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 403;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__37))) != 0)) {
				{
				{
				State = 400; tptp_input();
				}
				}
				State = 405;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 406; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tptp_inputContext : ParserRuleContext {
		public Annotated_formulaContext annotated_formula() {
			return GetRuleContext<Annotated_formulaContext>(0);
		}
		public IncludeContext include() {
			return GetRuleContext<IncludeContext>(0);
		}
		public Tptp_inputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tptp_input; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTptp_input(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTptp_input(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTptp_input(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tptp_inputContext tptp_input() {
		Tptp_inputContext _localctx = new Tptp_inputContext(Context, State);
		EnterRule(_localctx, 2, RULE_tptp_input);
		try {
			State = 410;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
				EnterOuterAlt(_localctx, 1);
				{
				State = 408; annotated_formula();
				}
				break;
			case T__37:
				EnterOuterAlt(_localctx, 2);
				{
				State = 409; include();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Annotated_formulaContext : ParserRuleContext {
		public Thf_annotatedContext thf_annotated() {
			return GetRuleContext<Thf_annotatedContext>(0);
		}
		public Tfx_annotatedContext tfx_annotated() {
			return GetRuleContext<Tfx_annotatedContext>(0);
		}
		public Tff_annotatedContext tff_annotated() {
			return GetRuleContext<Tff_annotatedContext>(0);
		}
		public Tcf_annotatedContext tcf_annotated() {
			return GetRuleContext<Tcf_annotatedContext>(0);
		}
		public Fof_annotatedContext fof_annotated() {
			return GetRuleContext<Fof_annotatedContext>(0);
		}
		public Cnf_annotatedContext cnf_annotated() {
			return GetRuleContext<Cnf_annotatedContext>(0);
		}
		public Tpi_annotatedContext tpi_annotated() {
			return GetRuleContext<Tpi_annotatedContext>(0);
		}
		public Annotated_formulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotated_formula; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterAnnotated_formula(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitAnnotated_formula(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotated_formula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Annotated_formulaContext annotated_formula() {
		Annotated_formulaContext _localctx = new Annotated_formulaContext(Context, State);
		EnterRule(_localctx, 4, RULE_annotated_formula);
		try {
			State = 419;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__3:
				EnterOuterAlt(_localctx, 1);
				{
				State = 412; thf_annotated();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 2);
				{
				State = 413; tfx_annotated();
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 3);
				{
				State = 414; tff_annotated();
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 4);
				{
				State = 415; tcf_annotated();
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 5);
				{
				State = 416; fof_annotated();
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 6);
				{
				State = 417; cnf_annotated();
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 7);
				{
				State = 418; tpi_annotated();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tpi_annotatedContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Formula_roleContext formula_role() {
			return GetRuleContext<Formula_roleContext>(0);
		}
		public Tpi_formulaContext tpi_formula() {
			return GetRuleContext<Tpi_formulaContext>(0);
		}
		public AnnotationsContext annotations() {
			return GetRuleContext<AnnotationsContext>(0);
		}
		public Tpi_annotatedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tpi_annotated; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTpi_annotated(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTpi_annotated(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTpi_annotated(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tpi_annotatedContext tpi_annotated() {
		Tpi_annotatedContext _localctx = new Tpi_annotatedContext(Context, State);
		EnterRule(_localctx, 6, RULE_tpi_annotated);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 421; Match(T__0);
			State = 422; name();
			State = 423; Match(T__1);
			State = 424; formula_role();
			State = 425; Match(T__1);
			State = 426; tpi_formula();
			State = 428;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 427; annotations();
				}
			}

			State = 430; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tpi_formulaContext : ParserRuleContext {
		public Fof_formulaContext fof_formula() {
			return GetRuleContext<Fof_formulaContext>(0);
		}
		public Tpi_formulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tpi_formula; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTpi_formula(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTpi_formula(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTpi_formula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tpi_formulaContext tpi_formula() {
		Tpi_formulaContext _localctx = new Tpi_formulaContext(Context, State);
		EnterRule(_localctx, 8, RULE_tpi_formula);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 432; fof_formula();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Thf_annotatedContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Formula_roleContext formula_role() {
			return GetRuleContext<Formula_roleContext>(0);
		}
		public Thf_formulaContext thf_formula() {
			return GetRuleContext<Thf_formulaContext>(0);
		}
		public AnnotationsContext annotations() {
			return GetRuleContext<AnnotationsContext>(0);
		}
		public Thf_annotatedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thf_annotated; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterThf_annotated(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitThf_annotated(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThf_annotated(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Thf_annotatedContext thf_annotated() {
		Thf_annotatedContext _localctx = new Thf_annotatedContext(Context, State);
		EnterRule(_localctx, 10, RULE_thf_annotated);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 434; Match(T__3);
			State = 435; name();
			State = 436; Match(T__1);
			State = 437; formula_role();
			State = 438; Match(T__1);
			State = 439; thf_formula();
			State = 441;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 440; annotations();
				}
			}

			State = 443; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tfx_annotatedContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Formula_roleContext formula_role() {
			return GetRuleContext<Formula_roleContext>(0);
		}
		public Tfx_formulaContext tfx_formula() {
			return GetRuleContext<Tfx_formulaContext>(0);
		}
		public AnnotationsContext annotations() {
			return GetRuleContext<AnnotationsContext>(0);
		}
		public Tfx_annotatedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tfx_annotated; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTfx_annotated(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTfx_annotated(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTfx_annotated(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tfx_annotatedContext tfx_annotated() {
		Tfx_annotatedContext _localctx = new Tfx_annotatedContext(Context, State);
		EnterRule(_localctx, 12, RULE_tfx_annotated);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 445; Match(T__4);
			State = 446; name();
			State = 447; Match(T__1);
			State = 448; formula_role();
			State = 449; Match(T__1);
			State = 450; tfx_formula();
			State = 452;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 451; annotations();
				}
			}

			State = 454; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tff_annotatedContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Formula_roleContext formula_role() {
			return GetRuleContext<Formula_roleContext>(0);
		}
		public Tff_formulaContext tff_formula() {
			return GetRuleContext<Tff_formulaContext>(0);
		}
		public AnnotationsContext annotations() {
			return GetRuleContext<AnnotationsContext>(0);
		}
		public Tff_annotatedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tff_annotated; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTff_annotated(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTff_annotated(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTff_annotated(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tff_annotatedContext tff_annotated() {
		Tff_annotatedContext _localctx = new Tff_annotatedContext(Context, State);
		EnterRule(_localctx, 14, RULE_tff_annotated);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 456; Match(T__5);
			State = 457; name();
			State = 458; Match(T__1);
			State = 459; formula_role();
			State = 460; Match(T__1);
			State = 461; tff_formula();
			State = 463;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 462; annotations();
				}
			}

			State = 465; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tcf_annotatedContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Formula_roleContext formula_role() {
			return GetRuleContext<Formula_roleContext>(0);
		}
		public Tcf_formulaContext tcf_formula() {
			return GetRuleContext<Tcf_formulaContext>(0);
		}
		public AnnotationsContext annotations() {
			return GetRuleContext<AnnotationsContext>(0);
		}
		public Tcf_annotatedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tcf_annotated; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTcf_annotated(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTcf_annotated(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTcf_annotated(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tcf_annotatedContext tcf_annotated() {
		Tcf_annotatedContext _localctx = new Tcf_annotatedContext(Context, State);
		EnterRule(_localctx, 16, RULE_tcf_annotated);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 467; Match(T__6);
			State = 468; name();
			State = 469; Match(T__1);
			State = 470; formula_role();
			State = 471; Match(T__1);
			State = 472; tcf_formula();
			State = 474;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 473; annotations();
				}
			}

			State = 476; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fof_annotatedContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Formula_roleContext formula_role() {
			return GetRuleContext<Formula_roleContext>(0);
		}
		public Fof_formulaContext fof_formula() {
			return GetRuleContext<Fof_formulaContext>(0);
		}
		public AnnotationsContext annotations() {
			return GetRuleContext<AnnotationsContext>(0);
		}
		public Fof_annotatedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fof_annotated; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterFof_annotated(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitFof_annotated(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFof_annotated(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fof_annotatedContext fof_annotated() {
		Fof_annotatedContext _localctx = new Fof_annotatedContext(Context, State);
		EnterRule(_localctx, 18, RULE_fof_annotated);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 478; Match(T__7);
			State = 479; name();
			State = 480; Match(T__1);
			State = 481; formula_role();
			State = 482; Match(T__1);
			State = 483; fof_formula();
			State = 485;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 484; annotations();
				}
			}

			State = 487; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cnf_annotatedContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Formula_roleContext formula_role() {
			return GetRuleContext<Formula_roleContext>(0);
		}
		public Cnf_formulaContext cnf_formula() {
			return GetRuleContext<Cnf_formulaContext>(0);
		}
		public AnnotationsContext annotations() {
			return GetRuleContext<AnnotationsContext>(0);
		}
		public Cnf_annotatedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cnf_annotated; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterCnf_annotated(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitCnf_annotated(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCnf_annotated(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cnf_annotatedContext cnf_annotated() {
		Cnf_annotatedContext _localctx = new Cnf_annotatedContext(Context, State);
		EnterRule(_localctx, 20, RULE_cnf_annotated);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 489; Match(T__8);
			State = 490; name();
			State = 491; Match(T__1);
			State = 492; formula_role();
			State = 493; Match(T__1);
			State = 494; cnf_formula();
			State = 496;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 495; annotations();
				}
			}

			State = 498; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationsContext : ParserRuleContext {
		public SourceContext source() {
			return GetRuleContext<SourceContext>(0);
		}
		public Optional_infoContext optional_info() {
			return GetRuleContext<Optional_infoContext>(0);
		}
		public AnnotationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotations; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterAnnotations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitAnnotations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationsContext annotations() {
		AnnotationsContext _localctx = new AnnotationsContext(Context, State);
		EnterRule(_localctx, 22, RULE_annotations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 500; Match(T__1);
			State = 501; source();
			State = 503;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 502; optional_info();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Formula_roleContext : ParserRuleContext {
		public ITerminalNode Lower_word() { return GetToken(tptp_v7_0_0_0Parser.Lower_word, 0); }
		public Formula_roleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formula_role; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterFormula_role(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitFormula_role(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormula_role(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Formula_roleContext formula_role() {
		Formula_roleContext _localctx = new Formula_roleContext(Context, State);
		EnterRule(_localctx, 24, RULE_formula_role);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 505; Match(Lower_word);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Thf_formulaContext : ParserRuleContext {
		public Thf_logic_formulaContext thf_logic_formula() {
			return GetRuleContext<Thf_logic_formulaContext>(0);
		}
		public Thf_sequentContext thf_sequent() {
			return GetRuleContext<Thf_sequentContext>(0);
		}
		public Thf_formulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thf_formula; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterThf_formula(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitThf_formula(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThf_formula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Thf_formulaContext thf_formula() {
		Thf_formulaContext _localctx = new Thf_formulaContext(Context, State);
		EnterRule(_localctx, 26, RULE_thf_formula);
		try {
			State = 509;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 507; thf_logic_formula();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 508; thf_sequent();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Thf_logic_formulaContext : ParserRuleContext {
		public Thf_binary_formulaContext thf_binary_formula() {
			return GetRuleContext<Thf_binary_formulaContext>(0);
		}
		public Thf_unitary_formulaContext thf_unitary_formula() {
			return GetRuleContext<Thf_unitary_formulaContext>(0);
		}
		public Thf_type_formulaContext thf_type_formula() {
			return GetRuleContext<Thf_type_formulaContext>(0);
		}
		public Thf_subtypeContext thf_subtype() {
			return GetRuleContext<Thf_subtypeContext>(0);
		}
		public Thf_logic_formulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thf_logic_formula; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterThf_logic_formula(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitThf_logic_formula(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThf_logic_formula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Thf_logic_formulaContext thf_logic_formula() {
		Thf_logic_formulaContext _localctx = new Thf_logic_formulaContext(Context, State);
		EnterRule(_localctx, 28, RULE_thf_logic_formula);
		try {
			State = 515;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 511; thf_binary_formula();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 512; thf_unitary_formula();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 513; thf_type_formula();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 514; thf_subtype();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Thf_binary_formulaContext : ParserRuleContext {
		public Thf_binary_pairContext thf_binary_pair() {
			return GetRuleContext<Thf_binary_pairContext>(0);
		}
		public Thf_binary_tupleContext thf_binary_tuple() {
			return GetRuleContext<Thf_binary_tupleContext>(0);
		}
		public Thf_binary_typeContext thf_binary_type() {
			return GetRuleContext<Thf_binary_typeContext>(0);
		}
		public Thf_binary_formulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thf_binary_formula; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterThf_binary_formula(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitThf_binary_formula(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThf_binary_formula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Thf_binary_formulaContext thf_binary_formula() {
		Thf_binary_formulaContext _localctx = new Thf_binary_formulaContext(Context, State);
		EnterRule(_localctx, 30, RULE_thf_binary_formula);
		try {
			State = 520;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 517; thf_binary_pair();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 518; thf_binary_tuple();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 519; thf_binary_type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Thf_binary_pairContext : ParserRuleContext {
		public Thf_unitary_formulaContext[] thf_unitary_formula() {
			return GetRuleContexts<Thf_unitary_formulaContext>();
		}
		public Thf_unitary_formulaContext thf_unitary_formula(int i) {
			return GetRuleContext<Thf_unitary_formulaContext>(i);
		}
		public Thf_pair_connectiveContext thf_pair_connective() {
			return GetRuleContext<Thf_pair_connectiveContext>(0);
		}
		public Thf_binary_pairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thf_binary_pair; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterThf_binary_pair(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitThf_binary_pair(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThf_binary_pair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Thf_binary_pairContext thf_binary_pair() {
		Thf_binary_pairContext _localctx = new Thf_binary_pairContext(Context, State);
		EnterRule(_localctx, 32, RULE_thf_binary_pair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 522; thf_unitary_formula();
			State = 523; thf_pair_connective();
			State = 524; thf_unitary_formula();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Thf_binary_tupleContext : ParserRuleContext {
		public Thf_or_formulaContext thf_or_formula() {
			return GetRuleContext<Thf_or_formulaContext>(0);
		}
		public Thf_and_formulaContext thf_and_formula() {
			return GetRuleContext<Thf_and_formulaContext>(0);
		}
		public Thf_apply_formulaContext thf_apply_formula() {
			return GetRuleContext<Thf_apply_formulaContext>(0);
		}
		public Thf_binary_tupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thf_binary_tuple; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterThf_binary_tuple(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitThf_binary_tuple(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThf_binary_tuple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Thf_binary_tupleContext thf_binary_tuple() {
		Thf_binary_tupleContext _localctx = new Thf_binary_tupleContext(Context, State);
		EnterRule(_localctx, 34, RULE_thf_binary_tuple);
		try {
			State = 529;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 526; thf_or_formula(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 527; thf_and_formula(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 528; thf_apply_formula(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Thf_or_formulaContext : ParserRuleContext {
		public Thf_unitary_formulaContext[] thf_unitary_formula() {
			return GetRuleContexts<Thf_unitary_formulaContext>();
		}
		public Thf_unitary_formulaContext thf_unitary_formula(int i) {
			return GetRuleContext<Thf_unitary_formulaContext>(i);
		}
		public ITerminalNode Or() { return GetToken(tptp_v7_0_0_0Parser.Or, 0); }
		public Thf_or_formulaContext thf_or_formula() {
			return GetRuleContext<Thf_or_formulaContext>(0);
		}
		public Thf_or_formulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thf_or_formula; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterThf_or_formula(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitThf_or_formula(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThf_or_formula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Thf_or_formulaContext thf_or_formula() {
		return thf_or_formula(0);
	}

	private Thf_or_formulaContext thf_or_formula(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Thf_or_formulaContext _localctx = new Thf_or_formulaContext(Context, _parentState);
		Thf_or_formulaContext _prevctx = _localctx;
		int _startState = 36;
		EnterRecursionRule(_localctx, 36, RULE_thf_or_formula, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 532; thf_unitary_formula();
			State = 533; Match(Or);
			State = 534; thf_unitary_formula();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 541;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Thf_or_formulaContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_thf_or_formula);
					State = 536;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 537; Match(Or);
					State = 538; thf_unitary_formula();
					}
					} 
				}
				State = 543;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Thf_and_formulaContext : ParserRuleContext {
		public Thf_unitary_formulaContext[] thf_unitary_formula() {
			return GetRuleContexts<Thf_unitary_formulaContext>();
		}
		public Thf_unitary_formulaContext thf_unitary_formula(int i) {
			return GetRuleContext<Thf_unitary_formulaContext>(i);
		}
		public ITerminalNode And() { return GetToken(tptp_v7_0_0_0Parser.And, 0); }
		public Thf_and_formulaContext thf_and_formula() {
			return GetRuleContext<Thf_and_formulaContext>(0);
		}
		public Thf_and_formulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thf_and_formula; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterThf_and_formula(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitThf_and_formula(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThf_and_formula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Thf_and_formulaContext thf_and_formula() {
		return thf_and_formula(0);
	}

	private Thf_and_formulaContext thf_and_formula(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Thf_and_formulaContext _localctx = new Thf_and_formulaContext(Context, _parentState);
		Thf_and_formulaContext _prevctx = _localctx;
		int _startState = 38;
		EnterRecursionRule(_localctx, 38, RULE_thf_and_formula, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 545; thf_unitary_formula();
			State = 546; Match(And);
			State = 547; thf_unitary_formula();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 554;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Thf_and_formulaContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_thf_and_formula);
					State = 549;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 550; Match(And);
					State = 551; thf_unitary_formula();
					}
					} 
				}
				State = 556;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Thf_apply_formulaContext : ParserRuleContext {
		public Thf_unitary_formulaContext[] thf_unitary_formula() {
			return GetRuleContexts<Thf_unitary_formulaContext>();
		}
		public Thf_unitary_formulaContext thf_unitary_formula(int i) {
			return GetRuleContext<Thf_unitary_formulaContext>(i);
		}
		public ITerminalNode App() { return GetToken(tptp_v7_0_0_0Parser.App, 0); }
		public Thf_apply_formulaContext thf_apply_formula() {
			return GetRuleContext<Thf_apply_formulaContext>(0);
		}
		public Thf_apply_formulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thf_apply_formula; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterThf_apply_formula(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitThf_apply_formula(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThf_apply_formula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Thf_apply_formulaContext thf_apply_formula() {
		return thf_apply_formula(0);
	}

	private Thf_apply_formulaContext thf_apply_formula(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Thf_apply_formulaContext _localctx = new Thf_apply_formulaContext(Context, _parentState);
		Thf_apply_formulaContext _prevctx = _localctx;
		int _startState = 40;
		EnterRecursionRule(_localctx, 40, RULE_thf_apply_formula, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 558; thf_unitary_formula();
			State = 559; Match(App);
			State = 560; thf_unitary_formula();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 567;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Thf_apply_formulaContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_thf_apply_formula);
					State = 562;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 563; Match(App);
					State = 564; thf_unitary_formula();
					}
					} 
				}
				State = 569;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Thf_unitary_formulaContext : ParserRuleContext {
		public Thf_quantified_formulaContext thf_quantified_formula() {
			return GetRuleContext<Thf_quantified_formulaContext>(0);
		}
		public Thf_unary_formulaContext thf_unary_formula() {
			return GetRuleContext<Thf_unary_formulaContext>(0);
		}
		public Thf_atomContext thf_atom() {
			return GetRuleContext<Thf_atomContext>(0);
		}
		public Thf_conditionalContext thf_conditional() {
			return GetRuleContext<Thf_conditionalContext>(0);
		}
		public Thf_letContext thf_let() {
			return GetRuleContext<Thf_letContext>(0);
		}
		public Thf_tupleContext thf_tuple() {
			return GetRuleContext<Thf_tupleContext>(0);
		}
		public Thf_logic_formulaContext thf_logic_formula() {
			return GetRuleContext<Thf_logic_formulaContext>(0);
		}
		public Thf_unitary_formulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thf_unitary_formula; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterThf_unitary_formula(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitThf_unitary_formula(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThf_unitary_formula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Thf_unitary_formulaContext thf_unitary_formula() {
		Thf_unitary_formulaContext _localctx = new Thf_unitary_formulaContext(Context, State);
		EnterRule(_localctx, 42, RULE_thf_unitary_formula);
		try {
			State = 580;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 570; thf_quantified_formula();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 571; thf_unary_formula();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 572; thf_atom();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 573; thf_conditional();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 574; thf_let();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 575; thf_tuple();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 576; Match(T__9);
				State = 577; thf_logic_formula();
				State = 578; Match(T__10);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Thf_quantified_formulaContext : ParserRuleContext {
		public Thf_quantificationContext thf_quantification() {
			return GetRuleContext<Thf_quantificationContext>(0);
		}
		public Thf_unitary_formulaContext thf_unitary_formula() {
			return GetRuleContext<Thf_unitary_formulaContext>(0);
		}
		public Thf_quantified_formulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thf_quantified_formula; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterThf_quantified_formula(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitThf_quantified_formula(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThf_quantified_formula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Thf_quantified_formulaContext thf_quantified_formula() {
		Thf_quantified_formulaContext _localctx = new Thf_quantified_formulaContext(Context, State);
		EnterRule(_localctx, 44, RULE_thf_quantified_formula);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 582; thf_quantification();
			State = 583; thf_unitary_formula();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Thf_quantificationContext : ParserRuleContext {
		public Thf_quantifierContext thf_quantifier() {
			return GetRuleContext<Thf_quantifierContext>(0);
		}
		public Thf_variableContext[] thf_variable() {
			return GetRuleContexts<Thf_variableContext>();
		}
		public Thf_variableContext thf_variable(int i) {
			return GetRuleContext<Thf_variableContext>(i);
		}
		public Thf_quantificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thf_quantification; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterThf_quantification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitThf_quantification(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThf_quantification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Thf_quantificationContext thf_quantification() {
		Thf_quantificationContext _localctx = new Thf_quantificationContext(Context, State);
		EnterRule(_localctx, 46, RULE_thf_quantification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 585; thf_quantifier();
			State = 586; Match(T__11);
			State = 587; thf_variable();
			State = 592;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 588; Match(T__1);
				State = 589; thf_variable();
				}
				}
				State = 594;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 595; Match(T__12);
			State = 596; Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Thf_variableContext : ParserRuleContext {
		public Thf_typed_variableContext thf_typed_variable() {
			return GetRuleContext<Thf_typed_variableContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public Thf_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thf_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterThf_variable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitThf_variable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThf_variable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Thf_variableContext thf_variable() {
		Thf_variableContext _localctx = new Thf_variableContext(Context, State);
		EnterRule(_localctx, 48, RULE_thf_variable);
		try {
			State = 600;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 598; thf_typed_variable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 599; variable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Thf_typed_variableContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public Thf_top_level_typeContext thf_top_level_type() {
			return GetRuleContext<Thf_top_level_typeContext>(0);
		}
		public Thf_typed_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thf_typed_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterThf_typed_variable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitThf_typed_variable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThf_typed_variable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Thf_typed_variableContext thf_typed_variable() {
		Thf_typed_variableContext _localctx = new Thf_typed_variableContext(Context, State);
		EnterRule(_localctx, 50, RULE_thf_typed_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 602; variable();
			State = 603; Match(T__13);
			State = 604; thf_top_level_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Thf_unary_formulaContext : ParserRuleContext {
		public Thf_unary_connectiveContext thf_unary_connective() {
			return GetRuleContext<Thf_unary_connectiveContext>(0);
		}
		public Thf_logic_formulaContext thf_logic_formula() {
			return GetRuleContext<Thf_logic_formulaContext>(0);
		}
		public Thf_unary_formulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thf_unary_formula; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterThf_unary_formula(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitThf_unary_formula(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThf_unary_formula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Thf_unary_formulaContext thf_unary_formula() {
		Thf_unary_formulaContext _localctx = new Thf_unary_formulaContext(Context, State);
		EnterRule(_localctx, 52, RULE_thf_unary_formula);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 606; thf_unary_connective();
			State = 607; Match(T__9);
			State = 608; thf_logic_formula();
			State = 609; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Thf_atomContext : ParserRuleContext {
		public Thf_functionContext thf_function() {
			return GetRuleContext<Thf_functionContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public Defined_termContext defined_term() {
			return GetRuleContext<Defined_termContext>(0);
		}
		public Thf_conn_termContext thf_conn_term() {
			return GetRuleContext<Thf_conn_termContext>(0);
		}
		public Thf_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thf_atom; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterThf_atom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitThf_atom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThf_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Thf_atomContext thf_atom() {
		Thf_atomContext _localctx = new Thf_atomContext(Context, State);
		EnterRule(_localctx, 54, RULE_thf_atom);
		try {
			State = 615;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Dollar_word:
			case Dollar_dollar_word:
			case Lower_word:
			case Single_quoted:
				EnterOuterAlt(_localctx, 1);
				{
				State = 611; thf_function();
				}
				break;
			case Upper_word:
				EnterOuterAlt(_localctx, 2);
				{
				State = 612; variable();
				}
				break;
			case Real:
			case Rational:
			case Integer:
			case Distinct_object:
				EnterOuterAlt(_localctx, 3);
				{
				State = 613; defined_term();
				}
				break;
			case Or:
			case And:
			case Iff:
			case Impl:
			case If:
			case Niff:
			case Nor:
			case Nand:
			case Not:
			case ForallComb:
			case Infix_inequality:
			case Infix_equality:
			case ExistsComb:
			case ChoiceComb:
			case DescriptionComb:
			case EqComb:
			case Assignment:
				EnterOuterAlt(_localctx, 4);
				{
				State = 614; thf_conn_term();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Thf_functionContext : ParserRuleContext {
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public FunctorContext functor() {
			return GetRuleContext<FunctorContext>(0);
		}
		public Thf_argumentsContext thf_arguments() {
			return GetRuleContext<Thf_argumentsContext>(0);
		}
		public Defined_functorContext defined_functor() {
			return GetRuleContext<Defined_functorContext>(0);
		}
		public System_functorContext system_functor() {
			return GetRuleContext<System_functorContext>(0);
		}
		public Thf_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thf_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterThf_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitThf_function(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThf_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Thf_functionContext thf_function() {
		Thf_functionContext _localctx = new Thf_functionContext(Context, State);
		EnterRule(_localctx, 56, RULE_thf_function);
		try {
			State = 633;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 617; atom();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 618; functor();
				State = 619; Match(T__9);
				State = 620; thf_arguments();
				State = 621; Match(T__10);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 623; defined_functor();
				State = 624; Match(T__9);
				State = 625; thf_arguments();
				State = 626; Match(T__10);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 628; system_functor();
				State = 629; Match(T__9);
				State = 630; thf_arguments();
				State = 631; Match(T__10);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Thf_conn_termContext : ParserRuleContext {
		public Thf_pair_connectiveContext thf_pair_connective() {
			return GetRuleContext<Thf_pair_connectiveContext>(0);
		}
		public Assoc_connectiveContext assoc_connective() {
			return GetRuleContext<Assoc_connectiveContext>(0);
		}
		public Thf_unary_connectiveContext thf_unary_connective() {
			return GetRuleContext<Thf_unary_connectiveContext>(0);
		}
		public Thf_conn_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thf_conn_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterThf_conn_term(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitThf_conn_term(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThf_conn_term(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Thf_conn_termContext thf_conn_term() {
		Thf_conn_termContext _localctx = new Thf_conn_termContext(Context, State);
		EnterRule(_localctx, 58, RULE_thf_conn_term);
		try {
			State = 638;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Iff:
			case Impl:
			case If:
			case Niff:
			case Nor:
			case Nand:
			case Infix_inequality:
			case Infix_equality:
			case Assignment:
				EnterOuterAlt(_localctx, 1);
				{
				State = 635; thf_pair_connective();
				}
				break;
			case Or:
			case And:
				EnterOuterAlt(_localctx, 2);
				{
				State = 636; assoc_connective();
				}
				break;
			case Not:
			case ForallComb:
			case ExistsComb:
			case ChoiceComb:
			case DescriptionComb:
			case EqComb:
				EnterOuterAlt(_localctx, 3);
				{
				State = 637; thf_unary_connective();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Thf_conditionalContext : ParserRuleContext {
		public Thf_logic_formulaContext[] thf_logic_formula() {
			return GetRuleContexts<Thf_logic_formulaContext>();
		}
		public Thf_logic_formulaContext thf_logic_formula(int i) {
			return GetRuleContext<Thf_logic_formulaContext>(i);
		}
		public Thf_conditionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thf_conditional; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterThf_conditional(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitThf_conditional(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThf_conditional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Thf_conditionalContext thf_conditional() {
		Thf_conditionalContext _localctx = new Thf_conditionalContext(Context, State);
		EnterRule(_localctx, 60, RULE_thf_conditional);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 640; Match(T__14);
			State = 641; thf_logic_formula();
			State = 642; Match(T__1);
			State = 643; thf_logic_formula();
			State = 644; Match(T__1);
			State = 645; thf_logic_formula();
			State = 646; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Thf_letContext : ParserRuleContext {
		public Thf_unitary_formulaContext thf_unitary_formula() {
			return GetRuleContext<Thf_unitary_formulaContext>(0);
		}
		public Thf_formulaContext thf_formula() {
			return GetRuleContext<Thf_formulaContext>(0);
		}
		public Thf_letContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thf_let; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterThf_let(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitThf_let(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThf_let(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Thf_letContext thf_let() {
		Thf_letContext _localctx = new Thf_letContext(Context, State);
		EnterRule(_localctx, 62, RULE_thf_let);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 648; Match(T__15);
			State = 649; thf_unitary_formula();
			State = 650; Match(T__1);
			State = 651; thf_formula();
			State = 652; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Thf_argumentsContext : ParserRuleContext {
		public Thf_formula_listContext thf_formula_list() {
			return GetRuleContext<Thf_formula_listContext>(0);
		}
		public Thf_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thf_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterThf_arguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitThf_arguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThf_arguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Thf_argumentsContext thf_arguments() {
		Thf_argumentsContext _localctx = new Thf_argumentsContext(Context, State);
		EnterRule(_localctx, 64, RULE_thf_arguments);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 654; thf_formula_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Thf_type_formulaContext : ParserRuleContext {
		public Thf_typeable_formulaContext thf_typeable_formula() {
			return GetRuleContext<Thf_typeable_formulaContext>(0);
		}
		public Thf_top_level_typeContext thf_top_level_type() {
			return GetRuleContext<Thf_top_level_typeContext>(0);
		}
		public Thf_type_formulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thf_type_formula; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterThf_type_formula(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitThf_type_formula(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThf_type_formula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Thf_type_formulaContext thf_type_formula() {
		Thf_type_formulaContext _localctx = new Thf_type_formulaContext(Context, State);
		EnterRule(_localctx, 66, RULE_thf_type_formula);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 656; thf_typeable_formula();
			State = 657; Match(T__13);
			State = 658; thf_top_level_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Thf_typeable_formulaContext : ParserRuleContext {
		public Thf_atomContext thf_atom() {
			return GetRuleContext<Thf_atomContext>(0);
		}
		public Thf_logic_formulaContext thf_logic_formula() {
			return GetRuleContext<Thf_logic_formulaContext>(0);
		}
		public Thf_typeable_formulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thf_typeable_formula; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterThf_typeable_formula(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitThf_typeable_formula(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThf_typeable_formula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Thf_typeable_formulaContext thf_typeable_formula() {
		Thf_typeable_formulaContext _localctx = new Thf_typeable_formulaContext(Context, State);
		EnterRule(_localctx, 68, RULE_thf_typeable_formula);
		try {
			State = 665;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Or:
			case And:
			case Iff:
			case Impl:
			case If:
			case Niff:
			case Nor:
			case Nand:
			case Not:
			case ForallComb:
			case Infix_inequality:
			case Infix_equality:
			case ExistsComb:
			case ChoiceComb:
			case DescriptionComb:
			case EqComb:
			case Assignment:
			case Real:
			case Rational:
			case Integer:
			case Dollar_word:
			case Dollar_dollar_word:
			case Upper_word:
			case Lower_word:
			case Single_quoted:
			case Distinct_object:
				EnterOuterAlt(_localctx, 1);
				{
				State = 660; thf_atom();
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 2);
				{
				State = 661; Match(T__9);
				State = 662; thf_logic_formula();
				State = 663; Match(T__10);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Thf_subtypeContext : ParserRuleContext {
		public Thf_atomContext[] thf_atom() {
			return GetRuleContexts<Thf_atomContext>();
		}
		public Thf_atomContext thf_atom(int i) {
			return GetRuleContext<Thf_atomContext>(i);
		}
		public ITerminalNode Subtype_sign() { return GetToken(tptp_v7_0_0_0Parser.Subtype_sign, 0); }
		public Thf_subtypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thf_subtype; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterThf_subtype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitThf_subtype(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThf_subtype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Thf_subtypeContext thf_subtype() {
		Thf_subtypeContext _localctx = new Thf_subtypeContext(Context, State);
		EnterRule(_localctx, 70, RULE_thf_subtype);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 667; thf_atom();
			State = 668; Match(Subtype_sign);
			State = 669; thf_atom();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Thf_top_level_typeContext : ParserRuleContext {
		public Thf_unitary_typeContext thf_unitary_type() {
			return GetRuleContext<Thf_unitary_typeContext>(0);
		}
		public Thf_mapping_typeContext thf_mapping_type() {
			return GetRuleContext<Thf_mapping_typeContext>(0);
		}
		public Thf_apply_typeContext thf_apply_type() {
			return GetRuleContext<Thf_apply_typeContext>(0);
		}
		public Thf_top_level_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thf_top_level_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterThf_top_level_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitThf_top_level_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThf_top_level_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Thf_top_level_typeContext thf_top_level_type() {
		Thf_top_level_typeContext _localctx = new Thf_top_level_typeContext(Context, State);
		EnterRule(_localctx, 72, RULE_thf_top_level_type);
		try {
			State = 674;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 671; thf_unitary_type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 672; thf_mapping_type();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 673; thf_apply_type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Thf_unitary_typeContext : ParserRuleContext {
		public Thf_unitary_formulaContext thf_unitary_formula() {
			return GetRuleContext<Thf_unitary_formulaContext>(0);
		}
		public Thf_unitary_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thf_unitary_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterThf_unitary_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitThf_unitary_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThf_unitary_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Thf_unitary_typeContext thf_unitary_type() {
		Thf_unitary_typeContext _localctx = new Thf_unitary_typeContext(Context, State);
		EnterRule(_localctx, 74, RULE_thf_unitary_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 676; thf_unitary_formula();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Thf_apply_typeContext : ParserRuleContext {
		public Thf_apply_formulaContext thf_apply_formula() {
			return GetRuleContext<Thf_apply_formulaContext>(0);
		}
		public Thf_apply_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thf_apply_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterThf_apply_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitThf_apply_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThf_apply_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Thf_apply_typeContext thf_apply_type() {
		Thf_apply_typeContext _localctx = new Thf_apply_typeContext(Context, State);
		EnterRule(_localctx, 76, RULE_thf_apply_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 678; thf_apply_formula(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Thf_binary_typeContext : ParserRuleContext {
		public Thf_mapping_typeContext thf_mapping_type() {
			return GetRuleContext<Thf_mapping_typeContext>(0);
		}
		public Thf_xprod_typeContext thf_xprod_type() {
			return GetRuleContext<Thf_xprod_typeContext>(0);
		}
		public Thf_union_typeContext thf_union_type() {
			return GetRuleContext<Thf_union_typeContext>(0);
		}
		public Thf_binary_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thf_binary_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterThf_binary_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitThf_binary_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThf_binary_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Thf_binary_typeContext thf_binary_type() {
		Thf_binary_typeContext _localctx = new Thf_binary_typeContext(Context, State);
		EnterRule(_localctx, 78, RULE_thf_binary_type);
		try {
			State = 683;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 680; thf_mapping_type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 681; thf_xprod_type(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 682; thf_union_type(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Thf_mapping_typeContext : ParserRuleContext {
		public Thf_unitary_typeContext[] thf_unitary_type() {
			return GetRuleContexts<Thf_unitary_typeContext>();
		}
		public Thf_unitary_typeContext thf_unitary_type(int i) {
			return GetRuleContext<Thf_unitary_typeContext>(i);
		}
		public ITerminalNode Arrow() { return GetToken(tptp_v7_0_0_0Parser.Arrow, 0); }
		public Thf_mapping_typeContext thf_mapping_type() {
			return GetRuleContext<Thf_mapping_typeContext>(0);
		}
		public Thf_mapping_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thf_mapping_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterThf_mapping_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitThf_mapping_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThf_mapping_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Thf_mapping_typeContext thf_mapping_type() {
		Thf_mapping_typeContext _localctx = new Thf_mapping_typeContext(Context, State);
		EnterRule(_localctx, 80, RULE_thf_mapping_type);
		try {
			State = 693;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 685; thf_unitary_type();
				State = 686; Match(Arrow);
				State = 687; thf_unitary_type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 689; thf_unitary_type();
				State = 690; Match(Arrow);
				State = 691; thf_mapping_type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Thf_xprod_typeContext : ParserRuleContext {
		public Thf_unitary_typeContext[] thf_unitary_type() {
			return GetRuleContexts<Thf_unitary_typeContext>();
		}
		public Thf_unitary_typeContext thf_unitary_type(int i) {
			return GetRuleContext<Thf_unitary_typeContext>(i);
		}
		public ITerminalNode Star() { return GetToken(tptp_v7_0_0_0Parser.Star, 0); }
		public Thf_xprod_typeContext thf_xprod_type() {
			return GetRuleContext<Thf_xprod_typeContext>(0);
		}
		public Thf_xprod_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thf_xprod_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterThf_xprod_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitThf_xprod_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThf_xprod_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Thf_xprod_typeContext thf_xprod_type() {
		return thf_xprod_type(0);
	}

	private Thf_xprod_typeContext thf_xprod_type(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Thf_xprod_typeContext _localctx = new Thf_xprod_typeContext(Context, _parentState);
		Thf_xprod_typeContext _prevctx = _localctx;
		int _startState = 82;
		EnterRecursionRule(_localctx, 82, RULE_thf_xprod_type, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 696; thf_unitary_type();
			State = 697; Match(Star);
			State = 698; thf_unitary_type();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 705;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Thf_xprod_typeContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_thf_xprod_type);
					State = 700;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 701; Match(Star);
					State = 702; thf_unitary_type();
					}
					} 
				}
				State = 707;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Thf_union_typeContext : ParserRuleContext {
		public Thf_unitary_typeContext[] thf_unitary_type() {
			return GetRuleContexts<Thf_unitary_typeContext>();
		}
		public Thf_unitary_typeContext thf_unitary_type(int i) {
			return GetRuleContext<Thf_unitary_typeContext>(i);
		}
		public ITerminalNode Plus() { return GetToken(tptp_v7_0_0_0Parser.Plus, 0); }
		public Thf_union_typeContext thf_union_type() {
			return GetRuleContext<Thf_union_typeContext>(0);
		}
		public Thf_union_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thf_union_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterThf_union_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitThf_union_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThf_union_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Thf_union_typeContext thf_union_type() {
		return thf_union_type(0);
	}

	private Thf_union_typeContext thf_union_type(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Thf_union_typeContext _localctx = new Thf_union_typeContext(Context, _parentState);
		Thf_union_typeContext _prevctx = _localctx;
		int _startState = 84;
		EnterRecursionRule(_localctx, 84, RULE_thf_union_type, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 709; thf_unitary_type();
			State = 710; Match(Plus);
			State = 711; thf_unitary_type();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 718;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Thf_union_typeContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_thf_union_type);
					State = 713;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 714; Match(Plus);
					State = 715; thf_unitary_type();
					}
					} 
				}
				State = 720;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Thf_sequentContext : ParserRuleContext {
		public Thf_tupleContext[] thf_tuple() {
			return GetRuleContexts<Thf_tupleContext>();
		}
		public Thf_tupleContext thf_tuple(int i) {
			return GetRuleContext<Thf_tupleContext>(i);
		}
		public ITerminalNode Gentzen_arrow() { return GetToken(tptp_v7_0_0_0Parser.Gentzen_arrow, 0); }
		public Thf_sequentContext thf_sequent() {
			return GetRuleContext<Thf_sequentContext>(0);
		}
		public Thf_sequentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thf_sequent; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterThf_sequent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitThf_sequent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThf_sequent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Thf_sequentContext thf_sequent() {
		Thf_sequentContext _localctx = new Thf_sequentContext(Context, State);
		EnterRule(_localctx, 86, RULE_thf_sequent);
		try {
			State = 729;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__11:
			case T__16:
			case T__17:
			case T__18:
				EnterOuterAlt(_localctx, 1);
				{
				State = 721; thf_tuple();
				State = 722; Match(Gentzen_arrow);
				State = 723; thf_tuple();
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 2);
				{
				State = 725; Match(T__9);
				State = 726; thf_sequent();
				State = 727; Match(T__10);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Thf_tupleContext : ParserRuleContext {
		public Thf_formula_listContext thf_formula_list() {
			return GetRuleContext<Thf_formula_listContext>(0);
		}
		public Thf_tupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thf_tuple; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterThf_tuple(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitThf_tuple(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThf_tuple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Thf_tupleContext thf_tuple() {
		Thf_tupleContext _localctx = new Thf_tupleContext(Context, State);
		EnterRule(_localctx, 88, RULE_thf_tuple);
		try {
			State = 741;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__16:
				EnterOuterAlt(_localctx, 1);
				{
				State = 731; Match(T__16);
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 2);
				{
				State = 732; Match(T__11);
				State = 733; thf_formula_list();
				State = 734; Match(T__12);
				}
				break;
			case T__17:
				EnterOuterAlt(_localctx, 3);
				{
				State = 736; Match(T__17);
				}
				break;
			case T__18:
				EnterOuterAlt(_localctx, 4);
				{
				State = 737; Match(T__18);
				State = 738; thf_formula_list();
				State = 739; Match(T__19);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Thf_formula_listContext : ParserRuleContext {
		public Thf_logic_formulaContext[] thf_logic_formula() {
			return GetRuleContexts<Thf_logic_formulaContext>();
		}
		public Thf_logic_formulaContext thf_logic_formula(int i) {
			return GetRuleContext<Thf_logic_formulaContext>(i);
		}
		public Thf_formula_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thf_formula_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterThf_formula_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitThf_formula_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThf_formula_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Thf_formula_listContext thf_formula_list() {
		Thf_formula_listContext _localctx = new Thf_formula_listContext(Context, State);
		EnterRule(_localctx, 90, RULE_thf_formula_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 743; thf_logic_formula();
			State = 748;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 744; Match(T__1);
				State = 745; thf_logic_formula();
				}
				}
				State = 750;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tfx_formulaContext : ParserRuleContext {
		public Tfx_logic_formulaContext tfx_logic_formula() {
			return GetRuleContext<Tfx_logic_formulaContext>(0);
		}
		public Thf_sequentContext thf_sequent() {
			return GetRuleContext<Thf_sequentContext>(0);
		}
		public Tfx_formulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tfx_formula; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTfx_formula(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTfx_formula(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTfx_formula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tfx_formulaContext tfx_formula() {
		Tfx_formulaContext _localctx = new Tfx_formulaContext(Context, State);
		EnterRule(_localctx, 92, RULE_tfx_formula);
		try {
			State = 753;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 751; tfx_logic_formula();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 752; thf_sequent();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tfx_logic_formulaContext : ParserRuleContext {
		public Thf_logic_formulaContext thf_logic_formula() {
			return GetRuleContext<Thf_logic_formulaContext>(0);
		}
		public Tfx_logic_formulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tfx_logic_formula; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTfx_logic_formula(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTfx_logic_formula(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTfx_logic_formula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tfx_logic_formulaContext tfx_logic_formula() {
		Tfx_logic_formulaContext _localctx = new Tfx_logic_formulaContext(Context, State);
		EnterRule(_localctx, 94, RULE_tfx_logic_formula);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 755; thf_logic_formula();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tff_formulaContext : ParserRuleContext {
		public Tff_logic_formulaContext tff_logic_formula() {
			return GetRuleContext<Tff_logic_formulaContext>(0);
		}
		public Tff_typed_atomContext tff_typed_atom() {
			return GetRuleContext<Tff_typed_atomContext>(0);
		}
		public Tff_sequentContext tff_sequent() {
			return GetRuleContext<Tff_sequentContext>(0);
		}
		public Tff_formulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tff_formula; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTff_formula(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTff_formula(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTff_formula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tff_formulaContext tff_formula() {
		Tff_formulaContext _localctx = new Tff_formulaContext(Context, State);
		EnterRule(_localctx, 96, RULE_tff_formula);
		try {
			State = 760;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 757; tff_logic_formula();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 758; tff_typed_atom();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 759; tff_sequent();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tff_logic_formulaContext : ParserRuleContext {
		public Tff_binary_formulaContext tff_binary_formula() {
			return GetRuleContext<Tff_binary_formulaContext>(0);
		}
		public Tff_unitary_formulaContext tff_unitary_formula() {
			return GetRuleContext<Tff_unitary_formulaContext>(0);
		}
		public Tff_subtypeContext tff_subtype() {
			return GetRuleContext<Tff_subtypeContext>(0);
		}
		public Tff_logic_formulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tff_logic_formula; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTff_logic_formula(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTff_logic_formula(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTff_logic_formula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tff_logic_formulaContext tff_logic_formula() {
		Tff_logic_formulaContext _localctx = new Tff_logic_formulaContext(Context, State);
		EnterRule(_localctx, 98, RULE_tff_logic_formula);
		try {
			State = 765;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 762; tff_binary_formula();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 763; tff_unitary_formula();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 764; tff_subtype();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tff_binary_formulaContext : ParserRuleContext {
		public Tff_binary_nonassocContext tff_binary_nonassoc() {
			return GetRuleContext<Tff_binary_nonassocContext>(0);
		}
		public Tff_binary_assocContext tff_binary_assoc() {
			return GetRuleContext<Tff_binary_assocContext>(0);
		}
		public Tff_binary_formulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tff_binary_formula; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTff_binary_formula(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTff_binary_formula(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTff_binary_formula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tff_binary_formulaContext tff_binary_formula() {
		Tff_binary_formulaContext _localctx = new Tff_binary_formulaContext(Context, State);
		EnterRule(_localctx, 100, RULE_tff_binary_formula);
		try {
			State = 769;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 767; tff_binary_nonassoc();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 768; tff_binary_assoc();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tff_binary_nonassocContext : ParserRuleContext {
		public Tff_unitary_formulaContext[] tff_unitary_formula() {
			return GetRuleContexts<Tff_unitary_formulaContext>();
		}
		public Tff_unitary_formulaContext tff_unitary_formula(int i) {
			return GetRuleContext<Tff_unitary_formulaContext>(i);
		}
		public Binary_connectiveContext binary_connective() {
			return GetRuleContext<Binary_connectiveContext>(0);
		}
		public Tff_binary_nonassocContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tff_binary_nonassoc; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTff_binary_nonassoc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTff_binary_nonassoc(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTff_binary_nonassoc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tff_binary_nonassocContext tff_binary_nonassoc() {
		Tff_binary_nonassocContext _localctx = new Tff_binary_nonassocContext(Context, State);
		EnterRule(_localctx, 102, RULE_tff_binary_nonassoc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 771; tff_unitary_formula();
			State = 772; binary_connective();
			State = 773; tff_unitary_formula();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tff_binary_assocContext : ParserRuleContext {
		public Tff_or_formulaContext tff_or_formula() {
			return GetRuleContext<Tff_or_formulaContext>(0);
		}
		public Tff_and_formulaContext tff_and_formula() {
			return GetRuleContext<Tff_and_formulaContext>(0);
		}
		public Tff_binary_assocContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tff_binary_assoc; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTff_binary_assoc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTff_binary_assoc(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTff_binary_assoc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tff_binary_assocContext tff_binary_assoc() {
		Tff_binary_assocContext _localctx = new Tff_binary_assocContext(Context, State);
		EnterRule(_localctx, 104, RULE_tff_binary_assoc);
		try {
			State = 777;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 775; tff_or_formula(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 776; tff_and_formula(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tff_or_formulaContext : ParserRuleContext {
		public Tff_unitary_formulaContext[] tff_unitary_formula() {
			return GetRuleContexts<Tff_unitary_formulaContext>();
		}
		public Tff_unitary_formulaContext tff_unitary_formula(int i) {
			return GetRuleContext<Tff_unitary_formulaContext>(i);
		}
		public ITerminalNode Or() { return GetToken(tptp_v7_0_0_0Parser.Or, 0); }
		public Tff_or_formulaContext tff_or_formula() {
			return GetRuleContext<Tff_or_formulaContext>(0);
		}
		public Tff_or_formulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tff_or_formula; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTff_or_formula(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTff_or_formula(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTff_or_formula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tff_or_formulaContext tff_or_formula() {
		return tff_or_formula(0);
	}

	private Tff_or_formulaContext tff_or_formula(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Tff_or_formulaContext _localctx = new Tff_or_formulaContext(Context, _parentState);
		Tff_or_formulaContext _prevctx = _localctx;
		int _startState = 106;
		EnterRecursionRule(_localctx, 106, RULE_tff_or_formula, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 780; tff_unitary_formula();
			State = 781; Match(Or);
			State = 782; tff_unitary_formula();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 789;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Tff_or_formulaContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_tff_or_formula);
					State = 784;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 785; Match(Or);
					State = 786; tff_unitary_formula();
					}
					} 
				}
				State = 791;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Tff_and_formulaContext : ParserRuleContext {
		public Tff_unitary_formulaContext[] tff_unitary_formula() {
			return GetRuleContexts<Tff_unitary_formulaContext>();
		}
		public Tff_unitary_formulaContext tff_unitary_formula(int i) {
			return GetRuleContext<Tff_unitary_formulaContext>(i);
		}
		public ITerminalNode And() { return GetToken(tptp_v7_0_0_0Parser.And, 0); }
		public Tff_and_formulaContext tff_and_formula() {
			return GetRuleContext<Tff_and_formulaContext>(0);
		}
		public Tff_and_formulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tff_and_formula; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTff_and_formula(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTff_and_formula(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTff_and_formula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tff_and_formulaContext tff_and_formula() {
		return tff_and_formula(0);
	}

	private Tff_and_formulaContext tff_and_formula(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Tff_and_formulaContext _localctx = new Tff_and_formulaContext(Context, _parentState);
		Tff_and_formulaContext _prevctx = _localctx;
		int _startState = 108;
		EnterRecursionRule(_localctx, 108, RULE_tff_and_formula, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 793; tff_unitary_formula();
			State = 794; Match(And);
			State = 795; tff_unitary_formula();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 802;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Tff_and_formulaContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_tff_and_formula);
					State = 797;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 798; Match(And);
					State = 799; tff_unitary_formula();
					}
					} 
				}
				State = 804;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Tff_unitary_formulaContext : ParserRuleContext {
		public Tff_quantified_formulaContext tff_quantified_formula() {
			return GetRuleContext<Tff_quantified_formulaContext>(0);
		}
		public Tff_unary_formulaContext tff_unary_formula() {
			return GetRuleContext<Tff_unary_formulaContext>(0);
		}
		public Tff_atomic_formulaContext tff_atomic_formula() {
			return GetRuleContext<Tff_atomic_formulaContext>(0);
		}
		public Tff_conditionalContext tff_conditional() {
			return GetRuleContext<Tff_conditionalContext>(0);
		}
		public Tff_letContext tff_let() {
			return GetRuleContext<Tff_letContext>(0);
		}
		public Tff_logic_formulaContext tff_logic_formula() {
			return GetRuleContext<Tff_logic_formulaContext>(0);
		}
		public Tff_unitary_formulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tff_unitary_formula; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTff_unitary_formula(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTff_unitary_formula(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTff_unitary_formula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tff_unitary_formulaContext tff_unitary_formula() {
		Tff_unitary_formulaContext _localctx = new Tff_unitary_formulaContext(Context, State);
		EnterRule(_localctx, 110, RULE_tff_unitary_formula);
		try {
			State = 814;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 805; tff_quantified_formula();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 806; tff_unary_formula();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 807; tff_atomic_formula();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 808; tff_conditional();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 809; tff_let();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 810; Match(T__9);
				State = 811; tff_logic_formula();
				State = 812; Match(T__10);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tff_quantified_formulaContext : ParserRuleContext {
		public Fof_quantifierContext fof_quantifier() {
			return GetRuleContext<Fof_quantifierContext>(0);
		}
		public Tff_variable_listContext tff_variable_list() {
			return GetRuleContext<Tff_variable_listContext>(0);
		}
		public Tff_unitary_formulaContext tff_unitary_formula() {
			return GetRuleContext<Tff_unitary_formulaContext>(0);
		}
		public Tff_quantified_formulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tff_quantified_formula; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTff_quantified_formula(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTff_quantified_formula(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTff_quantified_formula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tff_quantified_formulaContext tff_quantified_formula() {
		Tff_quantified_formulaContext _localctx = new Tff_quantified_formulaContext(Context, State);
		EnterRule(_localctx, 112, RULE_tff_quantified_formula);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 816; fof_quantifier();
			State = 817; Match(T__11);
			State = 818; tff_variable_list();
			State = 819; Match(T__12);
			State = 820; Match(T__13);
			State = 821; tff_unitary_formula();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tff_variable_listContext : ParserRuleContext {
		public Tff_variableContext[] tff_variable() {
			return GetRuleContexts<Tff_variableContext>();
		}
		public Tff_variableContext tff_variable(int i) {
			return GetRuleContext<Tff_variableContext>(i);
		}
		public Tff_variable_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tff_variable_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTff_variable_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTff_variable_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTff_variable_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tff_variable_listContext tff_variable_list() {
		Tff_variable_listContext _localctx = new Tff_variable_listContext(Context, State);
		EnterRule(_localctx, 114, RULE_tff_variable_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 823; tff_variable();
			State = 828;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 824; Match(T__1);
				State = 825; tff_variable();
				}
				}
				State = 830;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tff_variableContext : ParserRuleContext {
		public Tff_typed_variableContext tff_typed_variable() {
			return GetRuleContext<Tff_typed_variableContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public Tff_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tff_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTff_variable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTff_variable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTff_variable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tff_variableContext tff_variable() {
		Tff_variableContext _localctx = new Tff_variableContext(Context, State);
		EnterRule(_localctx, 116, RULE_tff_variable);
		try {
			State = 833;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 831; tff_typed_variable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 832; variable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tff_typed_variableContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public Tff_atomic_typeContext tff_atomic_type() {
			return GetRuleContext<Tff_atomic_typeContext>(0);
		}
		public Tff_typed_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tff_typed_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTff_typed_variable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTff_typed_variable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTff_typed_variable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tff_typed_variableContext tff_typed_variable() {
		Tff_typed_variableContext _localctx = new Tff_typed_variableContext(Context, State);
		EnterRule(_localctx, 118, RULE_tff_typed_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 835; variable();
			State = 836; Match(T__13);
			State = 837; tff_atomic_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tff_unary_formulaContext : ParserRuleContext {
		public Unary_connectiveContext unary_connective() {
			return GetRuleContext<Unary_connectiveContext>(0);
		}
		public Tff_unitary_formulaContext tff_unitary_formula() {
			return GetRuleContext<Tff_unitary_formulaContext>(0);
		}
		public Fof_infix_unaryContext fof_infix_unary() {
			return GetRuleContext<Fof_infix_unaryContext>(0);
		}
		public Tff_unary_formulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tff_unary_formula; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTff_unary_formula(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTff_unary_formula(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTff_unary_formula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tff_unary_formulaContext tff_unary_formula() {
		Tff_unary_formulaContext _localctx = new Tff_unary_formulaContext(Context, State);
		EnterRule(_localctx, 120, RULE_tff_unary_formula);
		try {
			State = 843;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Not:
				EnterOuterAlt(_localctx, 1);
				{
				State = 839; unary_connective();
				State = 840; tff_unitary_formula();
				}
				break;
			case T__17:
			case T__18:
			case T__23:
			case T__24:
			case T__25:
			case Real:
			case Rational:
			case Integer:
			case Dollar_word:
			case Dollar_dollar_word:
			case Upper_word:
			case Lower_word:
			case Single_quoted:
			case Distinct_object:
				EnterOuterAlt(_localctx, 2);
				{
				State = 842; fof_infix_unary();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tff_atomic_formulaContext : ParserRuleContext {
		public Fof_atomic_formulaContext fof_atomic_formula() {
			return GetRuleContext<Fof_atomic_formulaContext>(0);
		}
		public Tff_atomic_formulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tff_atomic_formula; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTff_atomic_formula(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTff_atomic_formula(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTff_atomic_formula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tff_atomic_formulaContext tff_atomic_formula() {
		Tff_atomic_formulaContext _localctx = new Tff_atomic_formulaContext(Context, State);
		EnterRule(_localctx, 122, RULE_tff_atomic_formula);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 845; fof_atomic_formula();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tff_conditionalContext : ParserRuleContext {
		public Tff_logic_formulaContext[] tff_logic_formula() {
			return GetRuleContexts<Tff_logic_formulaContext>();
		}
		public Tff_logic_formulaContext tff_logic_formula(int i) {
			return GetRuleContext<Tff_logic_formulaContext>(i);
		}
		public Tff_conditionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tff_conditional; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTff_conditional(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTff_conditional(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTff_conditional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tff_conditionalContext tff_conditional() {
		Tff_conditionalContext _localctx = new Tff_conditionalContext(Context, State);
		EnterRule(_localctx, 124, RULE_tff_conditional);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 847; Match(T__20);
			State = 848; tff_logic_formula();
			State = 849; Match(T__1);
			State = 850; tff_logic_formula();
			State = 851; Match(T__1);
			State = 852; tff_logic_formula();
			State = 853; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tff_letContext : ParserRuleContext {
		public Tff_let_term_defnsContext tff_let_term_defns() {
			return GetRuleContext<Tff_let_term_defnsContext>(0);
		}
		public Tff_formulaContext tff_formula() {
			return GetRuleContext<Tff_formulaContext>(0);
		}
		public Tff_let_formula_defnsContext tff_let_formula_defns() {
			return GetRuleContext<Tff_let_formula_defnsContext>(0);
		}
		public Tff_letContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tff_let; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTff_let(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTff_let(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTff_let(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tff_letContext tff_let() {
		Tff_letContext _localctx = new Tff_letContext(Context, State);
		EnterRule(_localctx, 126, RULE_tff_let);
		try {
			State = 867;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__21:
				EnterOuterAlt(_localctx, 1);
				{
				State = 855; Match(T__21);
				State = 856; tff_let_term_defns();
				State = 857; Match(T__1);
				State = 858; tff_formula();
				State = 859; Match(T__10);
				}
				break;
			case T__22:
				EnterOuterAlt(_localctx, 2);
				{
				State = 861; Match(T__22);
				State = 862; tff_let_formula_defns();
				State = 863; Match(T__1);
				State = 864; tff_formula();
				State = 865; Match(T__10);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tff_let_term_defnsContext : ParserRuleContext {
		public Tff_let_term_defnContext tff_let_term_defn() {
			return GetRuleContext<Tff_let_term_defnContext>(0);
		}
		public Tff_let_term_listContext tff_let_term_list() {
			return GetRuleContext<Tff_let_term_listContext>(0);
		}
		public Tff_let_term_defnsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tff_let_term_defns; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTff_let_term_defns(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTff_let_term_defns(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTff_let_term_defns(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tff_let_term_defnsContext tff_let_term_defns() {
		Tff_let_term_defnsContext _localctx = new Tff_let_term_defnsContext(Context, State);
		EnterRule(_localctx, 128, RULE_tff_let_term_defns);
		try {
			State = 874;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__9:
			case Forall:
			case Lower_word:
			case Single_quoted:
				EnterOuterAlt(_localctx, 1);
				{
				State = 869; tff_let_term_defn();
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 2);
				{
				State = 870; Match(T__11);
				State = 871; tff_let_term_list();
				State = 872; Match(T__12);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tff_let_term_listContext : ParserRuleContext {
		public Tff_let_term_defnContext[] tff_let_term_defn() {
			return GetRuleContexts<Tff_let_term_defnContext>();
		}
		public Tff_let_term_defnContext tff_let_term_defn(int i) {
			return GetRuleContext<Tff_let_term_defnContext>(i);
		}
		public Tff_let_term_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tff_let_term_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTff_let_term_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTff_let_term_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTff_let_term_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tff_let_term_listContext tff_let_term_list() {
		Tff_let_term_listContext _localctx = new Tff_let_term_listContext(Context, State);
		EnterRule(_localctx, 130, RULE_tff_let_term_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 876; tff_let_term_defn();
			State = 881;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 877; Match(T__1);
				State = 878; tff_let_term_defn();
				}
				}
				State = 883;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tff_let_term_defnContext : ParserRuleContext {
		public ITerminalNode Forall() { return GetToken(tptp_v7_0_0_0Parser.Forall, 0); }
		public Tff_variable_listContext tff_variable_list() {
			return GetRuleContext<Tff_variable_listContext>(0);
		}
		public Tff_let_term_defnContext tff_let_term_defn() {
			return GetRuleContext<Tff_let_term_defnContext>(0);
		}
		public Tff_let_term_bindingContext tff_let_term_binding() {
			return GetRuleContext<Tff_let_term_bindingContext>(0);
		}
		public Tff_let_term_defnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tff_let_term_defn; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTff_let_term_defn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTff_let_term_defn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTff_let_term_defn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tff_let_term_defnContext tff_let_term_defn() {
		Tff_let_term_defnContext _localctx = new Tff_let_term_defnContext(Context, State);
		EnterRule(_localctx, 132, RULE_tff_let_term_defn);
		try {
			State = 892;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Forall:
				EnterOuterAlt(_localctx, 1);
				{
				State = 884; Match(Forall);
				State = 885; Match(T__11);
				State = 886; tff_variable_list();
				State = 887; Match(T__12);
				State = 888; Match(T__13);
				State = 889; tff_let_term_defn();
				}
				break;
			case T__9:
			case Lower_word:
			case Single_quoted:
				EnterOuterAlt(_localctx, 2);
				{
				State = 891; tff_let_term_binding();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tff_let_term_bindingContext : ParserRuleContext {
		public Fof_plain_termContext fof_plain_term() {
			return GetRuleContext<Fof_plain_termContext>(0);
		}
		public ITerminalNode Infix_equality() { return GetToken(tptp_v7_0_0_0Parser.Infix_equality, 0); }
		public Fof_termContext fof_term() {
			return GetRuleContext<Fof_termContext>(0);
		}
		public Tff_let_term_bindingContext tff_let_term_binding() {
			return GetRuleContext<Tff_let_term_bindingContext>(0);
		}
		public Tff_let_term_bindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tff_let_term_binding; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTff_let_term_binding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTff_let_term_binding(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTff_let_term_binding(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tff_let_term_bindingContext tff_let_term_binding() {
		Tff_let_term_bindingContext _localctx = new Tff_let_term_bindingContext(Context, State);
		EnterRule(_localctx, 134, RULE_tff_let_term_binding);
		try {
			State = 902;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Lower_word:
			case Single_quoted:
				EnterOuterAlt(_localctx, 1);
				{
				State = 894; fof_plain_term();
				State = 895; Match(Infix_equality);
				State = 896; fof_term();
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 2);
				{
				State = 898; Match(T__9);
				State = 899; tff_let_term_binding();
				State = 900; Match(T__10);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tff_let_formula_defnsContext : ParserRuleContext {
		public Tff_let_formula_defnContext tff_let_formula_defn() {
			return GetRuleContext<Tff_let_formula_defnContext>(0);
		}
		public Tff_let_formula_listContext tff_let_formula_list() {
			return GetRuleContext<Tff_let_formula_listContext>(0);
		}
		public Tff_let_formula_defnsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tff_let_formula_defns; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTff_let_formula_defns(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTff_let_formula_defns(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTff_let_formula_defns(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tff_let_formula_defnsContext tff_let_formula_defns() {
		Tff_let_formula_defnsContext _localctx = new Tff_let_formula_defnsContext(Context, State);
		EnterRule(_localctx, 136, RULE_tff_let_formula_defns);
		try {
			State = 909;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__9:
			case Forall:
			case Lower_word:
			case Single_quoted:
				EnterOuterAlt(_localctx, 1);
				{
				State = 904; tff_let_formula_defn();
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 2);
				{
				State = 905; Match(T__11);
				State = 906; tff_let_formula_list();
				State = 907; Match(T__12);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tff_let_formula_listContext : ParserRuleContext {
		public Tff_let_formula_defnContext[] tff_let_formula_defn() {
			return GetRuleContexts<Tff_let_formula_defnContext>();
		}
		public Tff_let_formula_defnContext tff_let_formula_defn(int i) {
			return GetRuleContext<Tff_let_formula_defnContext>(i);
		}
		public Tff_let_formula_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tff_let_formula_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTff_let_formula_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTff_let_formula_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTff_let_formula_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tff_let_formula_listContext tff_let_formula_list() {
		Tff_let_formula_listContext _localctx = new Tff_let_formula_listContext(Context, State);
		EnterRule(_localctx, 138, RULE_tff_let_formula_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 911; tff_let_formula_defn();
			State = 916;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 912; Match(T__1);
				State = 913; tff_let_formula_defn();
				}
				}
				State = 918;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tff_let_formula_defnContext : ParserRuleContext {
		public ITerminalNode Forall() { return GetToken(tptp_v7_0_0_0Parser.Forall, 0); }
		public Tff_variable_listContext tff_variable_list() {
			return GetRuleContext<Tff_variable_listContext>(0);
		}
		public Tff_let_formula_defnContext tff_let_formula_defn() {
			return GetRuleContext<Tff_let_formula_defnContext>(0);
		}
		public Tff_let_formula_bindingContext tff_let_formula_binding() {
			return GetRuleContext<Tff_let_formula_bindingContext>(0);
		}
		public Tff_let_formula_defnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tff_let_formula_defn; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTff_let_formula_defn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTff_let_formula_defn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTff_let_formula_defn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tff_let_formula_defnContext tff_let_formula_defn() {
		Tff_let_formula_defnContext _localctx = new Tff_let_formula_defnContext(Context, State);
		EnterRule(_localctx, 140, RULE_tff_let_formula_defn);
		try {
			State = 927;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Forall:
				EnterOuterAlt(_localctx, 1);
				{
				State = 919; Match(Forall);
				State = 920; Match(T__11);
				State = 921; tff_variable_list();
				State = 922; Match(T__12);
				State = 923; Match(T__13);
				State = 924; tff_let_formula_defn();
				}
				break;
			case T__9:
			case Lower_word:
			case Single_quoted:
				EnterOuterAlt(_localctx, 2);
				{
				State = 926; tff_let_formula_binding();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tff_let_formula_bindingContext : ParserRuleContext {
		public Fof_plain_atomic_formulaContext fof_plain_atomic_formula() {
			return GetRuleContext<Fof_plain_atomic_formulaContext>(0);
		}
		public ITerminalNode Iff() { return GetToken(tptp_v7_0_0_0Parser.Iff, 0); }
		public Tff_unitary_formulaContext tff_unitary_formula() {
			return GetRuleContext<Tff_unitary_formulaContext>(0);
		}
		public Tff_let_formula_bindingContext tff_let_formula_binding() {
			return GetRuleContext<Tff_let_formula_bindingContext>(0);
		}
		public Tff_let_formula_bindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tff_let_formula_binding; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTff_let_formula_binding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTff_let_formula_binding(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTff_let_formula_binding(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tff_let_formula_bindingContext tff_let_formula_binding() {
		Tff_let_formula_bindingContext _localctx = new Tff_let_formula_bindingContext(Context, State);
		EnterRule(_localctx, 142, RULE_tff_let_formula_binding);
		try {
			State = 937;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Lower_word:
			case Single_quoted:
				EnterOuterAlt(_localctx, 1);
				{
				State = 929; fof_plain_atomic_formula();
				State = 930; Match(Iff);
				State = 931; tff_unitary_formula();
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 2);
				{
				State = 933; Match(T__9);
				State = 934; tff_let_formula_binding();
				State = 935; Match(T__10);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tff_sequentContext : ParserRuleContext {
		public Tff_formula_tupleContext[] tff_formula_tuple() {
			return GetRuleContexts<Tff_formula_tupleContext>();
		}
		public Tff_formula_tupleContext tff_formula_tuple(int i) {
			return GetRuleContext<Tff_formula_tupleContext>(i);
		}
		public ITerminalNode Gentzen_arrow() { return GetToken(tptp_v7_0_0_0Parser.Gentzen_arrow, 0); }
		public Tff_sequentContext tff_sequent() {
			return GetRuleContext<Tff_sequentContext>(0);
		}
		public Tff_sequentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tff_sequent; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTff_sequent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTff_sequent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTff_sequent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tff_sequentContext tff_sequent() {
		Tff_sequentContext _localctx = new Tff_sequentContext(Context, State);
		EnterRule(_localctx, 144, RULE_tff_sequent);
		try {
			State = 947;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__11:
			case T__16:
				EnterOuterAlt(_localctx, 1);
				{
				State = 939; tff_formula_tuple();
				State = 940; Match(Gentzen_arrow);
				State = 941; tff_formula_tuple();
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 2);
				{
				State = 943; Match(T__9);
				State = 944; tff_sequent();
				State = 945; Match(T__10);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tff_formula_tupleContext : ParserRuleContext {
		public Tff_formula_tuple_listContext tff_formula_tuple_list() {
			return GetRuleContext<Tff_formula_tuple_listContext>(0);
		}
		public Tff_formula_tupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tff_formula_tuple; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTff_formula_tuple(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTff_formula_tuple(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTff_formula_tuple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tff_formula_tupleContext tff_formula_tuple() {
		Tff_formula_tupleContext _localctx = new Tff_formula_tupleContext(Context, State);
		EnterRule(_localctx, 146, RULE_tff_formula_tuple);
		try {
			State = 954;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__16:
				EnterOuterAlt(_localctx, 1);
				{
				State = 949; Match(T__16);
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 2);
				{
				State = 950; Match(T__11);
				State = 951; tff_formula_tuple_list();
				State = 952; Match(T__12);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tff_formula_tuple_listContext : ParserRuleContext {
		public Tff_logic_formulaContext[] tff_logic_formula() {
			return GetRuleContexts<Tff_logic_formulaContext>();
		}
		public Tff_logic_formulaContext tff_logic_formula(int i) {
			return GetRuleContext<Tff_logic_formulaContext>(i);
		}
		public Tff_formula_tuple_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tff_formula_tuple_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTff_formula_tuple_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTff_formula_tuple_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTff_formula_tuple_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tff_formula_tuple_listContext tff_formula_tuple_list() {
		Tff_formula_tuple_listContext _localctx = new Tff_formula_tuple_listContext(Context, State);
		EnterRule(_localctx, 148, RULE_tff_formula_tuple_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 956; tff_logic_formula();
			State = 961;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 957; Match(T__1);
				State = 958; tff_logic_formula();
				}
				}
				State = 963;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tff_typed_atomContext : ParserRuleContext {
		public Untyped_atomContext untyped_atom() {
			return GetRuleContext<Untyped_atomContext>(0);
		}
		public Tff_top_level_typeContext tff_top_level_type() {
			return GetRuleContext<Tff_top_level_typeContext>(0);
		}
		public Tff_typed_atomContext tff_typed_atom() {
			return GetRuleContext<Tff_typed_atomContext>(0);
		}
		public Tff_typed_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tff_typed_atom; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTff_typed_atom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTff_typed_atom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTff_typed_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tff_typed_atomContext tff_typed_atom() {
		Tff_typed_atomContext _localctx = new Tff_typed_atomContext(Context, State);
		EnterRule(_localctx, 150, RULE_tff_typed_atom);
		try {
			State = 972;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Dollar_dollar_word:
			case Lower_word:
			case Single_quoted:
				EnterOuterAlt(_localctx, 1);
				{
				State = 964; untyped_atom();
				State = 965; Match(T__13);
				State = 966; tff_top_level_type();
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 2);
				{
				State = 968; Match(T__9);
				State = 969; tff_typed_atom();
				State = 970; Match(T__10);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tff_subtypeContext : ParserRuleContext {
		public Untyped_atomContext untyped_atom() {
			return GetRuleContext<Untyped_atomContext>(0);
		}
		public ITerminalNode Subtype_sign() { return GetToken(tptp_v7_0_0_0Parser.Subtype_sign, 0); }
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public Tff_subtypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tff_subtype; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTff_subtype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTff_subtype(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTff_subtype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tff_subtypeContext tff_subtype() {
		Tff_subtypeContext _localctx = new Tff_subtypeContext(Context, State);
		EnterRule(_localctx, 152, RULE_tff_subtype);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 974; untyped_atom();
			State = 975; Match(Subtype_sign);
			State = 976; atom();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tff_top_level_typeContext : ParserRuleContext {
		public Tff_atomic_typeContext tff_atomic_type() {
			return GetRuleContext<Tff_atomic_typeContext>(0);
		}
		public Tff_mapping_typeContext tff_mapping_type() {
			return GetRuleContext<Tff_mapping_typeContext>(0);
		}
		public Tf1_quantified_typeContext tf1_quantified_type() {
			return GetRuleContext<Tf1_quantified_typeContext>(0);
		}
		public Tff_top_level_typeContext tff_top_level_type() {
			return GetRuleContext<Tff_top_level_typeContext>(0);
		}
		public Tff_top_level_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tff_top_level_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTff_top_level_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTff_top_level_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTff_top_level_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tff_top_level_typeContext tff_top_level_type() {
		Tff_top_level_typeContext _localctx = new Tff_top_level_typeContext(Context, State);
		EnterRule(_localctx, 154, RULE_tff_top_level_type);
		try {
			State = 985;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 978; tff_atomic_type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 979; tff_mapping_type();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 980; tf1_quantified_type();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 981; Match(T__9);
				State = 982; tff_top_level_type();
				State = 983; Match(T__10);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tf1_quantified_typeContext : ParserRuleContext {
		public Tff_variable_listContext tff_variable_list() {
			return GetRuleContext<Tff_variable_listContext>(0);
		}
		public Tff_monotypeContext tff_monotype() {
			return GetRuleContext<Tff_monotypeContext>(0);
		}
		public Tf1_quantified_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tf1_quantified_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTf1_quantified_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTf1_quantified_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTf1_quantified_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tf1_quantified_typeContext tf1_quantified_type() {
		Tf1_quantified_typeContext _localctx = new Tf1_quantified_typeContext(Context, State);
		EnterRule(_localctx, 156, RULE_tf1_quantified_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 987; Match(TyForall);
			State = 988; Match(T__11);
			State = 989; tff_variable_list();
			State = 990; Match(T__12);
			State = 991; Match(T__13);
			State = 992; tff_monotype();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tff_monotypeContext : ParserRuleContext {
		public Tff_atomic_typeContext tff_atomic_type() {
			return GetRuleContext<Tff_atomic_typeContext>(0);
		}
		public Tff_mapping_typeContext tff_mapping_type() {
			return GetRuleContext<Tff_mapping_typeContext>(0);
		}
		public Tff_monotypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tff_monotype; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTff_monotype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTff_monotype(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTff_monotype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tff_monotypeContext tff_monotype() {
		Tff_monotypeContext _localctx = new Tff_monotypeContext(Context, State);
		EnterRule(_localctx, 158, RULE_tff_monotype);
		try {
			State = 999;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Dollar_word:
			case Upper_word:
			case Lower_word:
			case Single_quoted:
				EnterOuterAlt(_localctx, 1);
				{
				State = 994; tff_atomic_type();
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 2);
				{
				State = 995; Match(T__9);
				State = 996; tff_mapping_type();
				State = 997; Match(T__10);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tff_unitary_typeContext : ParserRuleContext {
		public Tff_atomic_typeContext tff_atomic_type() {
			return GetRuleContext<Tff_atomic_typeContext>(0);
		}
		public Tff_xprod_typeContext tff_xprod_type() {
			return GetRuleContext<Tff_xprod_typeContext>(0);
		}
		public Tff_unitary_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tff_unitary_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTff_unitary_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTff_unitary_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTff_unitary_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tff_unitary_typeContext tff_unitary_type() {
		Tff_unitary_typeContext _localctx = new Tff_unitary_typeContext(Context, State);
		EnterRule(_localctx, 160, RULE_tff_unitary_type);
		try {
			State = 1006;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Dollar_word:
			case Upper_word:
			case Lower_word:
			case Single_quoted:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1001; tff_atomic_type();
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1002; Match(T__9);
				State = 1003; tff_xprod_type(0);
				State = 1004; Match(T__10);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tff_atomic_typeContext : ParserRuleContext {
		public Type_constantContext type_constant() {
			return GetRuleContext<Type_constantContext>(0);
		}
		public Defined_typeContext defined_type() {
			return GetRuleContext<Defined_typeContext>(0);
		}
		public Type_functorContext type_functor() {
			return GetRuleContext<Type_functorContext>(0);
		}
		public Tff_type_argumentsContext tff_type_arguments() {
			return GetRuleContext<Tff_type_argumentsContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public Tff_atomic_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tff_atomic_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTff_atomic_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTff_atomic_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTff_atomic_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tff_atomic_typeContext tff_atomic_type() {
		Tff_atomic_typeContext _localctx = new Tff_atomic_typeContext(Context, State);
		EnterRule(_localctx, 162, RULE_tff_atomic_type);
		try {
			State = 1016;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1008; type_constant();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1009; defined_type();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1010; type_functor();
				State = 1011; Match(T__9);
				State = 1012; tff_type_arguments();
				State = 1013; Match(T__10);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1015; variable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tff_type_argumentsContext : ParserRuleContext {
		public Tff_atomic_typeContext[] tff_atomic_type() {
			return GetRuleContexts<Tff_atomic_typeContext>();
		}
		public Tff_atomic_typeContext tff_atomic_type(int i) {
			return GetRuleContext<Tff_atomic_typeContext>(i);
		}
		public Tff_type_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tff_type_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTff_type_arguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTff_type_arguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTff_type_arguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tff_type_argumentsContext tff_type_arguments() {
		Tff_type_argumentsContext _localctx = new Tff_type_argumentsContext(Context, State);
		EnterRule(_localctx, 164, RULE_tff_type_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1018; tff_atomic_type();
			State = 1023;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 1019; Match(T__1);
				State = 1020; tff_atomic_type();
				}
				}
				State = 1025;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tff_mapping_typeContext : ParserRuleContext {
		public Tff_unitary_typeContext tff_unitary_type() {
			return GetRuleContext<Tff_unitary_typeContext>(0);
		}
		public ITerminalNode Arrow() { return GetToken(tptp_v7_0_0_0Parser.Arrow, 0); }
		public Tff_atomic_typeContext tff_atomic_type() {
			return GetRuleContext<Tff_atomic_typeContext>(0);
		}
		public Tff_mapping_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tff_mapping_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTff_mapping_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTff_mapping_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTff_mapping_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tff_mapping_typeContext tff_mapping_type() {
		Tff_mapping_typeContext _localctx = new Tff_mapping_typeContext(Context, State);
		EnterRule(_localctx, 166, RULE_tff_mapping_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1026; tff_unitary_type();
			State = 1027; Match(Arrow);
			State = 1028; tff_atomic_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tff_xprod_typeContext : ParserRuleContext {
		public Tff_unitary_typeContext tff_unitary_type() {
			return GetRuleContext<Tff_unitary_typeContext>(0);
		}
		public ITerminalNode Star() { return GetToken(tptp_v7_0_0_0Parser.Star, 0); }
		public Tff_atomic_typeContext tff_atomic_type() {
			return GetRuleContext<Tff_atomic_typeContext>(0);
		}
		public Tff_xprod_typeContext tff_xprod_type() {
			return GetRuleContext<Tff_xprod_typeContext>(0);
		}
		public Tff_xprod_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tff_xprod_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTff_xprod_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTff_xprod_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTff_xprod_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tff_xprod_typeContext tff_xprod_type() {
		return tff_xprod_type(0);
	}

	private Tff_xprod_typeContext tff_xprod_type(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Tff_xprod_typeContext _localctx = new Tff_xprod_typeContext(Context, _parentState);
		Tff_xprod_typeContext _prevctx = _localctx;
		int _startState = 168;
		EnterRecursionRule(_localctx, 168, RULE_tff_xprod_type, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1031; tff_unitary_type();
			State = 1032; Match(Star);
			State = 1033; tff_atomic_type();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1040;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Tff_xprod_typeContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_tff_xprod_type);
					State = 1035;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1036; Match(Star);
					State = 1037; tff_atomic_type();
					}
					} 
				}
				State = 1042;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Tcf_formulaContext : ParserRuleContext {
		public Tcf_logic_formulaContext tcf_logic_formula() {
			return GetRuleContext<Tcf_logic_formulaContext>(0);
		}
		public Tff_typed_atomContext tff_typed_atom() {
			return GetRuleContext<Tff_typed_atomContext>(0);
		}
		public Tcf_formulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tcf_formula; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTcf_formula(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTcf_formula(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTcf_formula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tcf_formulaContext tcf_formula() {
		Tcf_formulaContext _localctx = new Tcf_formulaContext(Context, State);
		EnterRule(_localctx, 170, RULE_tcf_formula);
		try {
			State = 1045;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1043; tcf_logic_formula();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1044; tff_typed_atom();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tcf_logic_formulaContext : ParserRuleContext {
		public Tcf_quantified_formulaContext tcf_quantified_formula() {
			return GetRuleContext<Tcf_quantified_formulaContext>(0);
		}
		public Cnf_formulaContext cnf_formula() {
			return GetRuleContext<Cnf_formulaContext>(0);
		}
		public Tcf_logic_formulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tcf_logic_formula; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTcf_logic_formula(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTcf_logic_formula(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTcf_logic_formula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tcf_logic_formulaContext tcf_logic_formula() {
		Tcf_logic_formulaContext _localctx = new Tcf_logic_formulaContext(Context, State);
		EnterRule(_localctx, 172, RULE_tcf_logic_formula);
		try {
			State = 1049;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Forall:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1047; tcf_quantified_formula();
				}
				break;
			case T__9:
			case T__17:
			case T__18:
			case T__23:
			case T__24:
			case T__25:
			case Not:
			case Real:
			case Rational:
			case Integer:
			case Dollar_word:
			case Dollar_dollar_word:
			case Upper_word:
			case Lower_word:
			case Single_quoted:
			case Distinct_object:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1048; cnf_formula();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tcf_quantified_formulaContext : ParserRuleContext {
		public ITerminalNode Forall() { return GetToken(tptp_v7_0_0_0Parser.Forall, 0); }
		public Tff_variable_listContext tff_variable_list() {
			return GetRuleContext<Tff_variable_listContext>(0);
		}
		public Cnf_formulaContext cnf_formula() {
			return GetRuleContext<Cnf_formulaContext>(0);
		}
		public Tcf_quantified_formulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tcf_quantified_formula; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTcf_quantified_formula(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTcf_quantified_formula(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTcf_quantified_formula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tcf_quantified_formulaContext tcf_quantified_formula() {
		Tcf_quantified_formulaContext _localctx = new Tcf_quantified_formulaContext(Context, State);
		EnterRule(_localctx, 174, RULE_tcf_quantified_formula);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1051; Match(Forall);
			State = 1052; Match(T__11);
			State = 1053; tff_variable_list();
			State = 1054; Match(T__12);
			State = 1055; Match(T__13);
			State = 1056; cnf_formula();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fof_formulaContext : ParserRuleContext {
		public Fof_logic_formulaContext fof_logic_formula() {
			return GetRuleContext<Fof_logic_formulaContext>(0);
		}
		public Fof_sequentContext fof_sequent() {
			return GetRuleContext<Fof_sequentContext>(0);
		}
		public Fof_formulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fof_formula; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterFof_formula(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitFof_formula(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFof_formula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fof_formulaContext fof_formula() {
		Fof_formulaContext _localctx = new Fof_formulaContext(Context, State);
		EnterRule(_localctx, 176, RULE_fof_formula);
		try {
			State = 1060;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1058; fof_logic_formula();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1059; fof_sequent();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fof_logic_formulaContext : ParserRuleContext {
		public Fof_binary_formulaContext fof_binary_formula() {
			return GetRuleContext<Fof_binary_formulaContext>(0);
		}
		public Fof_unitary_formulaContext fof_unitary_formula() {
			return GetRuleContext<Fof_unitary_formulaContext>(0);
		}
		public Fof_logic_formulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fof_logic_formula; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterFof_logic_formula(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitFof_logic_formula(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFof_logic_formula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fof_logic_formulaContext fof_logic_formula() {
		Fof_logic_formulaContext _localctx = new Fof_logic_formulaContext(Context, State);
		EnterRule(_localctx, 178, RULE_fof_logic_formula);
		try {
			State = 1064;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1062; fof_binary_formula();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1063; fof_unitary_formula();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fof_binary_formulaContext : ParserRuleContext {
		public Fof_binary_nonassocContext fof_binary_nonassoc() {
			return GetRuleContext<Fof_binary_nonassocContext>(0);
		}
		public Fof_binary_assocContext fof_binary_assoc() {
			return GetRuleContext<Fof_binary_assocContext>(0);
		}
		public Fof_binary_formulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fof_binary_formula; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterFof_binary_formula(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitFof_binary_formula(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFof_binary_formula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fof_binary_formulaContext fof_binary_formula() {
		Fof_binary_formulaContext _localctx = new Fof_binary_formulaContext(Context, State);
		EnterRule(_localctx, 180, RULE_fof_binary_formula);
		try {
			State = 1068;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1066; fof_binary_nonassoc();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1067; fof_binary_assoc();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fof_binary_nonassocContext : ParserRuleContext {
		public Fof_unitary_formulaContext[] fof_unitary_formula() {
			return GetRuleContexts<Fof_unitary_formulaContext>();
		}
		public Fof_unitary_formulaContext fof_unitary_formula(int i) {
			return GetRuleContext<Fof_unitary_formulaContext>(i);
		}
		public Binary_connectiveContext binary_connective() {
			return GetRuleContext<Binary_connectiveContext>(0);
		}
		public Fof_binary_nonassocContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fof_binary_nonassoc; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterFof_binary_nonassoc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitFof_binary_nonassoc(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFof_binary_nonassoc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fof_binary_nonassocContext fof_binary_nonassoc() {
		Fof_binary_nonassocContext _localctx = new Fof_binary_nonassocContext(Context, State);
		EnterRule(_localctx, 182, RULE_fof_binary_nonassoc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1070; fof_unitary_formula();
			State = 1071; binary_connective();
			State = 1072; fof_unitary_formula();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fof_binary_assocContext : ParserRuleContext {
		public Fof_or_formulaContext fof_or_formula() {
			return GetRuleContext<Fof_or_formulaContext>(0);
		}
		public Fof_and_formulaContext fof_and_formula() {
			return GetRuleContext<Fof_and_formulaContext>(0);
		}
		public Fof_binary_assocContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fof_binary_assoc; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterFof_binary_assoc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitFof_binary_assoc(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFof_binary_assoc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fof_binary_assocContext fof_binary_assoc() {
		Fof_binary_assocContext _localctx = new Fof_binary_assocContext(Context, State);
		EnterRule(_localctx, 184, RULE_fof_binary_assoc);
		try {
			State = 1076;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1074; fof_or_formula(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1075; fof_and_formula(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fof_or_formulaContext : ParserRuleContext {
		public Fof_unitary_formulaContext[] fof_unitary_formula() {
			return GetRuleContexts<Fof_unitary_formulaContext>();
		}
		public Fof_unitary_formulaContext fof_unitary_formula(int i) {
			return GetRuleContext<Fof_unitary_formulaContext>(i);
		}
		public ITerminalNode Or() { return GetToken(tptp_v7_0_0_0Parser.Or, 0); }
		public Fof_or_formulaContext fof_or_formula() {
			return GetRuleContext<Fof_or_formulaContext>(0);
		}
		public Fof_or_formulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fof_or_formula; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterFof_or_formula(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitFof_or_formula(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFof_or_formula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fof_or_formulaContext fof_or_formula() {
		return fof_or_formula(0);
	}

	private Fof_or_formulaContext fof_or_formula(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Fof_or_formulaContext _localctx = new Fof_or_formulaContext(Context, _parentState);
		Fof_or_formulaContext _prevctx = _localctx;
		int _startState = 186;
		EnterRecursionRule(_localctx, 186, RULE_fof_or_formula, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1079; fof_unitary_formula();
			State = 1080; Match(Or);
			State = 1081; fof_unitary_formula();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1088;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,69,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Fof_or_formulaContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_fof_or_formula);
					State = 1083;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1084; Match(Or);
					State = 1085; fof_unitary_formula();
					}
					} 
				}
				State = 1090;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,69,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Fof_and_formulaContext : ParserRuleContext {
		public Fof_unitary_formulaContext[] fof_unitary_formula() {
			return GetRuleContexts<Fof_unitary_formulaContext>();
		}
		public Fof_unitary_formulaContext fof_unitary_formula(int i) {
			return GetRuleContext<Fof_unitary_formulaContext>(i);
		}
		public ITerminalNode And() { return GetToken(tptp_v7_0_0_0Parser.And, 0); }
		public Fof_and_formulaContext fof_and_formula() {
			return GetRuleContext<Fof_and_formulaContext>(0);
		}
		public Fof_and_formulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fof_and_formula; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterFof_and_formula(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitFof_and_formula(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFof_and_formula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fof_and_formulaContext fof_and_formula() {
		return fof_and_formula(0);
	}

	private Fof_and_formulaContext fof_and_formula(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Fof_and_formulaContext _localctx = new Fof_and_formulaContext(Context, _parentState);
		Fof_and_formulaContext _prevctx = _localctx;
		int _startState = 188;
		EnterRecursionRule(_localctx, 188, RULE_fof_and_formula, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1092; fof_unitary_formula();
			State = 1093; Match(And);
			State = 1094; fof_unitary_formula();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1101;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Fof_and_formulaContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_fof_and_formula);
					State = 1096;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1097; Match(And);
					State = 1098; fof_unitary_formula();
					}
					} 
				}
				State = 1103;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Fof_unitary_formulaContext : ParserRuleContext {
		public Fof_quantified_formulaContext fof_quantified_formula() {
			return GetRuleContext<Fof_quantified_formulaContext>(0);
		}
		public Fof_unary_formulaContext fof_unary_formula() {
			return GetRuleContext<Fof_unary_formulaContext>(0);
		}
		public Fof_atomic_formulaContext fof_atomic_formula() {
			return GetRuleContext<Fof_atomic_formulaContext>(0);
		}
		public Fof_logic_formulaContext fof_logic_formula() {
			return GetRuleContext<Fof_logic_formulaContext>(0);
		}
		public Fof_unitary_formulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fof_unitary_formula; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterFof_unitary_formula(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitFof_unitary_formula(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFof_unitary_formula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fof_unitary_formulaContext fof_unitary_formula() {
		Fof_unitary_formulaContext _localctx = new Fof_unitary_formulaContext(Context, State);
		EnterRule(_localctx, 190, RULE_fof_unitary_formula);
		try {
			State = 1111;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1104; fof_quantified_formula();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1105; fof_unary_formula();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1106; fof_atomic_formula();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1107; Match(T__9);
				State = 1108; fof_logic_formula();
				State = 1109; Match(T__10);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fof_quantified_formulaContext : ParserRuleContext {
		public Fof_quantifierContext fof_quantifier() {
			return GetRuleContext<Fof_quantifierContext>(0);
		}
		public Fof_variable_listContext fof_variable_list() {
			return GetRuleContext<Fof_variable_listContext>(0);
		}
		public Fof_unitary_formulaContext fof_unitary_formula() {
			return GetRuleContext<Fof_unitary_formulaContext>(0);
		}
		public Fof_quantified_formulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fof_quantified_formula; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterFof_quantified_formula(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitFof_quantified_formula(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFof_quantified_formula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fof_quantified_formulaContext fof_quantified_formula() {
		Fof_quantified_formulaContext _localctx = new Fof_quantified_formulaContext(Context, State);
		EnterRule(_localctx, 192, RULE_fof_quantified_formula);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1113; fof_quantifier();
			State = 1114; Match(T__11);
			State = 1115; fof_variable_list();
			State = 1116; Match(T__12);
			State = 1117; Match(T__13);
			State = 1118; fof_unitary_formula();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fof_variable_listContext : ParserRuleContext {
		public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		public Fof_variable_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fof_variable_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterFof_variable_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitFof_variable_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFof_variable_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fof_variable_listContext fof_variable_list() {
		Fof_variable_listContext _localctx = new Fof_variable_listContext(Context, State);
		EnterRule(_localctx, 194, RULE_fof_variable_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1120; variable();
			State = 1125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 1121; Match(T__1);
				State = 1122; variable();
				}
				}
				State = 1127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fof_unary_formulaContext : ParserRuleContext {
		public Unary_connectiveContext unary_connective() {
			return GetRuleContext<Unary_connectiveContext>(0);
		}
		public Fof_unitary_formulaContext fof_unitary_formula() {
			return GetRuleContext<Fof_unitary_formulaContext>(0);
		}
		public Fof_infix_unaryContext fof_infix_unary() {
			return GetRuleContext<Fof_infix_unaryContext>(0);
		}
		public Fof_unary_formulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fof_unary_formula; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterFof_unary_formula(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitFof_unary_formula(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFof_unary_formula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fof_unary_formulaContext fof_unary_formula() {
		Fof_unary_formulaContext _localctx = new Fof_unary_formulaContext(Context, State);
		EnterRule(_localctx, 196, RULE_fof_unary_formula);
		try {
			State = 1132;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Not:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1128; unary_connective();
				State = 1129; fof_unitary_formula();
				}
				break;
			case T__17:
			case T__18:
			case T__23:
			case T__24:
			case T__25:
			case Real:
			case Rational:
			case Integer:
			case Dollar_word:
			case Dollar_dollar_word:
			case Upper_word:
			case Lower_word:
			case Single_quoted:
			case Distinct_object:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1131; fof_infix_unary();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fof_infix_unaryContext : ParserRuleContext {
		public Fof_termContext[] fof_term() {
			return GetRuleContexts<Fof_termContext>();
		}
		public Fof_termContext fof_term(int i) {
			return GetRuleContext<Fof_termContext>(i);
		}
		public ITerminalNode Infix_inequality() { return GetToken(tptp_v7_0_0_0Parser.Infix_inequality, 0); }
		public Fof_infix_unaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fof_infix_unary; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterFof_infix_unary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitFof_infix_unary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFof_infix_unary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fof_infix_unaryContext fof_infix_unary() {
		Fof_infix_unaryContext _localctx = new Fof_infix_unaryContext(Context, State);
		EnterRule(_localctx, 198, RULE_fof_infix_unary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1134; fof_term();
			State = 1135; Match(Infix_inequality);
			State = 1136; fof_term();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fof_atomic_formulaContext : ParserRuleContext {
		public Fof_plain_atomic_formulaContext fof_plain_atomic_formula() {
			return GetRuleContext<Fof_plain_atomic_formulaContext>(0);
		}
		public Fof_defined_atomic_formulaContext fof_defined_atomic_formula() {
			return GetRuleContext<Fof_defined_atomic_formulaContext>(0);
		}
		public Fof_system_atomic_formulaContext fof_system_atomic_formula() {
			return GetRuleContext<Fof_system_atomic_formulaContext>(0);
		}
		public Fof_atomic_formulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fof_atomic_formula; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterFof_atomic_formula(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitFof_atomic_formula(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFof_atomic_formula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fof_atomic_formulaContext fof_atomic_formula() {
		Fof_atomic_formulaContext _localctx = new Fof_atomic_formulaContext(Context, State);
		EnterRule(_localctx, 200, RULE_fof_atomic_formula);
		try {
			State = 1141;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1138; fof_plain_atomic_formula();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1139; fof_defined_atomic_formula();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1140; fof_system_atomic_formula();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fof_plain_atomic_formulaContext : ParserRuleContext {
		public Fof_plain_termContext fof_plain_term() {
			return GetRuleContext<Fof_plain_termContext>(0);
		}
		public Fof_plain_atomic_formulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fof_plain_atomic_formula; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterFof_plain_atomic_formula(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitFof_plain_atomic_formula(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFof_plain_atomic_formula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fof_plain_atomic_formulaContext fof_plain_atomic_formula() {
		Fof_plain_atomic_formulaContext _localctx = new Fof_plain_atomic_formulaContext(Context, State);
		EnterRule(_localctx, 202, RULE_fof_plain_atomic_formula);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1143; fof_plain_term();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fof_defined_atomic_formulaContext : ParserRuleContext {
		public Fof_defined_plain_formulaContext fof_defined_plain_formula() {
			return GetRuleContext<Fof_defined_plain_formulaContext>(0);
		}
		public Fof_defined_infix_formulaContext fof_defined_infix_formula() {
			return GetRuleContext<Fof_defined_infix_formulaContext>(0);
		}
		public Fof_defined_atomic_formulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fof_defined_atomic_formula; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterFof_defined_atomic_formula(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitFof_defined_atomic_formula(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFof_defined_atomic_formula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fof_defined_atomic_formulaContext fof_defined_atomic_formula() {
		Fof_defined_atomic_formulaContext _localctx = new Fof_defined_atomic_formulaContext(Context, State);
		EnterRule(_localctx, 204, RULE_fof_defined_atomic_formula);
		try {
			State = 1147;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1145; fof_defined_plain_formula();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1146; fof_defined_infix_formula();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fof_defined_plain_formulaContext : ParserRuleContext {
		public Fof_defined_termContext fof_defined_term() {
			return GetRuleContext<Fof_defined_termContext>(0);
		}
		public Fof_defined_plain_formulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fof_defined_plain_formula; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterFof_defined_plain_formula(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitFof_defined_plain_formula(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFof_defined_plain_formula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fof_defined_plain_formulaContext fof_defined_plain_formula() {
		Fof_defined_plain_formulaContext _localctx = new Fof_defined_plain_formulaContext(Context, State);
		EnterRule(_localctx, 206, RULE_fof_defined_plain_formula);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1149; fof_defined_term();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fof_defined_infix_formulaContext : ParserRuleContext {
		public Fof_termContext[] fof_term() {
			return GetRuleContexts<Fof_termContext>();
		}
		public Fof_termContext fof_term(int i) {
			return GetRuleContext<Fof_termContext>(i);
		}
		public Defined_infix_predContext defined_infix_pred() {
			return GetRuleContext<Defined_infix_predContext>(0);
		}
		public Fof_defined_infix_formulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fof_defined_infix_formula; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterFof_defined_infix_formula(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitFof_defined_infix_formula(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFof_defined_infix_formula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fof_defined_infix_formulaContext fof_defined_infix_formula() {
		Fof_defined_infix_formulaContext _localctx = new Fof_defined_infix_formulaContext(Context, State);
		EnterRule(_localctx, 208, RULE_fof_defined_infix_formula);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1151; fof_term();
			State = 1152; defined_infix_pred();
			State = 1153; fof_term();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fof_system_atomic_formulaContext : ParserRuleContext {
		public Fof_system_termContext fof_system_term() {
			return GetRuleContext<Fof_system_termContext>(0);
		}
		public Fof_system_atomic_formulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fof_system_atomic_formula; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterFof_system_atomic_formula(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitFof_system_atomic_formula(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFof_system_atomic_formula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fof_system_atomic_formulaContext fof_system_atomic_formula() {
		Fof_system_atomic_formulaContext _localctx = new Fof_system_atomic_formulaContext(Context, State);
		EnterRule(_localctx, 210, RULE_fof_system_atomic_formula);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1155; fof_system_term();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fof_plain_termContext : ParserRuleContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public FunctorContext functor() {
			return GetRuleContext<FunctorContext>(0);
		}
		public Fof_argumentsContext fof_arguments() {
			return GetRuleContext<Fof_argumentsContext>(0);
		}
		public Fof_plain_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fof_plain_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterFof_plain_term(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitFof_plain_term(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFof_plain_term(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fof_plain_termContext fof_plain_term() {
		Fof_plain_termContext _localctx = new Fof_plain_termContext(Context, State);
		EnterRule(_localctx, 212, RULE_fof_plain_term);
		try {
			State = 1163;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1157; constant();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1158; functor();
				State = 1159; Match(T__9);
				State = 1160; fof_arguments();
				State = 1161; Match(T__10);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fof_defined_termContext : ParserRuleContext {
		public Defined_termContext defined_term() {
			return GetRuleContext<Defined_termContext>(0);
		}
		public Fof_defined_atomic_termContext fof_defined_atomic_term() {
			return GetRuleContext<Fof_defined_atomic_termContext>(0);
		}
		public Fof_defined_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fof_defined_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterFof_defined_term(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitFof_defined_term(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFof_defined_term(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fof_defined_termContext fof_defined_term() {
		Fof_defined_termContext _localctx = new Fof_defined_termContext(Context, State);
		EnterRule(_localctx, 214, RULE_fof_defined_term);
		try {
			State = 1167;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Real:
			case Rational:
			case Integer:
			case Distinct_object:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1165; defined_term();
				}
				break;
			case Dollar_word:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1166; fof_defined_atomic_term();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fof_defined_atomic_termContext : ParserRuleContext {
		public Fof_defined_plain_termContext fof_defined_plain_term() {
			return GetRuleContext<Fof_defined_plain_termContext>(0);
		}
		public Fof_defined_atomic_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fof_defined_atomic_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterFof_defined_atomic_term(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitFof_defined_atomic_term(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFof_defined_atomic_term(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fof_defined_atomic_termContext fof_defined_atomic_term() {
		Fof_defined_atomic_termContext _localctx = new Fof_defined_atomic_termContext(Context, State);
		EnterRule(_localctx, 216, RULE_fof_defined_atomic_term);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1169; fof_defined_plain_term();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fof_defined_plain_termContext : ParserRuleContext {
		public Defined_constantContext defined_constant() {
			return GetRuleContext<Defined_constantContext>(0);
		}
		public Defined_functorContext defined_functor() {
			return GetRuleContext<Defined_functorContext>(0);
		}
		public Fof_argumentsContext fof_arguments() {
			return GetRuleContext<Fof_argumentsContext>(0);
		}
		public Fof_defined_plain_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fof_defined_plain_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterFof_defined_plain_term(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitFof_defined_plain_term(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFof_defined_plain_term(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fof_defined_plain_termContext fof_defined_plain_term() {
		Fof_defined_plain_termContext _localctx = new Fof_defined_plain_termContext(Context, State);
		EnterRule(_localctx, 218, RULE_fof_defined_plain_term);
		try {
			State = 1177;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1171; defined_constant();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1172; defined_functor();
				State = 1173; Match(T__9);
				State = 1174; fof_arguments();
				State = 1175; Match(T__10);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fof_system_termContext : ParserRuleContext {
		public System_constantContext system_constant() {
			return GetRuleContext<System_constantContext>(0);
		}
		public System_functorContext system_functor() {
			return GetRuleContext<System_functorContext>(0);
		}
		public Fof_argumentsContext fof_arguments() {
			return GetRuleContext<Fof_argumentsContext>(0);
		}
		public Fof_system_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fof_system_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterFof_system_term(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitFof_system_term(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFof_system_term(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fof_system_termContext fof_system_term() {
		Fof_system_termContext _localctx = new Fof_system_termContext(Context, State);
		EnterRule(_localctx, 220, RULE_fof_system_term);
		try {
			State = 1185;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1179; system_constant();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1180; system_functor();
				State = 1181; Match(T__9);
				State = 1182; fof_arguments();
				State = 1183; Match(T__10);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fof_argumentsContext : ParserRuleContext {
		public Fof_termContext[] fof_term() {
			return GetRuleContexts<Fof_termContext>();
		}
		public Fof_termContext fof_term(int i) {
			return GetRuleContext<Fof_termContext>(i);
		}
		public Fof_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fof_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterFof_arguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitFof_arguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFof_arguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fof_argumentsContext fof_arguments() {
		Fof_argumentsContext _localctx = new Fof_argumentsContext(Context, State);
		EnterRule(_localctx, 222, RULE_fof_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1187; fof_term();
			State = 1192;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 1188; Match(T__1);
				State = 1189; fof_term();
				}
				}
				State = 1194;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fof_termContext : ParserRuleContext {
		public Fof_function_termContext fof_function_term() {
			return GetRuleContext<Fof_function_termContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public Tff_conditional_termContext tff_conditional_term() {
			return GetRuleContext<Tff_conditional_termContext>(0);
		}
		public Tff_let_termContext tff_let_term() {
			return GetRuleContext<Tff_let_termContext>(0);
		}
		public Tff_tuple_termContext tff_tuple_term() {
			return GetRuleContext<Tff_tuple_termContext>(0);
		}
		public Fof_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fof_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterFof_term(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitFof_term(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFof_term(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fof_termContext fof_term() {
		Fof_termContext _localctx = new Fof_termContext(Context, State);
		EnterRule(_localctx, 224, RULE_fof_term);
		try {
			State = 1200;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Real:
			case Rational:
			case Integer:
			case Dollar_word:
			case Dollar_dollar_word:
			case Lower_word:
			case Single_quoted:
			case Distinct_object:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1195; fof_function_term();
				}
				break;
			case Upper_word:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1196; variable();
				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1197; tff_conditional_term();
				}
				break;
			case T__24:
			case T__25:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1198; tff_let_term();
				}
				break;
			case T__17:
			case T__18:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1199; tff_tuple_term();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fof_function_termContext : ParserRuleContext {
		public Fof_plain_termContext fof_plain_term() {
			return GetRuleContext<Fof_plain_termContext>(0);
		}
		public Fof_defined_termContext fof_defined_term() {
			return GetRuleContext<Fof_defined_termContext>(0);
		}
		public Fof_system_termContext fof_system_term() {
			return GetRuleContext<Fof_system_termContext>(0);
		}
		public Fof_function_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fof_function_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterFof_function_term(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitFof_function_term(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFof_function_term(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fof_function_termContext fof_function_term() {
		Fof_function_termContext _localctx = new Fof_function_termContext(Context, State);
		EnterRule(_localctx, 226, RULE_fof_function_term);
		try {
			State = 1205;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Lower_word:
			case Single_quoted:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1202; fof_plain_term();
				}
				break;
			case Real:
			case Rational:
			case Integer:
			case Dollar_word:
			case Distinct_object:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1203; fof_defined_term();
				}
				break;
			case Dollar_dollar_word:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1204; fof_system_term();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tff_conditional_termContext : ParserRuleContext {
		public Tff_logic_formulaContext tff_logic_formula() {
			return GetRuleContext<Tff_logic_formulaContext>(0);
		}
		public Fof_termContext[] fof_term() {
			return GetRuleContexts<Fof_termContext>();
		}
		public Fof_termContext fof_term(int i) {
			return GetRuleContext<Fof_termContext>(i);
		}
		public Tff_conditional_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tff_conditional_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTff_conditional_term(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTff_conditional_term(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTff_conditional_term(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tff_conditional_termContext tff_conditional_term() {
		Tff_conditional_termContext _localctx = new Tff_conditional_termContext(Context, State);
		EnterRule(_localctx, 228, RULE_tff_conditional_term);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1207; Match(T__23);
			State = 1208; tff_logic_formula();
			State = 1209; Match(T__1);
			State = 1210; fof_term();
			State = 1211; Match(T__1);
			State = 1212; fof_term();
			State = 1213; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tff_let_termContext : ParserRuleContext {
		public Tff_let_formula_defnsContext tff_let_formula_defns() {
			return GetRuleContext<Tff_let_formula_defnsContext>(0);
		}
		public Fof_termContext fof_term() {
			return GetRuleContext<Fof_termContext>(0);
		}
		public Tff_let_term_defnsContext tff_let_term_defns() {
			return GetRuleContext<Tff_let_term_defnsContext>(0);
		}
		public Tff_let_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tff_let_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTff_let_term(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTff_let_term(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTff_let_term(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tff_let_termContext tff_let_term() {
		Tff_let_termContext _localctx = new Tff_let_termContext(Context, State);
		EnterRule(_localctx, 230, RULE_tff_let_term);
		try {
			State = 1227;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__24:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1215; Match(T__24);
				State = 1216; tff_let_formula_defns();
				State = 1217; Match(T__1);
				State = 1218; fof_term();
				State = 1219; Match(T__10);
				}
				break;
			case T__25:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1221; Match(T__25);
				State = 1222; tff_let_term_defns();
				State = 1223; Match(T__1);
				State = 1224; fof_term();
				State = 1225; Match(T__10);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tff_tuple_termContext : ParserRuleContext {
		public Fof_argumentsContext fof_arguments() {
			return GetRuleContext<Fof_argumentsContext>(0);
		}
		public Tff_tuple_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tff_tuple_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTff_tuple_term(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTff_tuple_term(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTff_tuple_term(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tff_tuple_termContext tff_tuple_term() {
		Tff_tuple_termContext _localctx = new Tff_tuple_termContext(Context, State);
		EnterRule(_localctx, 232, RULE_tff_tuple_term);
		try {
			State = 1234;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__17:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1229; Match(T__17);
				}
				break;
			case T__18:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1230; Match(T__18);
				State = 1231; fof_arguments();
				State = 1232; Match(T__19);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fof_sequentContext : ParserRuleContext {
		public Fof_formula_tupleContext[] fof_formula_tuple() {
			return GetRuleContexts<Fof_formula_tupleContext>();
		}
		public Fof_formula_tupleContext fof_formula_tuple(int i) {
			return GetRuleContext<Fof_formula_tupleContext>(i);
		}
		public ITerminalNode Gentzen_arrow() { return GetToken(tptp_v7_0_0_0Parser.Gentzen_arrow, 0); }
		public Fof_sequentContext fof_sequent() {
			return GetRuleContext<Fof_sequentContext>(0);
		}
		public Fof_sequentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fof_sequent; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterFof_sequent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitFof_sequent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFof_sequent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fof_sequentContext fof_sequent() {
		Fof_sequentContext _localctx = new Fof_sequentContext(Context, State);
		EnterRule(_localctx, 234, RULE_fof_sequent);
		try {
			State = 1244;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__11:
			case T__16:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1236; fof_formula_tuple();
				State = 1237; Match(Gentzen_arrow);
				State = 1238; fof_formula_tuple();
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1240; Match(T__9);
				State = 1241; fof_sequent();
				State = 1242; Match(T__10);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fof_formula_tupleContext : ParserRuleContext {
		public Fof_formula_tuple_listContext fof_formula_tuple_list() {
			return GetRuleContext<Fof_formula_tuple_listContext>(0);
		}
		public Fof_formula_tupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fof_formula_tuple; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterFof_formula_tuple(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitFof_formula_tuple(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFof_formula_tuple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fof_formula_tupleContext fof_formula_tuple() {
		Fof_formula_tupleContext _localctx = new Fof_formula_tupleContext(Context, State);
		EnterRule(_localctx, 236, RULE_fof_formula_tuple);
		try {
			State = 1251;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__16:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1246; Match(T__16);
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1247; Match(T__11);
				State = 1248; fof_formula_tuple_list();
				State = 1249; Match(T__12);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fof_formula_tuple_listContext : ParserRuleContext {
		public Fof_logic_formulaContext[] fof_logic_formula() {
			return GetRuleContexts<Fof_logic_formulaContext>();
		}
		public Fof_logic_formulaContext fof_logic_formula(int i) {
			return GetRuleContext<Fof_logic_formulaContext>(i);
		}
		public Fof_formula_tuple_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fof_formula_tuple_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterFof_formula_tuple_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitFof_formula_tuple_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFof_formula_tuple_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fof_formula_tuple_listContext fof_formula_tuple_list() {
		Fof_formula_tuple_listContext _localctx = new Fof_formula_tuple_listContext(Context, State);
		EnterRule(_localctx, 238, RULE_fof_formula_tuple_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1253; fof_logic_formula();
			State = 1258;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 1254; Match(T__1);
				State = 1255; fof_logic_formula();
				}
				}
				State = 1260;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cnf_formulaContext : ParserRuleContext {
		public Cnf_disjunctionContext cnf_disjunction() {
			return GetRuleContext<Cnf_disjunctionContext>(0);
		}
		public Cnf_formulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cnf_formula; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterCnf_formula(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitCnf_formula(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCnf_formula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cnf_formulaContext cnf_formula() {
		Cnf_formulaContext _localctx = new Cnf_formulaContext(Context, State);
		EnterRule(_localctx, 240, RULE_cnf_formula);
		try {
			State = 1266;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__17:
			case T__18:
			case T__23:
			case T__24:
			case T__25:
			case Not:
			case Real:
			case Rational:
			case Integer:
			case Dollar_word:
			case Dollar_dollar_word:
			case Upper_word:
			case Lower_word:
			case Single_quoted:
			case Distinct_object:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1261; cnf_disjunction(0);
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1262; Match(T__9);
				State = 1263; cnf_disjunction(0);
				State = 1264; Match(T__10);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cnf_disjunctionContext : ParserRuleContext {
		public Cnf_literalContext cnf_literal() {
			return GetRuleContext<Cnf_literalContext>(0);
		}
		public Cnf_disjunctionContext cnf_disjunction() {
			return GetRuleContext<Cnf_disjunctionContext>(0);
		}
		public ITerminalNode Or() { return GetToken(tptp_v7_0_0_0Parser.Or, 0); }
		public Cnf_disjunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cnf_disjunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterCnf_disjunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitCnf_disjunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCnf_disjunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cnf_disjunctionContext cnf_disjunction() {
		return cnf_disjunction(0);
	}

	private Cnf_disjunctionContext cnf_disjunction(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Cnf_disjunctionContext _localctx = new Cnf_disjunctionContext(Context, _parentState);
		Cnf_disjunctionContext _prevctx = _localctx;
		int _startState = 242;
		EnterRecursionRule(_localctx, 242, RULE_cnf_disjunction, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1269; cnf_literal();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1276;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,89,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Cnf_disjunctionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_cnf_disjunction);
					State = 1271;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1272; Match(Or);
					State = 1273; cnf_literal();
					}
					} 
				}
				State = 1278;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,89,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Cnf_literalContext : ParserRuleContext {
		public Fof_atomic_formulaContext fof_atomic_formula() {
			return GetRuleContext<Fof_atomic_formulaContext>(0);
		}
		public ITerminalNode Not() { return GetToken(tptp_v7_0_0_0Parser.Not, 0); }
		public Fof_infix_unaryContext fof_infix_unary() {
			return GetRuleContext<Fof_infix_unaryContext>(0);
		}
		public Cnf_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cnf_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterCnf_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitCnf_literal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCnf_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cnf_literalContext cnf_literal() {
		Cnf_literalContext _localctx = new Cnf_literalContext(Context, State);
		EnterRule(_localctx, 244, RULE_cnf_literal);
		try {
			State = 1283;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1279; fof_atomic_formula();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1280; Match(Not);
				State = 1281; fof_atomic_formula();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1282; fof_infix_unary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Thf_quantifierContext : ParserRuleContext {
		public Fof_quantifierContext fof_quantifier() {
			return GetRuleContext<Fof_quantifierContext>(0);
		}
		public Th0_quantifierContext th0_quantifier() {
			return GetRuleContext<Th0_quantifierContext>(0);
		}
		public Th1_quantifierContext th1_quantifier() {
			return GetRuleContext<Th1_quantifierContext>(0);
		}
		public Thf_quantifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thf_quantifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterThf_quantifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitThf_quantifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThf_quantifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Thf_quantifierContext thf_quantifier() {
		Thf_quantifierContext _localctx = new Thf_quantifierContext(Context, State);
		EnterRule(_localctx, 246, RULE_thf_quantifier);
		try {
			State = 1288;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Forall:
			case Exists:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1285; fof_quantifier();
				}
				break;
			case Lambda:
			case Choice:
			case Description:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1286; th0_quantifier();
				}
				break;
			case TyForall:
			case TyExists:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1287; th1_quantifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Th0_quantifierContext : ParserRuleContext {
		public ITerminalNode Lambda() { return GetToken(tptp_v7_0_0_0Parser.Lambda, 0); }
		public ITerminalNode Choice() { return GetToken(tptp_v7_0_0_0Parser.Choice, 0); }
		public ITerminalNode Description() { return GetToken(tptp_v7_0_0_0Parser.Description, 0); }
		public Th0_quantifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_th0_quantifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTh0_quantifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTh0_quantifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTh0_quantifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Th0_quantifierContext th0_quantifier() {
		Th0_quantifierContext _localctx = new Th0_quantifierContext(Context, State);
		EnterRule(_localctx, 248, RULE_th0_quantifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1290;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & ((1L << (Lambda - 61)) | (1L << (Choice - 61)) | (1L << (Description - 61)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Th1_quantifierContext : ParserRuleContext {
		public ITerminalNode TyForall() { return GetToken(tptp_v7_0_0_0Parser.TyForall, 0); }
		public ITerminalNode TyExists() { return GetToken(tptp_v7_0_0_0Parser.TyExists, 0); }
		public Th1_quantifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_th1_quantifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTh1_quantifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTh1_quantifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTh1_quantifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Th1_quantifierContext th1_quantifier() {
		Th1_quantifierContext _localctx = new Th1_quantifierContext(Context, State);
		EnterRule(_localctx, 250, RULE_th1_quantifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1292;
			_la = TokenStream.LA(1);
			if ( !(_la==TyForall || _la==TyExists) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Thf_pair_connectiveContext : ParserRuleContext {
		public ITerminalNode Infix_equality() { return GetToken(tptp_v7_0_0_0Parser.Infix_equality, 0); }
		public ITerminalNode Infix_inequality() { return GetToken(tptp_v7_0_0_0Parser.Infix_inequality, 0); }
		public Binary_connectiveContext binary_connective() {
			return GetRuleContext<Binary_connectiveContext>(0);
		}
		public ITerminalNode Assignment() { return GetToken(tptp_v7_0_0_0Parser.Assignment, 0); }
		public Thf_pair_connectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thf_pair_connective; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterThf_pair_connective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitThf_pair_connective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThf_pair_connective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Thf_pair_connectiveContext thf_pair_connective() {
		Thf_pair_connectiveContext _localctx = new Thf_pair_connectiveContext(Context, State);
		EnterRule(_localctx, 252, RULE_thf_pair_connective);
		try {
			State = 1298;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Infix_equality:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1294; Match(Infix_equality);
				}
				break;
			case Infix_inequality:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1295; Match(Infix_inequality);
				}
				break;
			case Iff:
			case Impl:
			case If:
			case Niff:
			case Nor:
			case Nand:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1296; binary_connective();
				}
				break;
			case Assignment:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1297; Match(Assignment);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Thf_unary_connectiveContext : ParserRuleContext {
		public Unary_connectiveContext unary_connective() {
			return GetRuleContext<Unary_connectiveContext>(0);
		}
		public Th1_unary_connectiveContext th1_unary_connective() {
			return GetRuleContext<Th1_unary_connectiveContext>(0);
		}
		public Thf_unary_connectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thf_unary_connective; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterThf_unary_connective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitThf_unary_connective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThf_unary_connective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Thf_unary_connectiveContext thf_unary_connective() {
		Thf_unary_connectiveContext _localctx = new Thf_unary_connectiveContext(Context, State);
		EnterRule(_localctx, 254, RULE_thf_unary_connective);
		try {
			State = 1302;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Not:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1300; unary_connective();
				}
				break;
			case ForallComb:
			case ExistsComb:
			case ChoiceComb:
			case DescriptionComb:
			case EqComb:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1301; th1_unary_connective();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Th1_unary_connectiveContext : ParserRuleContext {
		public ITerminalNode ForallComb() { return GetToken(tptp_v7_0_0_0Parser.ForallComb, 0); }
		public ITerminalNode ExistsComb() { return GetToken(tptp_v7_0_0_0Parser.ExistsComb, 0); }
		public ITerminalNode ChoiceComb() { return GetToken(tptp_v7_0_0_0Parser.ChoiceComb, 0); }
		public ITerminalNode DescriptionComb() { return GetToken(tptp_v7_0_0_0Parser.DescriptionComb, 0); }
		public ITerminalNode EqComb() { return GetToken(tptp_v7_0_0_0Parser.EqComb, 0); }
		public Th1_unary_connectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_th1_unary_connective; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTh1_unary_connective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTh1_unary_connective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTh1_unary_connective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Th1_unary_connectiveContext th1_unary_connective() {
		Th1_unary_connectiveContext _localctx = new Th1_unary_connectiveContext(Context, State);
		EnterRule(_localctx, 256, RULE_th1_unary_connective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1304;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 53)) & ~0x3f) == 0 && ((1L << (_la - 53)) & ((1L << (ForallComb - 53)) | (1L << (ExistsComb - 53)) | (1L << (ChoiceComb - 53)) | (1L << (DescriptionComb - 53)) | (1L << (EqComb - 53)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tff_pair_connectiveContext : ParserRuleContext {
		public Binary_connectiveContext binary_connective() {
			return GetRuleContext<Binary_connectiveContext>(0);
		}
		public ITerminalNode Assignment() { return GetToken(tptp_v7_0_0_0Parser.Assignment, 0); }
		public Tff_pair_connectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tff_pair_connective; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTff_pair_connective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTff_pair_connective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTff_pair_connective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tff_pair_connectiveContext tff_pair_connective() {
		Tff_pair_connectiveContext _localctx = new Tff_pair_connectiveContext(Context, State);
		EnterRule(_localctx, 258, RULE_tff_pair_connective);
		try {
			State = 1308;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Iff:
			case Impl:
			case If:
			case Niff:
			case Nor:
			case Nand:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1306; binary_connective();
				}
				break;
			case Assignment:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1307; Match(Assignment);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fof_quantifierContext : ParserRuleContext {
		public ITerminalNode Forall() { return GetToken(tptp_v7_0_0_0Parser.Forall, 0); }
		public ITerminalNode Exists() { return GetToken(tptp_v7_0_0_0Parser.Exists, 0); }
		public Fof_quantifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fof_quantifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterFof_quantifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitFof_quantifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFof_quantifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fof_quantifierContext fof_quantifier() {
		Fof_quantifierContext _localctx = new Fof_quantifierContext(Context, State);
		EnterRule(_localctx, 260, RULE_fof_quantifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1310;
			_la = TokenStream.LA(1);
			if ( !(_la==Forall || _la==Exists) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Binary_connectiveContext : ParserRuleContext {
		public ITerminalNode Iff() { return GetToken(tptp_v7_0_0_0Parser.Iff, 0); }
		public ITerminalNode Impl() { return GetToken(tptp_v7_0_0_0Parser.Impl, 0); }
		public ITerminalNode If() { return GetToken(tptp_v7_0_0_0Parser.If, 0); }
		public ITerminalNode Niff() { return GetToken(tptp_v7_0_0_0Parser.Niff, 0); }
		public ITerminalNode Nor() { return GetToken(tptp_v7_0_0_0Parser.Nor, 0); }
		public ITerminalNode Nand() { return GetToken(tptp_v7_0_0_0Parser.Nand, 0); }
		public Binary_connectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary_connective; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterBinary_connective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitBinary_connective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary_connective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Binary_connectiveContext binary_connective() {
		Binary_connectiveContext _localctx = new Binary_connectiveContext(Context, State);
		EnterRule(_localctx, 262, RULE_binary_connective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1312;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Iff) | (1L << Impl) | (1L << If) | (1L << Niff) | (1L << Nor) | (1L << Nand))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assoc_connectiveContext : ParserRuleContext {
		public ITerminalNode Or() { return GetToken(tptp_v7_0_0_0Parser.Or, 0); }
		public ITerminalNode And() { return GetToken(tptp_v7_0_0_0Parser.And, 0); }
		public Assoc_connectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assoc_connective; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterAssoc_connective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitAssoc_connective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssoc_connective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assoc_connectiveContext assoc_connective() {
		Assoc_connectiveContext _localctx = new Assoc_connectiveContext(Context, State);
		EnterRule(_localctx, 264, RULE_assoc_connective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1314;
			_la = TokenStream.LA(1);
			if ( !(_la==Or || _la==And) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_connectiveContext : ParserRuleContext {
		public ITerminalNode Not() { return GetToken(tptp_v7_0_0_0Parser.Not, 0); }
		public Unary_connectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_connective; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterUnary_connective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitUnary_connective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_connective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_connectiveContext unary_connective() {
		Unary_connectiveContext _localctx = new Unary_connectiveContext(Context, State);
		EnterRule(_localctx, 266, RULE_unary_connective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1316; Match(Not);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_constantContext : ParserRuleContext {
		public Type_functorContext type_functor() {
			return GetRuleContext<Type_functorContext>(0);
		}
		public Type_constantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterType_constant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitType_constant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_constant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_constantContext type_constant() {
		Type_constantContext _localctx = new Type_constantContext(Context, State);
		EnterRule(_localctx, 268, RULE_type_constant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1318; type_functor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_functorContext : ParserRuleContext {
		public Atomic_wordContext atomic_word() {
			return GetRuleContext<Atomic_wordContext>(0);
		}
		public Type_functorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_functor; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterType_functor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitType_functor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_functor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_functorContext type_functor() {
		Type_functorContext _localctx = new Type_functorContext(Context, State);
		EnterRule(_localctx, 270, RULE_type_functor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1320; atomic_word();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Defined_typeContext : ParserRuleContext {
		public ITerminalNode Dollar_word() { return GetToken(tptp_v7_0_0_0Parser.Dollar_word, 0); }
		public Defined_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defined_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterDefined_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitDefined_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefined_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Defined_typeContext defined_type() {
		Defined_typeContext _localctx = new Defined_typeContext(Context, State);
		EnterRule(_localctx, 272, RULE_defined_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1322; Match(Dollar_word);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class System_typeContext : ParserRuleContext {
		public Atomic_system_wordContext atomic_system_word() {
			return GetRuleContext<Atomic_system_wordContext>(0);
		}
		public System_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_system_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterSystem_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitSystem_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSystem_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public System_typeContext system_type() {
		System_typeContext _localctx = new System_typeContext(Context, State);
		EnterRule(_localctx, 274, RULE_system_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1324; atomic_system_word();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public Untyped_atomContext untyped_atom() {
			return GetRuleContext<Untyped_atomContext>(0);
		}
		public Defined_constantContext defined_constant() {
			return GetRuleContext<Defined_constantContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 276, RULE_atom);
		try {
			State = 1328;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Dollar_dollar_word:
			case Lower_word:
			case Single_quoted:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1326; untyped_atom();
				}
				break;
			case Dollar_word:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1327; defined_constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Untyped_atomContext : ParserRuleContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public System_constantContext system_constant() {
			return GetRuleContext<System_constantContext>(0);
		}
		public Untyped_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_untyped_atom; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterUntyped_atom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitUntyped_atom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUntyped_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Untyped_atomContext untyped_atom() {
		Untyped_atomContext _localctx = new Untyped_atomContext(Context, State);
		EnterRule(_localctx, 278, RULE_untyped_atom);
		try {
			State = 1332;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Lower_word:
			case Single_quoted:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1330; constant();
				}
				break;
			case Dollar_dollar_word:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1331; system_constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Defined_propositionContext : ParserRuleContext {
		public ITerminalNode Dollar_word() { return GetToken(tptp_v7_0_0_0Parser.Dollar_word, 0); }
		public Defined_propositionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defined_proposition; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterDefined_proposition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitDefined_proposition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefined_proposition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Defined_propositionContext defined_proposition() {
		Defined_propositionContext _localctx = new Defined_propositionContext(Context, State);
		EnterRule(_localctx, 280, RULE_defined_proposition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1334; Match(Dollar_word);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Defined_predicateContext : ParserRuleContext {
		public ITerminalNode Dollar_word() { return GetToken(tptp_v7_0_0_0Parser.Dollar_word, 0); }
		public Defined_predicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defined_predicate; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterDefined_predicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitDefined_predicate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefined_predicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Defined_predicateContext defined_predicate() {
		Defined_predicateContext _localctx = new Defined_predicateContext(Context, State);
		EnterRule(_localctx, 282, RULE_defined_predicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1336; Match(Dollar_word);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Defined_infix_predContext : ParserRuleContext {
		public ITerminalNode Infix_equality() { return GetToken(tptp_v7_0_0_0Parser.Infix_equality, 0); }
		public ITerminalNode Assignment() { return GetToken(tptp_v7_0_0_0Parser.Assignment, 0); }
		public Defined_infix_predContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defined_infix_pred; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterDefined_infix_pred(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitDefined_infix_pred(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefined_infix_pred(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Defined_infix_predContext defined_infix_pred() {
		Defined_infix_predContext _localctx = new Defined_infix_predContext(Context, State);
		EnterRule(_localctx, 284, RULE_defined_infix_pred);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1338;
			_la = TokenStream.LA(1);
			if ( !(_la==Infix_equality || _la==Assignment) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public FunctorContext functor() {
			return GetRuleContext<FunctorContext>(0);
		}
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 286, RULE_constant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1340; functor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctorContext : ParserRuleContext {
		public Atomic_wordContext atomic_word() {
			return GetRuleContext<Atomic_wordContext>(0);
		}
		public FunctorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functor; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterFunctor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitFunctor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctorContext functor() {
		FunctorContext _localctx = new FunctorContext(Context, State);
		EnterRule(_localctx, 288, RULE_functor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1342; atomic_word();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class System_constantContext : ParserRuleContext {
		public System_functorContext system_functor() {
			return GetRuleContext<System_functorContext>(0);
		}
		public System_constantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_system_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterSystem_constant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitSystem_constant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSystem_constant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public System_constantContext system_constant() {
		System_constantContext _localctx = new System_constantContext(Context, State);
		EnterRule(_localctx, 290, RULE_system_constant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1344; system_functor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class System_functorContext : ParserRuleContext {
		public Atomic_system_wordContext atomic_system_word() {
			return GetRuleContext<Atomic_system_wordContext>(0);
		}
		public System_functorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_system_functor; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterSystem_functor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitSystem_functor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSystem_functor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public System_functorContext system_functor() {
		System_functorContext _localctx = new System_functorContext(Context, State);
		EnterRule(_localctx, 292, RULE_system_functor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1346; atomic_system_word();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Defined_constantContext : ParserRuleContext {
		public Defined_functorContext defined_functor() {
			return GetRuleContext<Defined_functorContext>(0);
		}
		public Defined_constantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defined_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterDefined_constant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitDefined_constant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefined_constant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Defined_constantContext defined_constant() {
		Defined_constantContext _localctx = new Defined_constantContext(Context, State);
		EnterRule(_localctx, 294, RULE_defined_constant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1348; defined_functor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Defined_functorContext : ParserRuleContext {
		public Atomic_defined_wordContext atomic_defined_word() {
			return GetRuleContext<Atomic_defined_wordContext>(0);
		}
		public Defined_functorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defined_functor; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterDefined_functor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitDefined_functor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefined_functor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Defined_functorContext defined_functor() {
		Defined_functorContext _localctx = new Defined_functorContext(Context, State);
		EnterRule(_localctx, 296, RULE_defined_functor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1350; atomic_defined_word();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Defined_termContext : ParserRuleContext {
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public ITerminalNode Distinct_object() { return GetToken(tptp_v7_0_0_0Parser.Distinct_object, 0); }
		public Defined_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defined_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterDefined_term(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitDefined_term(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefined_term(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Defined_termContext defined_term() {
		Defined_termContext _localctx = new Defined_termContext(Context, State);
		EnterRule(_localctx, 298, RULE_defined_term);
		try {
			State = 1354;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Real:
			case Rational:
			case Integer:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1352; number();
				}
				break;
			case Distinct_object:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1353; Match(Distinct_object);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public ITerminalNode Upper_word() { return GetToken(tptp_v7_0_0_0Parser.Upper_word, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 300, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1356; Match(Upper_word);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceContext : ParserRuleContext {
		public Dag_sourceContext dag_source() {
			return GetRuleContext<Dag_sourceContext>(0);
		}
		public Internal_sourceContext internal_source() {
			return GetRuleContext<Internal_sourceContext>(0);
		}
		public External_sourceContext external_source() {
			return GetRuleContext<External_sourceContext>(0);
		}
		public ITerminalNode Lower_word() { return GetToken(tptp_v7_0_0_0Parser.Lower_word, 0); }
		public SourcesContext sources() {
			return GetRuleContext<SourcesContext>(0);
		}
		public SourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_source; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterSource(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitSource(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceContext source() {
		SourceContext _localctx = new SourceContext(Context, State);
		EnterRule(_localctx, 302, RULE_source);
		try {
			State = 1366;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1358; dag_source();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1359; internal_source();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1360; external_source();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1361; Match(Lower_word);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1362; Match(T__11);
				State = 1363; sources();
				State = 1364; Match(T__12);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourcesContext : ParserRuleContext {
		public SourceContext[] source() {
			return GetRuleContexts<SourceContext>();
		}
		public SourceContext source(int i) {
			return GetRuleContext<SourceContext>(i);
		}
		public SourcesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sources; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterSources(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitSources(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSources(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourcesContext sources() {
		SourcesContext _localctx = new SourcesContext(Context, State);
		EnterRule(_localctx, 304, RULE_sources);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1368; source();
			State = 1373;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 1369; Match(T__1);
				State = 1370; source();
				}
				}
				State = 1375;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dag_sourceContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Inference_recordContext inference_record() {
			return GetRuleContext<Inference_recordContext>(0);
		}
		public Dag_sourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dag_source; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterDag_source(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitDag_source(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDag_source(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dag_sourceContext dag_source() {
		Dag_sourceContext _localctx = new Dag_sourceContext(Context, State);
		EnterRule(_localctx, 306, RULE_dag_source);
		try {
			State = 1378;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Integer:
			case Lower_word:
			case Single_quoted:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1376; name();
				}
				break;
			case T__26:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1377; inference_record();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inference_recordContext : ParserRuleContext {
		public Inference_ruleContext inference_rule() {
			return GetRuleContext<Inference_ruleContext>(0);
		}
		public Useful_infoContext useful_info() {
			return GetRuleContext<Useful_infoContext>(0);
		}
		public Inference_parentsContext inference_parents() {
			return GetRuleContext<Inference_parentsContext>(0);
		}
		public Inference_recordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inference_record; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterInference_record(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitInference_record(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInference_record(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inference_recordContext inference_record() {
		Inference_recordContext _localctx = new Inference_recordContext(Context, State);
		EnterRule(_localctx, 308, RULE_inference_record);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1380; Match(T__26);
			State = 1381; inference_rule();
			State = 1382; Match(T__1);
			State = 1383; useful_info();
			State = 1384; Match(T__1);
			State = 1385; inference_parents();
			State = 1386; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inference_ruleContext : ParserRuleContext {
		public Atomic_wordContext atomic_word() {
			return GetRuleContext<Atomic_wordContext>(0);
		}
		public Inference_ruleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inference_rule; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterInference_rule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitInference_rule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInference_rule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inference_ruleContext inference_rule() {
		Inference_ruleContext _localctx = new Inference_ruleContext(Context, State);
		EnterRule(_localctx, 310, RULE_inference_rule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1388; atomic_word();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inference_parentsContext : ParserRuleContext {
		public Parent_listContext parent_list() {
			return GetRuleContext<Parent_listContext>(0);
		}
		public Inference_parentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inference_parents; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterInference_parents(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitInference_parents(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInference_parents(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inference_parentsContext inference_parents() {
		Inference_parentsContext _localctx = new Inference_parentsContext(Context, State);
		EnterRule(_localctx, 312, RULE_inference_parents);
		try {
			State = 1395;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__16:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1390; Match(T__16);
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1391; Match(T__11);
				State = 1392; parent_list();
				State = 1393; Match(T__12);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parent_listContext : ParserRuleContext {
		public Parent_infoContext[] parent_info() {
			return GetRuleContexts<Parent_infoContext>();
		}
		public Parent_infoContext parent_info(int i) {
			return GetRuleContext<Parent_infoContext>(i);
		}
		public Parent_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parent_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterParent_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitParent_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParent_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parent_listContext parent_list() {
		Parent_listContext _localctx = new Parent_listContext(Context, State);
		EnterRule(_localctx, 314, RULE_parent_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1397; parent_info();
			State = 1402;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 1398; Match(T__1);
				State = 1399; parent_info();
				}
				}
				State = 1404;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parent_infoContext : ParserRuleContext {
		public SourceContext source() {
			return GetRuleContext<SourceContext>(0);
		}
		public Parent_detailsContext parent_details() {
			return GetRuleContext<Parent_detailsContext>(0);
		}
		public Parent_infoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parent_info; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterParent_info(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitParent_info(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParent_info(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parent_infoContext parent_info() {
		Parent_infoContext _localctx = new Parent_infoContext(Context, State);
		EnterRule(_localctx, 316, RULE_parent_info);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1405; source();
			State = 1407;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__13) {
				{
				State = 1406; parent_details();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parent_detailsContext : ParserRuleContext {
		public General_listContext general_list() {
			return GetRuleContext<General_listContext>(0);
		}
		public Parent_detailsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parent_details; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterParent_details(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitParent_details(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParent_details(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parent_detailsContext parent_details() {
		Parent_detailsContext _localctx = new Parent_detailsContext(Context, State);
		EnterRule(_localctx, 318, RULE_parent_details);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1409; Match(T__13);
			State = 1410; general_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Internal_sourceContext : ParserRuleContext {
		public Intro_typeContext intro_type() {
			return GetRuleContext<Intro_typeContext>(0);
		}
		public Optional_infoContext optional_info() {
			return GetRuleContext<Optional_infoContext>(0);
		}
		public Internal_sourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_internal_source; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterInternal_source(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitInternal_source(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInternal_source(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Internal_sourceContext internal_source() {
		Internal_sourceContext _localctx = new Internal_sourceContext(Context, State);
		EnterRule(_localctx, 320, RULE_internal_source);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1412; Match(T__27);
			State = 1413; intro_type();
			State = 1415;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 1414; optional_info();
				}
			}

			State = 1417; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Intro_typeContext : ParserRuleContext {
		public ITerminalNode Lower_word() { return GetToken(tptp_v7_0_0_0Parser.Lower_word, 0); }
		public Intro_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intro_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterIntro_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitIntro_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntro_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Intro_typeContext intro_type() {
		Intro_typeContext _localctx = new Intro_typeContext(Context, State);
		EnterRule(_localctx, 322, RULE_intro_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1419; Match(Lower_word);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class External_sourceContext : ParserRuleContext {
		public File_sourceContext file_source() {
			return GetRuleContext<File_sourceContext>(0);
		}
		public TheoryContext theory() {
			return GetRuleContext<TheoryContext>(0);
		}
		public Creator_sourceContext creator_source() {
			return GetRuleContext<Creator_sourceContext>(0);
		}
		public External_sourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_external_source; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterExternal_source(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitExternal_source(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternal_source(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public External_sourceContext external_source() {
		External_sourceContext _localctx = new External_sourceContext(Context, State);
		EnterRule(_localctx, 324, RULE_external_source);
		try {
			State = 1424;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__28:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1421; file_source();
				}
				break;
			case T__29:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1422; theory();
				}
				break;
			case T__30:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1423; creator_source();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_sourceContext : ParserRuleContext {
		public File_nameContext file_name() {
			return GetRuleContext<File_nameContext>(0);
		}
		public File_infoContext file_info() {
			return GetRuleContext<File_infoContext>(0);
		}
		public File_sourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_source; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterFile_source(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitFile_source(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile_source(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public File_sourceContext file_source() {
		File_sourceContext _localctx = new File_sourceContext(Context, State);
		EnterRule(_localctx, 326, RULE_file_source);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1426; Match(T__28);
			State = 1427; file_name();
			State = 1429;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 1428; file_info();
				}
			}

			State = 1431; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_infoContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public File_infoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_info; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterFile_info(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitFile_info(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile_info(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public File_infoContext file_info() {
		File_infoContext _localctx = new File_infoContext(Context, State);
		EnterRule(_localctx, 328, RULE_file_info);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1433; Match(T__1);
			State = 1434; name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TheoryContext : ParserRuleContext {
		public Theory_nameContext theory_name() {
			return GetRuleContext<Theory_nameContext>(0);
		}
		public Optional_infoContext optional_info() {
			return GetRuleContext<Optional_infoContext>(0);
		}
		public TheoryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_theory; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTheory(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTheory(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTheory(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TheoryContext theory() {
		TheoryContext _localctx = new TheoryContext(Context, State);
		EnterRule(_localctx, 330, RULE_theory);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1436; Match(T__29);
			State = 1437; theory_name();
			State = 1439;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 1438; optional_info();
				}
			}

			State = 1441; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Theory_nameContext : ParserRuleContext {
		public ITerminalNode Lower_word() { return GetToken(tptp_v7_0_0_0Parser.Lower_word, 0); }
		public Theory_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_theory_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterTheory_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitTheory_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTheory_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Theory_nameContext theory_name() {
		Theory_nameContext _localctx = new Theory_nameContext(Context, State);
		EnterRule(_localctx, 332, RULE_theory_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1443; Match(Lower_word);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Creator_sourceContext : ParserRuleContext {
		public Creator_nameContext creator_name() {
			return GetRuleContext<Creator_nameContext>(0);
		}
		public Optional_infoContext optional_info() {
			return GetRuleContext<Optional_infoContext>(0);
		}
		public Creator_sourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_creator_source; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterCreator_source(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitCreator_source(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreator_source(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Creator_sourceContext creator_source() {
		Creator_sourceContext _localctx = new Creator_sourceContext(Context, State);
		EnterRule(_localctx, 334, RULE_creator_source);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1445; Match(T__30);
			State = 1446; creator_name();
			State = 1448;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 1447; optional_info();
				}
			}

			State = 1450; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Creator_nameContext : ParserRuleContext {
		public Atomic_wordContext atomic_word() {
			return GetRuleContext<Atomic_wordContext>(0);
		}
		public Creator_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_creator_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterCreator_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitCreator_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreator_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Creator_nameContext creator_name() {
		Creator_nameContext _localctx = new Creator_nameContext(Context, State);
		EnterRule(_localctx, 336, RULE_creator_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1452; atomic_word();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Optional_infoContext : ParserRuleContext {
		public Useful_infoContext useful_info() {
			return GetRuleContext<Useful_infoContext>(0);
		}
		public Optional_infoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optional_info; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterOptional_info(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitOptional_info(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptional_info(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Optional_infoContext optional_info() {
		Optional_infoContext _localctx = new Optional_infoContext(Context, State);
		EnterRule(_localctx, 338, RULE_optional_info);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1454; Match(T__1);
			State = 1455; useful_info();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Useful_infoContext : ParserRuleContext {
		public Info_itemsContext info_items() {
			return GetRuleContext<Info_itemsContext>(0);
		}
		public General_listContext general_list() {
			return GetRuleContext<General_listContext>(0);
		}
		public Useful_infoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_useful_info; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterUseful_info(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitUseful_info(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUseful_info(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Useful_infoContext useful_info() {
		Useful_infoContext _localctx = new Useful_infoContext(Context, State);
		EnterRule(_localctx, 340, RULE_useful_info);
		try {
			State = 1463;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,109,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1457; Match(T__16);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1458; Match(T__11);
				State = 1459; info_items();
				State = 1460; Match(T__12);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1462; general_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Info_itemsContext : ParserRuleContext {
		public Info_itemContext[] info_item() {
			return GetRuleContexts<Info_itemContext>();
		}
		public Info_itemContext info_item(int i) {
			return GetRuleContext<Info_itemContext>(i);
		}
		public Info_itemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_info_items; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterInfo_items(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitInfo_items(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInfo_items(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Info_itemsContext info_items() {
		Info_itemsContext _localctx = new Info_itemsContext(Context, State);
		EnterRule(_localctx, 342, RULE_info_items);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1465; info_item();
			State = 1470;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 1466; Match(T__1);
				State = 1467; info_item();
				}
				}
				State = 1472;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Info_itemContext : ParserRuleContext {
		public Formula_itemContext formula_item() {
			return GetRuleContext<Formula_itemContext>(0);
		}
		public Inference_itemContext inference_item() {
			return GetRuleContext<Inference_itemContext>(0);
		}
		public General_functionContext general_function() {
			return GetRuleContext<General_functionContext>(0);
		}
		public Info_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_info_item; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterInfo_item(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitInfo_item(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInfo_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Info_itemContext info_item() {
		Info_itemContext _localctx = new Info_itemContext(Context, State);
		EnterRule(_localctx, 344, RULE_info_item);
		try {
			State = 1476;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,111,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1473; formula_item();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1474; inference_item();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1475; general_function();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Formula_itemContext : ParserRuleContext {
		public Description_itemContext description_item() {
			return GetRuleContext<Description_itemContext>(0);
		}
		public Iquote_itemContext iquote_item() {
			return GetRuleContext<Iquote_itemContext>(0);
		}
		public Formula_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formula_item; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterFormula_item(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitFormula_item(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormula_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Formula_itemContext formula_item() {
		Formula_itemContext _localctx = new Formula_itemContext(Context, State);
		EnterRule(_localctx, 346, RULE_formula_item);
		try {
			State = 1480;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__31:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1478; description_item();
				}
				break;
			case T__32:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1479; iquote_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Description_itemContext : ParserRuleContext {
		public Atomic_wordContext atomic_word() {
			return GetRuleContext<Atomic_wordContext>(0);
		}
		public Description_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_description_item; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterDescription_item(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitDescription_item(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescription_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Description_itemContext description_item() {
		Description_itemContext _localctx = new Description_itemContext(Context, State);
		EnterRule(_localctx, 348, RULE_description_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1482; Match(T__31);
			State = 1483; atomic_word();
			State = 1484; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Iquote_itemContext : ParserRuleContext {
		public Atomic_wordContext atomic_word() {
			return GetRuleContext<Atomic_wordContext>(0);
		}
		public Iquote_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iquote_item; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterIquote_item(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitIquote_item(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIquote_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Iquote_itemContext iquote_item() {
		Iquote_itemContext _localctx = new Iquote_itemContext(Context, State);
		EnterRule(_localctx, 350, RULE_iquote_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1486; Match(T__32);
			State = 1487; atomic_word();
			State = 1488; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inference_itemContext : ParserRuleContext {
		public Inference_statusContext inference_status() {
			return GetRuleContext<Inference_statusContext>(0);
		}
		public Assumptions_recordContext assumptions_record() {
			return GetRuleContext<Assumptions_recordContext>(0);
		}
		public New_symbol_recordContext new_symbol_record() {
			return GetRuleContext<New_symbol_recordContext>(0);
		}
		public RefutationContext refutation() {
			return GetRuleContext<RefutationContext>(0);
		}
		public Inference_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inference_item; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterInference_item(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitInference_item(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInference_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inference_itemContext inference_item() {
		Inference_itemContext _localctx = new Inference_itemContext(Context, State);
		EnterRule(_localctx, 352, RULE_inference_item);
		try {
			State = 1494;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__33:
			case Lower_word:
			case Single_quoted:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1490; inference_status();
				}
				break;
			case T__34:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1491; assumptions_record();
				}
				break;
			case T__36:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1492; new_symbol_record();
				}
				break;
			case T__35:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1493; refutation();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inference_statusContext : ParserRuleContext {
		public Status_valueContext status_value() {
			return GetRuleContext<Status_valueContext>(0);
		}
		public Inference_infoContext inference_info() {
			return GetRuleContext<Inference_infoContext>(0);
		}
		public Inference_statusContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inference_status; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterInference_status(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitInference_status(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInference_status(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inference_statusContext inference_status() {
		Inference_statusContext _localctx = new Inference_statusContext(Context, State);
		EnterRule(_localctx, 354, RULE_inference_status);
		try {
			State = 1501;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__33:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1496; Match(T__33);
				State = 1497; status_value();
				State = 1498; Match(T__10);
				}
				break;
			case Lower_word:
			case Single_quoted:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1500; inference_info();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Status_valueContext : ParserRuleContext {
		public ITerminalNode Lower_word() { return GetToken(tptp_v7_0_0_0Parser.Lower_word, 0); }
		public Status_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_status_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterStatus_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitStatus_value(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatus_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Status_valueContext status_value() {
		Status_valueContext _localctx = new Status_valueContext(Context, State);
		EnterRule(_localctx, 356, RULE_status_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1503; Match(Lower_word);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inference_infoContext : ParserRuleContext {
		public Inference_ruleContext inference_rule() {
			return GetRuleContext<Inference_ruleContext>(0);
		}
		public Atomic_wordContext atomic_word() {
			return GetRuleContext<Atomic_wordContext>(0);
		}
		public General_listContext general_list() {
			return GetRuleContext<General_listContext>(0);
		}
		public Inference_infoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inference_info; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterInference_info(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitInference_info(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInference_info(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inference_infoContext inference_info() {
		Inference_infoContext _localctx = new Inference_infoContext(Context, State);
		EnterRule(_localctx, 358, RULE_inference_info);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1505; inference_rule();
			State = 1506; Match(T__9);
			State = 1507; atomic_word();
			State = 1508; Match(T__1);
			State = 1509; general_list();
			State = 1510; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assumptions_recordContext : ParserRuleContext {
		public Name_listContext name_list() {
			return GetRuleContext<Name_listContext>(0);
		}
		public Assumptions_recordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assumptions_record; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterAssumptions_record(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitAssumptions_record(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssumptions_record(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assumptions_recordContext assumptions_record() {
		Assumptions_recordContext _localctx = new Assumptions_recordContext(Context, State);
		EnterRule(_localctx, 360, RULE_assumptions_record);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1512; Match(T__34);
			State = 1513; Match(T__11);
			State = 1514; name_list();
			State = 1515; Match(T__12);
			State = 1516; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RefutationContext : ParserRuleContext {
		public File_sourceContext file_source() {
			return GetRuleContext<File_sourceContext>(0);
		}
		public RefutationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_refutation; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterRefutation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitRefutation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRefutation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RefutationContext refutation() {
		RefutationContext _localctx = new RefutationContext(Context, State);
		EnterRule(_localctx, 362, RULE_refutation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1518; Match(T__35);
			State = 1519; file_source();
			State = 1520; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class New_symbol_recordContext : ParserRuleContext {
		public Atomic_wordContext atomic_word() {
			return GetRuleContext<Atomic_wordContext>(0);
		}
		public New_symbol_listContext new_symbol_list() {
			return GetRuleContext<New_symbol_listContext>(0);
		}
		public New_symbol_recordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_new_symbol_record; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterNew_symbol_record(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitNew_symbol_record(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNew_symbol_record(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public New_symbol_recordContext new_symbol_record() {
		New_symbol_recordContext _localctx = new New_symbol_recordContext(Context, State);
		EnterRule(_localctx, 364, RULE_new_symbol_record);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1522; Match(T__36);
			State = 1523; atomic_word();
			State = 1524; Match(T__1);
			State = 1525; Match(T__11);
			State = 1526; new_symbol_list();
			State = 1527; Match(T__12);
			State = 1528; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class New_symbol_listContext : ParserRuleContext {
		public Principal_symbolContext[] principal_symbol() {
			return GetRuleContexts<Principal_symbolContext>();
		}
		public Principal_symbolContext principal_symbol(int i) {
			return GetRuleContext<Principal_symbolContext>(i);
		}
		public New_symbol_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_new_symbol_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterNew_symbol_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitNew_symbol_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNew_symbol_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public New_symbol_listContext new_symbol_list() {
		New_symbol_listContext _localctx = new New_symbol_listContext(Context, State);
		EnterRule(_localctx, 366, RULE_new_symbol_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1530; principal_symbol();
			State = 1535;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 1531; Match(T__1);
				State = 1532; principal_symbol();
				}
				}
				State = 1537;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Principal_symbolContext : ParserRuleContext {
		public FunctorContext functor() {
			return GetRuleContext<FunctorContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public Principal_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_principal_symbol; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterPrincipal_symbol(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitPrincipal_symbol(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrincipal_symbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Principal_symbolContext principal_symbol() {
		Principal_symbolContext _localctx = new Principal_symbolContext(Context, State);
		EnterRule(_localctx, 368, RULE_principal_symbol);
		try {
			State = 1540;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Lower_word:
			case Single_quoted:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1538; functor();
				}
				break;
			case Upper_word:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1539; variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncludeContext : ParserRuleContext {
		public File_nameContext file_name() {
			return GetRuleContext<File_nameContext>(0);
		}
		public Formula_selectionContext formula_selection() {
			return GetRuleContext<Formula_selectionContext>(0);
		}
		public IncludeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_include; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterInclude(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitInclude(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclude(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncludeContext include() {
		IncludeContext _localctx = new IncludeContext(Context, State);
		EnterRule(_localctx, 370, RULE_include);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1542; Match(T__37);
			State = 1543; file_name();
			State = 1545;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 1544; formula_selection();
				}
			}

			State = 1547; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Formula_selectionContext : ParserRuleContext {
		public Name_listContext name_list() {
			return GetRuleContext<Name_listContext>(0);
		}
		public Formula_selectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formula_selection; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterFormula_selection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitFormula_selection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormula_selection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Formula_selectionContext formula_selection() {
		Formula_selectionContext _localctx = new Formula_selectionContext(Context, State);
		EnterRule(_localctx, 372, RULE_formula_selection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1549; Match(T__1);
			State = 1550; Match(T__11);
			State = 1551; name_list();
			State = 1552; Match(T__12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Name_listContext : ParserRuleContext {
		public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		public Name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterName_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitName_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Name_listContext name_list() {
		Name_listContext _localctx = new Name_listContext(Context, State);
		EnterRule(_localctx, 374, RULE_name_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1554; name();
			State = 1559;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 1555; Match(T__1);
				State = 1556; name();
				}
				}
				State = 1561;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class General_termContext : ParserRuleContext {
		public General_dataContext general_data() {
			return GetRuleContext<General_dataContext>(0);
		}
		public General_termContext general_term() {
			return GetRuleContext<General_termContext>(0);
		}
		public General_listContext general_list() {
			return GetRuleContext<General_listContext>(0);
		}
		public General_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_general_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterGeneral_term(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitGeneral_term(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneral_term(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public General_termContext general_term() {
		General_termContext _localctx = new General_termContext(Context, State);
		EnterRule(_localctx, 376, RULE_general_term);
		try {
			State = 1568;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,119,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1562; general_data();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1563; general_data();
				State = 1564; Match(T__13);
				State = 1565; general_term();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1567; general_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class General_dataContext : ParserRuleContext {
		public Atomic_wordContext atomic_word() {
			return GetRuleContext<Atomic_wordContext>(0);
		}
		public General_functionContext general_function() {
			return GetRuleContext<General_functionContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public ITerminalNode Distinct_object() { return GetToken(tptp_v7_0_0_0Parser.Distinct_object, 0); }
		public Formula_dataContext formula_data() {
			return GetRuleContext<Formula_dataContext>(0);
		}
		public General_dataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_general_data; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterGeneral_data(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitGeneral_data(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneral_data(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public General_dataContext general_data() {
		General_dataContext _localctx = new General_dataContext(Context, State);
		EnterRule(_localctx, 378, RULE_general_data);
		try {
			State = 1576;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,120,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1570; atomic_word();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1571; general_function();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1572; variable();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1573; number();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1574; Match(Distinct_object);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1575; formula_data();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class General_functionContext : ParserRuleContext {
		public Atomic_wordContext atomic_word() {
			return GetRuleContext<Atomic_wordContext>(0);
		}
		public General_termsContext general_terms() {
			return GetRuleContext<General_termsContext>(0);
		}
		public General_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_general_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterGeneral_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitGeneral_function(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneral_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public General_functionContext general_function() {
		General_functionContext _localctx = new General_functionContext(Context, State);
		EnterRule(_localctx, 380, RULE_general_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1578; atomic_word();
			State = 1579; Match(T__9);
			State = 1580; general_terms();
			State = 1581; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Formula_dataContext : ParserRuleContext {
		public Thf_formulaContext thf_formula() {
			return GetRuleContext<Thf_formulaContext>(0);
		}
		public Tff_formulaContext tff_formula() {
			return GetRuleContext<Tff_formulaContext>(0);
		}
		public Fof_formulaContext fof_formula() {
			return GetRuleContext<Fof_formulaContext>(0);
		}
		public Cnf_formulaContext cnf_formula() {
			return GetRuleContext<Cnf_formulaContext>(0);
		}
		public Fof_termContext fof_term() {
			return GetRuleContext<Fof_termContext>(0);
		}
		public Formula_dataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formula_data; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterFormula_data(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitFormula_data(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormula_data(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Formula_dataContext formula_data() {
		Formula_dataContext _localctx = new Formula_dataContext(Context, State);
		EnterRule(_localctx, 382, RULE_formula_data);
		try {
			State = 1603;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__38:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1583; Match(T__38);
				State = 1584; thf_formula();
				State = 1585; Match(T__10);
				}
				break;
			case T__39:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1587; Match(T__39);
				State = 1588; tff_formula();
				State = 1589; Match(T__10);
				}
				break;
			case T__40:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1591; Match(T__40);
				State = 1592; fof_formula();
				State = 1593; Match(T__10);
				}
				break;
			case T__41:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1595; Match(T__41);
				State = 1596; cnf_formula();
				State = 1597; Match(T__10);
				}
				break;
			case T__42:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1599; Match(T__42);
				State = 1600; fof_term();
				State = 1601; Match(T__10);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class General_listContext : ParserRuleContext {
		public General_termsContext general_terms() {
			return GetRuleContext<General_termsContext>(0);
		}
		public General_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_general_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterGeneral_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitGeneral_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneral_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public General_listContext general_list() {
		General_listContext _localctx = new General_listContext(Context, State);
		EnterRule(_localctx, 384, RULE_general_list);
		try {
			State = 1610;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__16:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1605; Match(T__16);
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1606; Match(T__11);
				State = 1607; general_terms();
				State = 1608; Match(T__12);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class General_termsContext : ParserRuleContext {
		public General_termContext[] general_term() {
			return GetRuleContexts<General_termContext>();
		}
		public General_termContext general_term(int i) {
			return GetRuleContext<General_termContext>(i);
		}
		public General_termsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_general_terms; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterGeneral_terms(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitGeneral_terms(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneral_terms(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public General_termsContext general_terms() {
		General_termsContext _localctx = new General_termsContext(Context, State);
		EnterRule(_localctx, 386, RULE_general_terms);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1612; general_term();
			State = 1617;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 1613; Match(T__1);
				State = 1614; general_term();
				}
				}
				State = 1619;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public Atomic_wordContext atomic_word() {
			return GetRuleContext<Atomic_wordContext>(0);
		}
		public ITerminalNode Integer() { return GetToken(tptp_v7_0_0_0Parser.Integer, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 388, RULE_name);
		try {
			State = 1622;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Lower_word:
			case Single_quoted:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1620; atomic_word();
				}
				break;
			case Integer:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1621; Match(Integer);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Atomic_wordContext : ParserRuleContext {
		public ITerminalNode Lower_word() { return GetToken(tptp_v7_0_0_0Parser.Lower_word, 0); }
		public ITerminalNode Single_quoted() { return GetToken(tptp_v7_0_0_0Parser.Single_quoted, 0); }
		public Atomic_wordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomic_word; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterAtomic_word(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitAtomic_word(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomic_word(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Atomic_wordContext atomic_word() {
		Atomic_wordContext _localctx = new Atomic_wordContext(Context, State);
		EnterRule(_localctx, 390, RULE_atomic_word);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1624;
			_la = TokenStream.LA(1);
			if ( !(_la==Lower_word || _la==Single_quoted) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Atomic_defined_wordContext : ParserRuleContext {
		public ITerminalNode Dollar_word() { return GetToken(tptp_v7_0_0_0Parser.Dollar_word, 0); }
		public Atomic_defined_wordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomic_defined_word; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterAtomic_defined_word(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitAtomic_defined_word(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomic_defined_word(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Atomic_defined_wordContext atomic_defined_word() {
		Atomic_defined_wordContext _localctx = new Atomic_defined_wordContext(Context, State);
		EnterRule(_localctx, 392, RULE_atomic_defined_word);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1626; Match(Dollar_word);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Atomic_system_wordContext : ParserRuleContext {
		public ITerminalNode Dollar_dollar_word() { return GetToken(tptp_v7_0_0_0Parser.Dollar_dollar_word, 0); }
		public Atomic_system_wordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomic_system_word; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterAtomic_system_word(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitAtomic_system_word(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomic_system_word(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Atomic_system_wordContext atomic_system_word() {
		Atomic_system_wordContext _localctx = new Atomic_system_wordContext(Context, State);
		EnterRule(_localctx, 394, RULE_atomic_system_word);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1628; Match(Dollar_dollar_word);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public ITerminalNode Integer() { return GetToken(tptp_v7_0_0_0Parser.Integer, 0); }
		public ITerminalNode Rational() { return GetToken(tptp_v7_0_0_0Parser.Rational, 0); }
		public ITerminalNode Real() { return GetToken(tptp_v7_0_0_0Parser.Real, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 396, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1630;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (Real - 74)) | (1L << (Rational - 74)) | (1L << (Integer - 74)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_nameContext : ParserRuleContext {
		public ITerminalNode Single_quoted() { return GetToken(tptp_v7_0_0_0Parser.Single_quoted, 0); }
		public File_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.EnterFile_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Itptp_v7_0_0_0Listener typedListener = listener as Itptp_v7_0_0_0Listener;
			if (typedListener != null) typedListener.ExitFile_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Itptp_v7_0_0_0Visitor<TResult> typedVisitor = visitor as Itptp_v7_0_0_0Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public File_nameContext file_name() {
		File_nameContext _localctx = new File_nameContext(Context, State);
		EnterRule(_localctx, 398, RULE_file_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1632; Match(Single_quoted);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 18: return thf_or_formula_sempred((Thf_or_formulaContext)_localctx, predIndex);
		case 19: return thf_and_formula_sempred((Thf_and_formulaContext)_localctx, predIndex);
		case 20: return thf_apply_formula_sempred((Thf_apply_formulaContext)_localctx, predIndex);
		case 41: return thf_xprod_type_sempred((Thf_xprod_typeContext)_localctx, predIndex);
		case 42: return thf_union_type_sempred((Thf_union_typeContext)_localctx, predIndex);
		case 53: return tff_or_formula_sempred((Tff_or_formulaContext)_localctx, predIndex);
		case 54: return tff_and_formula_sempred((Tff_and_formulaContext)_localctx, predIndex);
		case 84: return tff_xprod_type_sempred((Tff_xprod_typeContext)_localctx, predIndex);
		case 93: return fof_or_formula_sempred((Fof_or_formulaContext)_localctx, predIndex);
		case 94: return fof_and_formula_sempred((Fof_and_formulaContext)_localctx, predIndex);
		case 121: return cnf_disjunction_sempred((Cnf_disjunctionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool thf_or_formula_sempred(Thf_or_formulaContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool thf_and_formula_sempred(Thf_and_formulaContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool thf_apply_formula_sempred(Thf_apply_formulaContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 1);
		}
		return true;
	}
	private bool thf_xprod_type_sempred(Thf_xprod_typeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 1);
		}
		return true;
	}
	private bool thf_union_type_sempred(Thf_union_typeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 1);
		}
		return true;
	}
	private bool tff_or_formula_sempred(Tff_or_formulaContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 1);
		}
		return true;
	}
	private bool tff_and_formula_sempred(Tff_and_formulaContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(Context, 1);
		}
		return true;
	}
	private bool tff_xprod_type_sempred(Tff_xprod_typeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 1);
		}
		return true;
	}
	private bool fof_or_formula_sempred(Fof_or_formulaContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(Context, 1);
		}
		return true;
	}
	private bool fof_and_formula_sempred(Fof_and_formulaContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return Precpred(Context, 1);
		}
		return true;
	}
	private bool cnf_disjunction_sempred(Cnf_disjunctionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x65', '\x665', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x4', 'Y', '\t', 'Y', '\x4', 'Z', '\t', 'Z', '\x4', '[', '\t', '[', 
		'\x4', '\\', '\t', '\\', '\x4', ']', '\t', ']', '\x4', '^', '\t', '^', 
		'\x4', '_', '\t', '_', '\x4', '`', '\t', '`', '\x4', '\x61', '\t', '\x61', 
		'\x4', '\x62', '\t', '\x62', '\x4', '\x63', '\t', '\x63', '\x4', '\x64', 
		'\t', '\x64', '\x4', '\x65', '\t', '\x65', '\x4', '\x66', '\t', '\x66', 
		'\x4', 'g', '\t', 'g', '\x4', 'h', '\t', 'h', '\x4', 'i', '\t', 'i', '\x4', 
		'j', '\t', 'j', '\x4', 'k', '\t', 'k', '\x4', 'l', '\t', 'l', '\x4', 'm', 
		'\t', 'm', '\x4', 'n', '\t', 'n', '\x4', 'o', '\t', 'o', '\x4', 'p', '\t', 
		'p', '\x4', 'q', '\t', 'q', '\x4', 'r', '\t', 'r', '\x4', 's', '\t', 's', 
		'\x4', 't', '\t', 't', '\x4', 'u', '\t', 'u', '\x4', 'v', '\t', 'v', '\x4', 
		'w', '\t', 'w', '\x4', 'x', '\t', 'x', '\x4', 'y', '\t', 'y', '\x4', 'z', 
		'\t', 'z', '\x4', '{', '\t', '{', '\x4', '|', '\t', '|', '\x4', '}', '\t', 
		'}', '\x4', '~', '\t', '~', '\x4', '\x7F', '\t', '\x7F', '\x4', '\x80', 
		'\t', '\x80', '\x4', '\x81', '\t', '\x81', '\x4', '\x82', '\t', '\x82', 
		'\x4', '\x83', '\t', '\x83', '\x4', '\x84', '\t', '\x84', '\x4', '\x85', 
		'\t', '\x85', '\x4', '\x86', '\t', '\x86', '\x4', '\x87', '\t', '\x87', 
		'\x4', '\x88', '\t', '\x88', '\x4', '\x89', '\t', '\x89', '\x4', '\x8A', 
		'\t', '\x8A', '\x4', '\x8B', '\t', '\x8B', '\x4', '\x8C', '\t', '\x8C', 
		'\x4', '\x8D', '\t', '\x8D', '\x4', '\x8E', '\t', '\x8E', '\x4', '\x8F', 
		'\t', '\x8F', '\x4', '\x90', '\t', '\x90', '\x4', '\x91', '\t', '\x91', 
		'\x4', '\x92', '\t', '\x92', '\x4', '\x93', '\t', '\x93', '\x4', '\x94', 
		'\t', '\x94', '\x4', '\x95', '\t', '\x95', '\x4', '\x96', '\t', '\x96', 
		'\x4', '\x97', '\t', '\x97', '\x4', '\x98', '\t', '\x98', '\x4', '\x99', 
		'\t', '\x99', '\x4', '\x9A', '\t', '\x9A', '\x4', '\x9B', '\t', '\x9B', 
		'\x4', '\x9C', '\t', '\x9C', '\x4', '\x9D', '\t', '\x9D', '\x4', '\x9E', 
		'\t', '\x9E', '\x4', '\x9F', '\t', '\x9F', '\x4', '\xA0', '\t', '\xA0', 
		'\x4', '\xA1', '\t', '\xA1', '\x4', '\xA2', '\t', '\xA2', '\x4', '\xA3', 
		'\t', '\xA3', '\x4', '\xA4', '\t', '\xA4', '\x4', '\xA5', '\t', '\xA5', 
		'\x4', '\xA6', '\t', '\xA6', '\x4', '\xA7', '\t', '\xA7', '\x4', '\xA8', 
		'\t', '\xA8', '\x4', '\xA9', '\t', '\xA9', '\x4', '\xAA', '\t', '\xAA', 
		'\x4', '\xAB', '\t', '\xAB', '\x4', '\xAC', '\t', '\xAC', '\x4', '\xAD', 
		'\t', '\xAD', '\x4', '\xAE', '\t', '\xAE', '\x4', '\xAF', '\t', '\xAF', 
		'\x4', '\xB0', '\t', '\xB0', '\x4', '\xB1', '\t', '\xB1', '\x4', '\xB2', 
		'\t', '\xB2', '\x4', '\xB3', '\t', '\xB3', '\x4', '\xB4', '\t', '\xB4', 
		'\x4', '\xB5', '\t', '\xB5', '\x4', '\xB6', '\t', '\xB6', '\x4', '\xB7', 
		'\t', '\xB7', '\x4', '\xB8', '\t', '\xB8', '\x4', '\xB9', '\t', '\xB9', 
		'\x4', '\xBA', '\t', '\xBA', '\x4', '\xBB', '\t', '\xBB', '\x4', '\xBC', 
		'\t', '\xBC', '\x4', '\xBD', '\t', '\xBD', '\x4', '\xBE', '\t', '\xBE', 
		'\x4', '\xBF', '\t', '\xBF', '\x4', '\xC0', '\t', '\xC0', '\x4', '\xC1', 
		'\t', '\xC1', '\x4', '\xC2', '\t', '\xC2', '\x4', '\xC3', '\t', '\xC3', 
		'\x4', '\xC4', '\t', '\xC4', '\x4', '\xC5', '\t', '\xC5', '\x4', '\xC6', 
		'\t', '\xC6', '\x4', '\xC7', '\t', '\xC7', '\x4', '\xC8', '\t', '\xC8', 
		'\x4', '\xC9', '\t', '\xC9', '\x3', '\x2', '\a', '\x2', '\x194', '\n', 
		'\x2', '\f', '\x2', '\xE', '\x2', '\x197', '\v', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x19D', '\n', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x1A6', '\n', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x1AF', '\n', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', 
		'\a', '\x1BC', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x5', '\b', '\x1C7', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x5', '\t', '\x1D2', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x5', '\n', '\x1DD', '\n', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x5', '\v', '\x1E8', '\n', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x5', '\f', '\x1F3', '\n', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x1FA', 
		'\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x5', 
		'\xF', '\x200', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x5', '\x10', '\x206', '\n', '\x10', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x5', '\x11', '\x20B', '\n', '\x11', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x5', '\x13', '\x214', '\n', '\x13', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\a', '\x14', '\x21E', '\n', '\x14', '\f', '\x14', 
		'\xE', '\x14', '\x221', '\v', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\a', '\x15', '\x22B', '\n', '\x15', '\f', '\x15', '\xE', '\x15', 
		'\x22E', '\v', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\a', 
		'\x16', '\x238', '\n', '\x16', '\f', '\x16', '\xE', '\x16', '\x23B', '\v', 
		'\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x5', '\x17', '\x247', '\n', '\x17', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\a', '\x19', '\x251', '\n', '\x19', '\f', '\x19', '\xE', 
		'\x19', '\x254', '\v', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x25B', '\n', '\x1A', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x26A', '\n', '\x1D', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x5', '\x1E', '\x27C', '\n', '\x1E', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x281', '\n', '\x1F', '\x3', ' ', 
		'\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', 
		'\x3', ' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', 
		'\x3', '!', '\x3', '\"', '\x3', '\"', '\x3', '#', '\x3', '#', '\x3', '#', 
		'\x3', '#', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', 
		'\x5', '$', '\x29C', '\n', '$', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', 
		'%', '\x3', '&', '\x3', '&', '\x3', '&', '\x5', '&', '\x2A5', '\n', '&', 
		'\x3', '\'', '\x3', '\'', '\x3', '(', '\x3', '(', '\x3', ')', '\x3', ')', 
		'\x3', ')', '\x5', ')', '\x2AE', '\n', ')', '\x3', '*', '\x3', '*', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x5', 
		'*', '\x2B8', '\n', '*', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', 
		'\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\a', '+', '\x2C2', '\n', 
		'+', '\f', '+', '\xE', '+', '\x2C5', '\v', '+', '\x3', ',', '\x3', ',', 
		'\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', 
		'\a', ',', '\x2CF', '\n', ',', '\f', ',', '\xE', ',', '\x2D2', '\v', ',', 
		'\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', 
		'\x3', '-', '\x3', '-', '\x5', '-', '\x2DC', '\n', '-', '\x3', '.', '\x3', 
		'.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', 
		'.', '\x3', '.', '\x3', '.', '\x5', '.', '\x2E8', '\n', '.', '\x3', '/', 
		'\x3', '/', '\x3', '/', '\a', '/', '\x2ED', '\n', '/', '\f', '/', '\xE', 
		'/', '\x2F0', '\v', '/', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', 
		'\x2F4', '\n', '\x30', '\x3', '\x31', '\x3', '\x31', '\x3', '\x32', '\x3', 
		'\x32', '\x3', '\x32', '\x5', '\x32', '\x2FB', '\n', '\x32', '\x3', '\x33', 
		'\x3', '\x33', '\x3', '\x33', '\x5', '\x33', '\x300', '\n', '\x33', '\x3', 
		'\x34', '\x3', '\x34', '\x5', '\x34', '\x304', '\n', '\x34', '\x3', '\x35', 
		'\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x36', '\x3', '\x36', 
		'\x5', '\x36', '\x30C', '\n', '\x36', '\x3', '\x37', '\x3', '\x37', '\x3', 
		'\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', 
		'\x37', '\a', '\x37', '\x316', '\n', '\x37', '\f', '\x37', '\xE', '\x37', 
		'\x319', '\v', '\x37', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', 
		'\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\a', 
		'\x38', '\x323', '\n', '\x38', '\f', '\x38', '\xE', '\x38', '\x326', '\v', 
		'\x38', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', 
		'\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x5', 
		'\x39', '\x331', '\n', '\x39', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', 
		':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ';', '\x3', ';', '\x3', 
		';', '\a', ';', '\x33D', '\n', ';', '\f', ';', '\xE', ';', '\x340', '\v', 
		';', '\x3', '<', '\x3', '<', '\x5', '<', '\x344', '\n', '<', '\x3', '=', 
		'\x3', '=', '\x3', '=', '\x3', '=', '\x3', '>', '\x3', '>', '\x3', '>', 
		'\x3', '>', '\x5', '>', '\x34E', '\n', '>', '\x3', '?', '\x3', '?', '\x3', 
		'@', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', 
		'@', '\x3', '@', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', 
		'\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', 
		'\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x5', '\x41', '\x366', '\n', 
		'\x41', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', 
		'\x42', '\x5', '\x42', '\x36D', '\n', '\x42', '\x3', '\x43', '\x3', '\x43', 
		'\x3', '\x43', '\a', '\x43', '\x372', '\n', '\x43', '\f', '\x43', '\xE', 
		'\x43', '\x375', '\v', '\x43', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', 
		'\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', 
		'\x5', '\x44', '\x37F', '\n', '\x44', '\x3', '\x45', '\x3', '\x45', '\x3', 
		'\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', 
		'\x45', '\x5', '\x45', '\x389', '\n', '\x45', '\x3', '\x46', '\x3', '\x46', 
		'\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x5', '\x46', '\x390', '\n', 
		'\x46', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\a', 'G', '\x395', '\n', 
		'G', '\f', 'G', '\xE', 'G', '\x398', '\v', 'G', '\x3', 'H', '\x3', 'H', 
		'\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', 
		'\x5', 'H', '\x3A2', '\n', 'H', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 
		'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x5', 'I', '\x3AC', 
		'\n', 'I', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', 
		'\x3', 'J', '\x3', 'J', '\x3', 'J', '\x5', 'J', '\x3B6', '\n', 'J', '\x3', 
		'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x5', 'K', '\x3BD', 
		'\n', 'K', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\a', 'L', '\x3C2', '\n', 
		'L', '\f', 'L', '\xE', 'L', '\x3C5', '\v', 'L', '\x3', 'M', '\x3', 'M', 
		'\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', 
		'\x5', 'M', '\x3CF', '\n', 'M', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\x3', 
		'N', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 
		'O', '\x3', 'O', '\x5', 'O', '\x3DC', '\n', 'O', '\x3', 'P', '\x3', 'P', 
		'\x3', 'P', '\x3', 'P', '\x3', 'P', '\x3', 'P', '\x3', 'P', '\x3', 'Q', 
		'\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x5', 'Q', '\x3EA', '\n', 
		'Q', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x5', 
		'R', '\x3F1', '\n', 'R', '\x3', 'S', '\x3', 'S', '\x3', 'S', '\x3', 'S', 
		'\x3', 'S', '\x3', 'S', '\x3', 'S', '\x3', 'S', '\x5', 'S', '\x3FB', '\n', 
		'S', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\a', 'T', '\x400', '\n', 'T', 
		'\f', 'T', '\xE', 'T', '\x403', '\v', 'T', '\x3', 'U', '\x3', 'U', '\x3', 
		'U', '\x3', 'U', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 
		'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\a', 'V', '\x411', '\n', 'V', 
		'\f', 'V', '\xE', 'V', '\x414', '\v', 'V', '\x3', 'W', '\x3', 'W', '\x5', 
		'W', '\x418', '\n', 'W', '\x3', 'X', '\x3', 'X', '\x5', 'X', '\x41C', 
		'\n', 'X', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', 
		'\x3', 'Y', '\x3', 'Y', '\x3', 'Z', '\x3', 'Z', '\x5', 'Z', '\x427', '\n', 
		'Z', '\x3', '[', '\x3', '[', '\x5', '[', '\x42B', '\n', '[', '\x3', '\\', 
		'\x3', '\\', '\x5', '\\', '\x42F', '\n', '\\', '\x3', ']', '\x3', ']', 
		'\x3', ']', '\x3', ']', '\x3', '^', '\x3', '^', '\x5', '^', '\x437', '\n', 
		'^', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', 
		'_', '\x3', '_', '\x3', '_', '\a', '_', '\x441', '\n', '_', '\f', '_', 
		'\xE', '_', '\x444', '\v', '_', '\x3', '`', '\x3', '`', '\x3', '`', '\x3', 
		'`', '\x3', '`', '\x3', '`', '\x3', '`', '\x3', '`', '\a', '`', '\x44E', 
		'\n', '`', '\f', '`', '\xE', '`', '\x451', '\v', '`', '\x3', '\x61', '\x3', 
		'\x61', '\x3', '\x61', '\x3', '\x61', '\x3', '\x61', '\x3', '\x61', '\x3', 
		'\x61', '\x5', '\x61', '\x45A', '\n', '\x61', '\x3', '\x62', '\x3', '\x62', 
		'\x3', '\x62', '\x3', '\x62', '\x3', '\x62', '\x3', '\x62', '\x3', '\x62', 
		'\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\a', '\x63', '\x466', '\n', 
		'\x63', '\f', '\x63', '\xE', '\x63', '\x469', '\v', '\x63', '\x3', '\x64', 
		'\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x5', '\x64', '\x46F', '\n', 
		'\x64', '\x3', '\x65', '\x3', '\x65', '\x3', '\x65', '\x3', '\x65', '\x3', 
		'\x66', '\x3', '\x66', '\x3', '\x66', '\x5', '\x66', '\x478', '\n', '\x66', 
		'\x3', 'g', '\x3', 'g', '\x3', 'h', '\x3', 'h', '\x5', 'h', '\x47E', '\n', 
		'h', '\x3', 'i', '\x3', 'i', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x3', 
		'j', '\x3', 'k', '\x3', 'k', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 
		'l', '\x3', 'l', '\x3', 'l', '\x5', 'l', '\x48E', '\n', 'l', '\x3', 'm', 
		'\x3', 'm', '\x5', 'm', '\x492', '\n', 'm', '\x3', 'n', '\x3', 'n', '\x3', 
		'o', '\x3', 'o', '\x3', 'o', '\x3', 'o', '\x3', 'o', '\x3', 'o', '\x5', 
		'o', '\x49C', '\n', 'o', '\x3', 'p', '\x3', 'p', '\x3', 'p', '\x3', 'p', 
		'\x3', 'p', '\x3', 'p', '\x5', 'p', '\x4A4', '\n', 'p', '\x3', 'q', '\x3', 
		'q', '\x3', 'q', '\a', 'q', '\x4A9', '\n', 'q', '\f', 'q', '\xE', 'q', 
		'\x4AC', '\v', 'q', '\x3', 'r', '\x3', 'r', '\x3', 'r', '\x3', 'r', '\x3', 
		'r', '\x5', 'r', '\x4B3', '\n', 'r', '\x3', 's', '\x3', 's', '\x3', 's', 
		'\x5', 's', '\x4B8', '\n', 's', '\x3', 't', '\x3', 't', '\x3', 't', '\x3', 
		't', '\x3', 't', '\x3', 't', '\x3', 't', '\x3', 't', '\x3', 'u', '\x3', 
		'u', '\x3', 'u', '\x3', 'u', '\x3', 'u', '\x3', 'u', '\x3', 'u', '\x3', 
		'u', '\x3', 'u', '\x3', 'u', '\x3', 'u', '\x3', 'u', '\x5', 'u', '\x4CE', 
		'\n', 'u', '\x3', 'v', '\x3', 'v', '\x3', 'v', '\x3', 'v', '\x3', 'v', 
		'\x5', 'v', '\x4D5', '\n', 'v', '\x3', 'w', '\x3', 'w', '\x3', 'w', '\x3', 
		'w', '\x3', 'w', '\x3', 'w', '\x3', 'w', '\x3', 'w', '\x5', 'w', '\x4DF', 
		'\n', 'w', '\x3', 'x', '\x3', 'x', '\x3', 'x', '\x3', 'x', '\x3', 'x', 
		'\x5', 'x', '\x4E6', '\n', 'x', '\x3', 'y', '\x3', 'y', '\x3', 'y', '\a', 
		'y', '\x4EB', '\n', 'y', '\f', 'y', '\xE', 'y', '\x4EE', '\v', 'y', '\x3', 
		'z', '\x3', 'z', '\x3', 'z', '\x3', 'z', '\x3', 'z', '\x5', 'z', '\x4F5', 
		'\n', 'z', '\x3', '{', '\x3', '{', '\x3', '{', '\x3', '{', '\x3', '{', 
		'\x3', '{', '\a', '{', '\x4FD', '\n', '{', '\f', '{', '\xE', '{', '\x500', 
		'\v', '{', '\x3', '|', '\x3', '|', '\x3', '|', '\x3', '|', '\x5', '|', 
		'\x506', '\n', '|', '\x3', '}', '\x3', '}', '\x3', '}', '\x5', '}', '\x50B', 
		'\n', '}', '\x3', '~', '\x3', '~', '\x3', '\x7F', '\x3', '\x7F', '\x3', 
		'\x80', '\x3', '\x80', '\x3', '\x80', '\x3', '\x80', '\x5', '\x80', '\x515', 
		'\n', '\x80', '\x3', '\x81', '\x3', '\x81', '\x5', '\x81', '\x519', '\n', 
		'\x81', '\x3', '\x82', '\x3', '\x82', '\x3', '\x83', '\x3', '\x83', '\x5', 
		'\x83', '\x51F', '\n', '\x83', '\x3', '\x84', '\x3', '\x84', '\x3', '\x85', 
		'\x3', '\x85', '\x3', '\x86', '\x3', '\x86', '\x3', '\x87', '\x3', '\x87', 
		'\x3', '\x88', '\x3', '\x88', '\x3', '\x89', '\x3', '\x89', '\x3', '\x8A', 
		'\x3', '\x8A', '\x3', '\x8B', '\x3', '\x8B', '\x3', '\x8C', '\x3', '\x8C', 
		'\x5', '\x8C', '\x533', '\n', '\x8C', '\x3', '\x8D', '\x3', '\x8D', '\x5', 
		'\x8D', '\x537', '\n', '\x8D', '\x3', '\x8E', '\x3', '\x8E', '\x3', '\x8F', 
		'\x3', '\x8F', '\x3', '\x90', '\x3', '\x90', '\x3', '\x91', '\x3', '\x91', 
		'\x3', '\x92', '\x3', '\x92', '\x3', '\x93', '\x3', '\x93', '\x3', '\x94', 
		'\x3', '\x94', '\x3', '\x95', '\x3', '\x95', '\x3', '\x96', '\x3', '\x96', 
		'\x3', '\x97', '\x3', '\x97', '\x5', '\x97', '\x54D', '\n', '\x97', '\x3', 
		'\x98', '\x3', '\x98', '\x3', '\x99', '\x3', '\x99', '\x3', '\x99', '\x3', 
		'\x99', '\x3', '\x99', '\x3', '\x99', '\x3', '\x99', '\x3', '\x99', '\x5', 
		'\x99', '\x559', '\n', '\x99', '\x3', '\x9A', '\x3', '\x9A', '\x3', '\x9A', 
		'\a', '\x9A', '\x55E', '\n', '\x9A', '\f', '\x9A', '\xE', '\x9A', '\x561', 
		'\v', '\x9A', '\x3', '\x9B', '\x3', '\x9B', '\x5', '\x9B', '\x565', '\n', 
		'\x9B', '\x3', '\x9C', '\x3', '\x9C', '\x3', '\x9C', '\x3', '\x9C', '\x3', 
		'\x9C', '\x3', '\x9C', '\x3', '\x9C', '\x3', '\x9C', '\x3', '\x9D', '\x3', 
		'\x9D', '\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x3', 
		'\x9E', '\x5', '\x9E', '\x576', '\n', '\x9E', '\x3', '\x9F', '\x3', '\x9F', 
		'\x3', '\x9F', '\a', '\x9F', '\x57B', '\n', '\x9F', '\f', '\x9F', '\xE', 
		'\x9F', '\x57E', '\v', '\x9F', '\x3', '\xA0', '\x3', '\xA0', '\x5', '\xA0', 
		'\x582', '\n', '\xA0', '\x3', '\xA1', '\x3', '\xA1', '\x3', '\xA1', '\x3', 
		'\xA2', '\x3', '\xA2', '\x3', '\xA2', '\x5', '\xA2', '\x58A', '\n', '\xA2', 
		'\x3', '\xA2', '\x3', '\xA2', '\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA4', 
		'\x3', '\xA4', '\x3', '\xA4', '\x5', '\xA4', '\x593', '\n', '\xA4', '\x3', 
		'\xA5', '\x3', '\xA5', '\x3', '\xA5', '\x5', '\xA5', '\x598', '\n', '\xA5', 
		'\x3', '\xA5', '\x3', '\xA5', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', 
		'\x3', '\xA7', '\x3', '\xA7', '\x3', '\xA7', '\x5', '\xA7', '\x5A2', '\n', 
		'\xA7', '\x3', '\xA7', '\x3', '\xA7', '\x3', '\xA8', '\x3', '\xA8', '\x3', 
		'\xA9', '\x3', '\xA9', '\x3', '\xA9', '\x5', '\xA9', '\x5AB', '\n', '\xA9', 
		'\x3', '\xA9', '\x3', '\xA9', '\x3', '\xAA', '\x3', '\xAA', '\x3', '\xAB', 
		'\x3', '\xAB', '\x3', '\xAB', '\x3', '\xAC', '\x3', '\xAC', '\x3', '\xAC', 
		'\x3', '\xAC', '\x3', '\xAC', '\x3', '\xAC', '\x5', '\xAC', '\x5BA', '\n', 
		'\xAC', '\x3', '\xAD', '\x3', '\xAD', '\x3', '\xAD', '\a', '\xAD', '\x5BF', 
		'\n', '\xAD', '\f', '\xAD', '\xE', '\xAD', '\x5C2', '\v', '\xAD', '\x3', 
		'\xAE', '\x3', '\xAE', '\x3', '\xAE', '\x5', '\xAE', '\x5C7', '\n', '\xAE', 
		'\x3', '\xAF', '\x3', '\xAF', '\x5', '\xAF', '\x5CB', '\n', '\xAF', '\x3', 
		'\xB0', '\x3', '\xB0', '\x3', '\xB0', '\x3', '\xB0', '\x3', '\xB1', '\x3', 
		'\xB1', '\x3', '\xB1', '\x3', '\xB1', '\x3', '\xB2', '\x3', '\xB2', '\x3', 
		'\xB2', '\x3', '\xB2', '\x5', '\xB2', '\x5D9', '\n', '\xB2', '\x3', '\xB3', 
		'\x3', '\xB3', '\x3', '\xB3', '\x3', '\xB3', '\x3', '\xB3', '\x5', '\xB3', 
		'\x5E0', '\n', '\xB3', '\x3', '\xB4', '\x3', '\xB4', '\x3', '\xB5', '\x3', 
		'\xB5', '\x3', '\xB5', '\x3', '\xB5', '\x3', '\xB5', '\x3', '\xB5', '\x3', 
		'\xB5', '\x3', '\xB6', '\x3', '\xB6', '\x3', '\xB6', '\x3', '\xB6', '\x3', 
		'\xB6', '\x3', '\xB6', '\x3', '\xB7', '\x3', '\xB7', '\x3', '\xB7', '\x3', 
		'\xB7', '\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x3', 
		'\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB9', '\x3', 
		'\xB9', '\x3', '\xB9', '\a', '\xB9', '\x600', '\n', '\xB9', '\f', '\xB9', 
		'\xE', '\xB9', '\x603', '\v', '\xB9', '\x3', '\xBA', '\x3', '\xBA', '\x5', 
		'\xBA', '\x607', '\n', '\xBA', '\x3', '\xBB', '\x3', '\xBB', '\x3', '\xBB', 
		'\x5', '\xBB', '\x60C', '\n', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x3', 
		'\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', 
		'\xBD', '\x3', '\xBD', '\x3', '\xBD', '\a', '\xBD', '\x618', '\n', '\xBD', 
		'\f', '\xBD', '\xE', '\xBD', '\x61B', '\v', '\xBD', '\x3', '\xBE', '\x3', 
		'\xBE', '\x3', '\xBE', '\x3', '\xBE', '\x3', '\xBE', '\x3', '\xBE', '\x5', 
		'\xBE', '\x623', '\n', '\xBE', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', 
		'\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x5', '\xBF', '\x62B', '\n', 
		'\xBF', '\x3', '\xC0', '\x3', '\xC0', '\x3', '\xC0', '\x3', '\xC0', '\x3', 
		'\xC0', '\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x3', 
		'\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x3', 
		'\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x3', 
		'\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x3', 
		'\xC1', '\x5', '\xC1', '\x646', '\n', '\xC1', '\x3', '\xC2', '\x3', '\xC2', 
		'\x3', '\xC2', '\x3', '\xC2', '\x3', '\xC2', '\x5', '\xC2', '\x64D', '\n', 
		'\xC2', '\x3', '\xC3', '\x3', '\xC3', '\x3', '\xC3', '\a', '\xC3', '\x652', 
		'\n', '\xC3', '\f', '\xC3', '\xE', '\xC3', '\x655', '\v', '\xC3', '\x3', 
		'\xC4', '\x3', '\xC4', '\x5', '\xC4', '\x659', '\n', '\xC4', '\x3', '\xC5', 
		'\x3', '\xC5', '\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC7', '\x3', '\xC7', 
		'\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC9', '\x3', '\xC9', '\x3', '\xC9', 
		'\x2', '\r', '&', '(', '*', 'T', 'V', 'l', 'n', '\xAA', '\xBC', '\xBE', 
		'\xF4', '\xCA', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', 
		'&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', 
		'<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 
		'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 'h', 'j', 'l', 
		'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', '\x84', '\x86', 
		'\x88', '\x8A', '\x8C', '\x8E', '\x90', '\x92', '\x94', '\x96', '\x98', 
		'\x9A', '\x9C', '\x9E', '\xA0', '\xA2', '\xA4', '\xA6', '\xA8', '\xAA', 
		'\xAC', '\xAE', '\xB0', '\xB2', '\xB4', '\xB6', '\xB8', '\xBA', '\xBC', 
		'\xBE', '\xC0', '\xC2', '\xC4', '\xC6', '\xC8', '\xCA', '\xCC', '\xCE', 
		'\xD0', '\xD2', '\xD4', '\xD6', '\xD8', '\xDA', '\xDC', '\xDE', '\xE0', 
		'\xE2', '\xE4', '\xE6', '\xE8', '\xEA', '\xEC', '\xEE', '\xF0', '\xF2', 
		'\xF4', '\xF6', '\xF8', '\xFA', '\xFC', '\xFE', '\x100', '\x102', '\x104', 
		'\x106', '\x108', '\x10A', '\x10C', '\x10E', '\x110', '\x112', '\x114', 
		'\x116', '\x118', '\x11A', '\x11C', '\x11E', '\x120', '\x122', '\x124', 
		'\x126', '\x128', '\x12A', '\x12C', '\x12E', '\x130', '\x132', '\x134', 
		'\x136', '\x138', '\x13A', '\x13C', '\x13E', '\x140', '\x142', '\x144', 
		'\x146', '\x148', '\x14A', '\x14C', '\x14E', '\x150', '\x152', '\x154', 
		'\x156', '\x158', '\x15A', '\x15C', '\x15E', '\x160', '\x162', '\x164', 
		'\x166', '\x168', '\x16A', '\x16C', '\x16E', '\x170', '\x172', '\x174', 
		'\x176', '\x178', '\x17A', '\x17C', '\x17E', '\x180', '\x182', '\x184', 
		'\x186', '\x188', '\x18A', '\x18C', '\x18E', '\x190', '\x2', '\v', '\x5', 
		'\x2', '?', '?', '\x41', '\x41', '\x43', '\x43', '\x4', '\x2', '\x38', 
		'\x38', '=', '=', '\a', '\x2', '\x37', '\x37', '<', '<', '@', '@', '\x42', 
		'\x42', '\x44', '\x44', '\x4', '\x2', ';', ';', '>', '>', '\x3', '\x2', 
		'\x30', '\x35', '\x3', '\x2', '.', '/', '\x4', '\x2', ':', ':', '\x46', 
		'\x46', '\x3', '\x2', '`', '\x61', '\x5', '\x2', 'L', 'L', 'O', 'O', 'R', 
		'R', '\x2', '\x655', '\x2', '\x195', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'\x19C', '\x3', '\x2', '\x2', '\x2', '\x6', '\x1A5', '\x3', '\x2', '\x2', 
		'\x2', '\b', '\x1A7', '\x3', '\x2', '\x2', '\x2', '\n', '\x1B2', '\x3', 
		'\x2', '\x2', '\x2', '\f', '\x1B4', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'\x1BF', '\x3', '\x2', '\x2', '\x2', '\x10', '\x1CA', '\x3', '\x2', '\x2', 
		'\x2', '\x12', '\x1D5', '\x3', '\x2', '\x2', '\x2', '\x14', '\x1E0', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\x1EB', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'\x1F6', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x1FB', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '\x1FF', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x205', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\x20A', '\x3', '\x2', '\x2', '\x2', '\"', '\x20C', 
		'\x3', '\x2', '\x2', '\x2', '$', '\x213', '\x3', '\x2', '\x2', '\x2', 
		'&', '\x215', '\x3', '\x2', '\x2', '\x2', '(', '\x222', '\x3', '\x2', 
		'\x2', '\x2', '*', '\x22F', '\x3', '\x2', '\x2', '\x2', ',', '\x246', 
		'\x3', '\x2', '\x2', '\x2', '.', '\x248', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x24B', '\x3', '\x2', '\x2', '\x2', '\x32', '\x25A', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x25C', '\x3', '\x2', '\x2', '\x2', '\x36', '\x260', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x269', '\x3', '\x2', '\x2', '\x2', 
		':', '\x27B', '\x3', '\x2', '\x2', '\x2', '<', '\x280', '\x3', '\x2', 
		'\x2', '\x2', '>', '\x282', '\x3', '\x2', '\x2', '\x2', '@', '\x28A', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x290', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x292', '\x3', '\x2', '\x2', '\x2', '\x46', '\x29B', '\x3', '\x2', 
		'\x2', '\x2', 'H', '\x29D', '\x3', '\x2', '\x2', '\x2', 'J', '\x2A4', 
		'\x3', '\x2', '\x2', '\x2', 'L', '\x2A6', '\x3', '\x2', '\x2', '\x2', 
		'N', '\x2A8', '\x3', '\x2', '\x2', '\x2', 'P', '\x2AD', '\x3', '\x2', 
		'\x2', '\x2', 'R', '\x2B7', '\x3', '\x2', '\x2', '\x2', 'T', '\x2B9', 
		'\x3', '\x2', '\x2', '\x2', 'V', '\x2C6', '\x3', '\x2', '\x2', '\x2', 
		'X', '\x2DB', '\x3', '\x2', '\x2', '\x2', 'Z', '\x2E7', '\x3', '\x2', 
		'\x2', '\x2', '\\', '\x2E9', '\x3', '\x2', '\x2', '\x2', '^', '\x2F3', 
		'\x3', '\x2', '\x2', '\x2', '`', '\x2F5', '\x3', '\x2', '\x2', '\x2', 
		'\x62', '\x2FA', '\x3', '\x2', '\x2', '\x2', '\x64', '\x2FF', '\x3', '\x2', 
		'\x2', '\x2', '\x66', '\x303', '\x3', '\x2', '\x2', '\x2', 'h', '\x305', 
		'\x3', '\x2', '\x2', '\x2', 'j', '\x30B', '\x3', '\x2', '\x2', '\x2', 
		'l', '\x30D', '\x3', '\x2', '\x2', '\x2', 'n', '\x31A', '\x3', '\x2', 
		'\x2', '\x2', 'p', '\x330', '\x3', '\x2', '\x2', '\x2', 'r', '\x332', 
		'\x3', '\x2', '\x2', '\x2', 't', '\x339', '\x3', '\x2', '\x2', '\x2', 
		'v', '\x343', '\x3', '\x2', '\x2', '\x2', 'x', '\x345', '\x3', '\x2', 
		'\x2', '\x2', 'z', '\x34D', '\x3', '\x2', '\x2', '\x2', '|', '\x34F', 
		'\x3', '\x2', '\x2', '\x2', '~', '\x351', '\x3', '\x2', '\x2', '\x2', 
		'\x80', '\x365', '\x3', '\x2', '\x2', '\x2', '\x82', '\x36C', '\x3', '\x2', 
		'\x2', '\x2', '\x84', '\x36E', '\x3', '\x2', '\x2', '\x2', '\x86', '\x37E', 
		'\x3', '\x2', '\x2', '\x2', '\x88', '\x388', '\x3', '\x2', '\x2', '\x2', 
		'\x8A', '\x38F', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x391', '\x3', '\x2', 
		'\x2', '\x2', '\x8E', '\x3A1', '\x3', '\x2', '\x2', '\x2', '\x90', '\x3AB', 
		'\x3', '\x2', '\x2', '\x2', '\x92', '\x3B5', '\x3', '\x2', '\x2', '\x2', 
		'\x94', '\x3BC', '\x3', '\x2', '\x2', '\x2', '\x96', '\x3BE', '\x3', '\x2', 
		'\x2', '\x2', '\x98', '\x3CE', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x3D0', 
		'\x3', '\x2', '\x2', '\x2', '\x9C', '\x3DB', '\x3', '\x2', '\x2', '\x2', 
		'\x9E', '\x3DD', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x3E9', '\x3', '\x2', 
		'\x2', '\x2', '\xA2', '\x3F0', '\x3', '\x2', '\x2', '\x2', '\xA4', '\x3FA', 
		'\x3', '\x2', '\x2', '\x2', '\xA6', '\x3FC', '\x3', '\x2', '\x2', '\x2', 
		'\xA8', '\x404', '\x3', '\x2', '\x2', '\x2', '\xAA', '\x408', '\x3', '\x2', 
		'\x2', '\x2', '\xAC', '\x417', '\x3', '\x2', '\x2', '\x2', '\xAE', '\x41B', 
		'\x3', '\x2', '\x2', '\x2', '\xB0', '\x41D', '\x3', '\x2', '\x2', '\x2', 
		'\xB2', '\x426', '\x3', '\x2', '\x2', '\x2', '\xB4', '\x42A', '\x3', '\x2', 
		'\x2', '\x2', '\xB6', '\x42E', '\x3', '\x2', '\x2', '\x2', '\xB8', '\x430', 
		'\x3', '\x2', '\x2', '\x2', '\xBA', '\x436', '\x3', '\x2', '\x2', '\x2', 
		'\xBC', '\x438', '\x3', '\x2', '\x2', '\x2', '\xBE', '\x445', '\x3', '\x2', 
		'\x2', '\x2', '\xC0', '\x459', '\x3', '\x2', '\x2', '\x2', '\xC2', '\x45B', 
		'\x3', '\x2', '\x2', '\x2', '\xC4', '\x462', '\x3', '\x2', '\x2', '\x2', 
		'\xC6', '\x46E', '\x3', '\x2', '\x2', '\x2', '\xC8', '\x470', '\x3', '\x2', 
		'\x2', '\x2', '\xCA', '\x477', '\x3', '\x2', '\x2', '\x2', '\xCC', '\x479', 
		'\x3', '\x2', '\x2', '\x2', '\xCE', '\x47D', '\x3', '\x2', '\x2', '\x2', 
		'\xD0', '\x47F', '\x3', '\x2', '\x2', '\x2', '\xD2', '\x481', '\x3', '\x2', 
		'\x2', '\x2', '\xD4', '\x485', '\x3', '\x2', '\x2', '\x2', '\xD6', '\x48D', 
		'\x3', '\x2', '\x2', '\x2', '\xD8', '\x491', '\x3', '\x2', '\x2', '\x2', 
		'\xDA', '\x493', '\x3', '\x2', '\x2', '\x2', '\xDC', '\x49B', '\x3', '\x2', 
		'\x2', '\x2', '\xDE', '\x4A3', '\x3', '\x2', '\x2', '\x2', '\xE0', '\x4A5', 
		'\x3', '\x2', '\x2', '\x2', '\xE2', '\x4B2', '\x3', '\x2', '\x2', '\x2', 
		'\xE4', '\x4B7', '\x3', '\x2', '\x2', '\x2', '\xE6', '\x4B9', '\x3', '\x2', 
		'\x2', '\x2', '\xE8', '\x4CD', '\x3', '\x2', '\x2', '\x2', '\xEA', '\x4D4', 
		'\x3', '\x2', '\x2', '\x2', '\xEC', '\x4DE', '\x3', '\x2', '\x2', '\x2', 
		'\xEE', '\x4E5', '\x3', '\x2', '\x2', '\x2', '\xF0', '\x4E7', '\x3', '\x2', 
		'\x2', '\x2', '\xF2', '\x4F4', '\x3', '\x2', '\x2', '\x2', '\xF4', '\x4F6', 
		'\x3', '\x2', '\x2', '\x2', '\xF6', '\x505', '\x3', '\x2', '\x2', '\x2', 
		'\xF8', '\x50A', '\x3', '\x2', '\x2', '\x2', '\xFA', '\x50C', '\x3', '\x2', 
		'\x2', '\x2', '\xFC', '\x50E', '\x3', '\x2', '\x2', '\x2', '\xFE', '\x514', 
		'\x3', '\x2', '\x2', '\x2', '\x100', '\x518', '\x3', '\x2', '\x2', '\x2', 
		'\x102', '\x51A', '\x3', '\x2', '\x2', '\x2', '\x104', '\x51E', '\x3', 
		'\x2', '\x2', '\x2', '\x106', '\x520', '\x3', '\x2', '\x2', '\x2', '\x108', 
		'\x522', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x524', '\x3', '\x2', '\x2', 
		'\x2', '\x10C', '\x526', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x528', 
		'\x3', '\x2', '\x2', '\x2', '\x110', '\x52A', '\x3', '\x2', '\x2', '\x2', 
		'\x112', '\x52C', '\x3', '\x2', '\x2', '\x2', '\x114', '\x52E', '\x3', 
		'\x2', '\x2', '\x2', '\x116', '\x532', '\x3', '\x2', '\x2', '\x2', '\x118', 
		'\x536', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x538', '\x3', '\x2', '\x2', 
		'\x2', '\x11C', '\x53A', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x53C', 
		'\x3', '\x2', '\x2', '\x2', '\x120', '\x53E', '\x3', '\x2', '\x2', '\x2', 
		'\x122', '\x540', '\x3', '\x2', '\x2', '\x2', '\x124', '\x542', '\x3', 
		'\x2', '\x2', '\x2', '\x126', '\x544', '\x3', '\x2', '\x2', '\x2', '\x128', 
		'\x546', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x548', '\x3', '\x2', '\x2', 
		'\x2', '\x12C', '\x54C', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x54E', 
		'\x3', '\x2', '\x2', '\x2', '\x130', '\x558', '\x3', '\x2', '\x2', '\x2', 
		'\x132', '\x55A', '\x3', '\x2', '\x2', '\x2', '\x134', '\x564', '\x3', 
		'\x2', '\x2', '\x2', '\x136', '\x566', '\x3', '\x2', '\x2', '\x2', '\x138', 
		'\x56E', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x575', '\x3', '\x2', '\x2', 
		'\x2', '\x13C', '\x577', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x57F', 
		'\x3', '\x2', '\x2', '\x2', '\x140', '\x583', '\x3', '\x2', '\x2', '\x2', 
		'\x142', '\x586', '\x3', '\x2', '\x2', '\x2', '\x144', '\x58D', '\x3', 
		'\x2', '\x2', '\x2', '\x146', '\x592', '\x3', '\x2', '\x2', '\x2', '\x148', 
		'\x594', '\x3', '\x2', '\x2', '\x2', '\x14A', '\x59B', '\x3', '\x2', '\x2', 
		'\x2', '\x14C', '\x59E', '\x3', '\x2', '\x2', '\x2', '\x14E', '\x5A5', 
		'\x3', '\x2', '\x2', '\x2', '\x150', '\x5A7', '\x3', '\x2', '\x2', '\x2', 
		'\x152', '\x5AE', '\x3', '\x2', '\x2', '\x2', '\x154', '\x5B0', '\x3', 
		'\x2', '\x2', '\x2', '\x156', '\x5B9', '\x3', '\x2', '\x2', '\x2', '\x158', 
		'\x5BB', '\x3', '\x2', '\x2', '\x2', '\x15A', '\x5C6', '\x3', '\x2', '\x2', 
		'\x2', '\x15C', '\x5CA', '\x3', '\x2', '\x2', '\x2', '\x15E', '\x5CC', 
		'\x3', '\x2', '\x2', '\x2', '\x160', '\x5D0', '\x3', '\x2', '\x2', '\x2', 
		'\x162', '\x5D8', '\x3', '\x2', '\x2', '\x2', '\x164', '\x5DF', '\x3', 
		'\x2', '\x2', '\x2', '\x166', '\x5E1', '\x3', '\x2', '\x2', '\x2', '\x168', 
		'\x5E3', '\x3', '\x2', '\x2', '\x2', '\x16A', '\x5EA', '\x3', '\x2', '\x2', 
		'\x2', '\x16C', '\x5F0', '\x3', '\x2', '\x2', '\x2', '\x16E', '\x5F4', 
		'\x3', '\x2', '\x2', '\x2', '\x170', '\x5FC', '\x3', '\x2', '\x2', '\x2', 
		'\x172', '\x606', '\x3', '\x2', '\x2', '\x2', '\x174', '\x608', '\x3', 
		'\x2', '\x2', '\x2', '\x176', '\x60F', '\x3', '\x2', '\x2', '\x2', '\x178', 
		'\x614', '\x3', '\x2', '\x2', '\x2', '\x17A', '\x622', '\x3', '\x2', '\x2', 
		'\x2', '\x17C', '\x62A', '\x3', '\x2', '\x2', '\x2', '\x17E', '\x62C', 
		'\x3', '\x2', '\x2', '\x2', '\x180', '\x645', '\x3', '\x2', '\x2', '\x2', 
		'\x182', '\x64C', '\x3', '\x2', '\x2', '\x2', '\x184', '\x64E', '\x3', 
		'\x2', '\x2', '\x2', '\x186', '\x658', '\x3', '\x2', '\x2', '\x2', '\x188', 
		'\x65A', '\x3', '\x2', '\x2', '\x2', '\x18A', '\x65C', '\x3', '\x2', '\x2', 
		'\x2', '\x18C', '\x65E', '\x3', '\x2', '\x2', '\x2', '\x18E', '\x660', 
		'\x3', '\x2', '\x2', '\x2', '\x190', '\x662', '\x3', '\x2', '\x2', '\x2', 
		'\x192', '\x194', '\x5', '\x4', '\x3', '\x2', '\x193', '\x192', '\x3', 
		'\x2', '\x2', '\x2', '\x194', '\x197', '\x3', '\x2', '\x2', '\x2', '\x195', 
		'\x193', '\x3', '\x2', '\x2', '\x2', '\x195', '\x196', '\x3', '\x2', '\x2', 
		'\x2', '\x196', '\x198', '\x3', '\x2', '\x2', '\x2', '\x197', '\x195', 
		'\x3', '\x2', '\x2', '\x2', '\x198', '\x199', '\a', '\x2', '\x2', '\x3', 
		'\x199', '\x3', '\x3', '\x2', '\x2', '\x2', '\x19A', '\x19D', '\x5', '\x6', 
		'\x4', '\x2', '\x19B', '\x19D', '\x5', '\x174', '\xBB', '\x2', '\x19C', 
		'\x19A', '\x3', '\x2', '\x2', '\x2', '\x19C', '\x19B', '\x3', '\x2', '\x2', 
		'\x2', '\x19D', '\x5', '\x3', '\x2', '\x2', '\x2', '\x19E', '\x1A6', '\x5', 
		'\f', '\a', '\x2', '\x19F', '\x1A6', '\x5', '\xE', '\b', '\x2', '\x1A0', 
		'\x1A6', '\x5', '\x10', '\t', '\x2', '\x1A1', '\x1A6', '\x5', '\x12', 
		'\n', '\x2', '\x1A2', '\x1A6', '\x5', '\x14', '\v', '\x2', '\x1A3', '\x1A6', 
		'\x5', '\x16', '\f', '\x2', '\x1A4', '\x1A6', '\x5', '\b', '\x5', '\x2', 
		'\x1A5', '\x19E', '\x3', '\x2', '\x2', '\x2', '\x1A5', '\x19F', '\x3', 
		'\x2', '\x2', '\x2', '\x1A5', '\x1A0', '\x3', '\x2', '\x2', '\x2', '\x1A5', 
		'\x1A1', '\x3', '\x2', '\x2', '\x2', '\x1A5', '\x1A2', '\x3', '\x2', '\x2', 
		'\x2', '\x1A5', '\x1A3', '\x3', '\x2', '\x2', '\x2', '\x1A5', '\x1A4', 
		'\x3', '\x2', '\x2', '\x2', '\x1A6', '\a', '\x3', '\x2', '\x2', '\x2', 
		'\x1A7', '\x1A8', '\a', '\x3', '\x2', '\x2', '\x1A8', '\x1A9', '\x5', 
		'\x186', '\xC4', '\x2', '\x1A9', '\x1AA', '\a', '\x4', '\x2', '\x2', '\x1AA', 
		'\x1AB', '\x5', '\x1A', '\xE', '\x2', '\x1AB', '\x1AC', '\a', '\x4', '\x2', 
		'\x2', '\x1AC', '\x1AE', '\x5', '\n', '\x6', '\x2', '\x1AD', '\x1AF', 
		'\x5', '\x18', '\r', '\x2', '\x1AE', '\x1AD', '\x3', '\x2', '\x2', '\x2', 
		'\x1AE', '\x1AF', '\x3', '\x2', '\x2', '\x2', '\x1AF', '\x1B0', '\x3', 
		'\x2', '\x2', '\x2', '\x1B0', '\x1B1', '\a', '\x5', '\x2', '\x2', '\x1B1', 
		'\t', '\x3', '\x2', '\x2', '\x2', '\x1B2', '\x1B3', '\x5', '\xB2', 'Z', 
		'\x2', '\x1B3', '\v', '\x3', '\x2', '\x2', '\x2', '\x1B4', '\x1B5', '\a', 
		'\x6', '\x2', '\x2', '\x1B5', '\x1B6', '\x5', '\x186', '\xC4', '\x2', 
		'\x1B6', '\x1B7', '\a', '\x4', '\x2', '\x2', '\x1B7', '\x1B8', '\x5', 
		'\x1A', '\xE', '\x2', '\x1B8', '\x1B9', '\a', '\x4', '\x2', '\x2', '\x1B9', 
		'\x1BB', '\x5', '\x1C', '\xF', '\x2', '\x1BA', '\x1BC', '\x5', '\x18', 
		'\r', '\x2', '\x1BB', '\x1BA', '\x3', '\x2', '\x2', '\x2', '\x1BB', '\x1BC', 
		'\x3', '\x2', '\x2', '\x2', '\x1BC', '\x1BD', '\x3', '\x2', '\x2', '\x2', 
		'\x1BD', '\x1BE', '\a', '\x5', '\x2', '\x2', '\x1BE', '\r', '\x3', '\x2', 
		'\x2', '\x2', '\x1BF', '\x1C0', '\a', '\a', '\x2', '\x2', '\x1C0', '\x1C1', 
		'\x5', '\x186', '\xC4', '\x2', '\x1C1', '\x1C2', '\a', '\x4', '\x2', '\x2', 
		'\x1C2', '\x1C3', '\x5', '\x1A', '\xE', '\x2', '\x1C3', '\x1C4', '\a', 
		'\x4', '\x2', '\x2', '\x1C4', '\x1C6', '\x5', '^', '\x30', '\x2', '\x1C5', 
		'\x1C7', '\x5', '\x18', '\r', '\x2', '\x1C6', '\x1C5', '\x3', '\x2', '\x2', 
		'\x2', '\x1C6', '\x1C7', '\x3', '\x2', '\x2', '\x2', '\x1C7', '\x1C8', 
		'\x3', '\x2', '\x2', '\x2', '\x1C8', '\x1C9', '\a', '\x5', '\x2', '\x2', 
		'\x1C9', '\xF', '\x3', '\x2', '\x2', '\x2', '\x1CA', '\x1CB', '\a', '\b', 
		'\x2', '\x2', '\x1CB', '\x1CC', '\x5', '\x186', '\xC4', '\x2', '\x1CC', 
		'\x1CD', '\a', '\x4', '\x2', '\x2', '\x1CD', '\x1CE', '\x5', '\x1A', '\xE', 
		'\x2', '\x1CE', '\x1CF', '\a', '\x4', '\x2', '\x2', '\x1CF', '\x1D1', 
		'\x5', '\x62', '\x32', '\x2', '\x1D0', '\x1D2', '\x5', '\x18', '\r', '\x2', 
		'\x1D1', '\x1D0', '\x3', '\x2', '\x2', '\x2', '\x1D1', '\x1D2', '\x3', 
		'\x2', '\x2', '\x2', '\x1D2', '\x1D3', '\x3', '\x2', '\x2', '\x2', '\x1D3', 
		'\x1D4', '\a', '\x5', '\x2', '\x2', '\x1D4', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\x1D5', '\x1D6', '\a', '\t', '\x2', '\x2', '\x1D6', '\x1D7', '\x5', 
		'\x186', '\xC4', '\x2', '\x1D7', '\x1D8', '\a', '\x4', '\x2', '\x2', '\x1D8', 
		'\x1D9', '\x5', '\x1A', '\xE', '\x2', '\x1D9', '\x1DA', '\a', '\x4', '\x2', 
		'\x2', '\x1DA', '\x1DC', '\x5', '\xAC', 'W', '\x2', '\x1DB', '\x1DD', 
		'\x5', '\x18', '\r', '\x2', '\x1DC', '\x1DB', '\x3', '\x2', '\x2', '\x2', 
		'\x1DC', '\x1DD', '\x3', '\x2', '\x2', '\x2', '\x1DD', '\x1DE', '\x3', 
		'\x2', '\x2', '\x2', '\x1DE', '\x1DF', '\a', '\x5', '\x2', '\x2', '\x1DF', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x1E0', '\x1E1', '\a', '\n', '\x2', 
		'\x2', '\x1E1', '\x1E2', '\x5', '\x186', '\xC4', '\x2', '\x1E2', '\x1E3', 
		'\a', '\x4', '\x2', '\x2', '\x1E3', '\x1E4', '\x5', '\x1A', '\xE', '\x2', 
		'\x1E4', '\x1E5', '\a', '\x4', '\x2', '\x2', '\x1E5', '\x1E7', '\x5', 
		'\xB2', 'Z', '\x2', '\x1E6', '\x1E8', '\x5', '\x18', '\r', '\x2', '\x1E7', 
		'\x1E6', '\x3', '\x2', '\x2', '\x2', '\x1E7', '\x1E8', '\x3', '\x2', '\x2', 
		'\x2', '\x1E8', '\x1E9', '\x3', '\x2', '\x2', '\x2', '\x1E9', '\x1EA', 
		'\a', '\x5', '\x2', '\x2', '\x1EA', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\x1EB', '\x1EC', '\a', '\v', '\x2', '\x2', '\x1EC', '\x1ED', '\x5', '\x186', 
		'\xC4', '\x2', '\x1ED', '\x1EE', '\a', '\x4', '\x2', '\x2', '\x1EE', '\x1EF', 
		'\x5', '\x1A', '\xE', '\x2', '\x1EF', '\x1F0', '\a', '\x4', '\x2', '\x2', 
		'\x1F0', '\x1F2', '\x5', '\xF2', 'z', '\x2', '\x1F1', '\x1F3', '\x5', 
		'\x18', '\r', '\x2', '\x1F2', '\x1F1', '\x3', '\x2', '\x2', '\x2', '\x1F2', 
		'\x1F3', '\x3', '\x2', '\x2', '\x2', '\x1F3', '\x1F4', '\x3', '\x2', '\x2', 
		'\x2', '\x1F4', '\x1F5', '\a', '\x5', '\x2', '\x2', '\x1F5', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\x1F6', '\x1F7', '\a', '\x4', '\x2', '\x2', '\x1F7', 
		'\x1F9', '\x5', '\x130', '\x99', '\x2', '\x1F8', '\x1FA', '\x5', '\x154', 
		'\xAB', '\x2', '\x1F9', '\x1F8', '\x3', '\x2', '\x2', '\x2', '\x1F9', 
		'\x1FA', '\x3', '\x2', '\x2', '\x2', '\x1FA', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x1FB', '\x1FC', '\a', '`', '\x2', '\x2', '\x1FC', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\x1FD', '\x200', '\x5', '\x1E', '\x10', '\x2', '\x1FE', 
		'\x200', '\x5', 'X', '-', '\x2', '\x1FF', '\x1FD', '\x3', '\x2', '\x2', 
		'\x2', '\x1FF', '\x1FE', '\x3', '\x2', '\x2', '\x2', '\x200', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\x201', '\x206', '\x5', ' ', '\x11', '\x2', 
		'\x202', '\x206', '\x5', ',', '\x17', '\x2', '\x203', '\x206', '\x5', 
		'\x44', '#', '\x2', '\x204', '\x206', '\x5', 'H', '%', '\x2', '\x205', 
		'\x201', '\x3', '\x2', '\x2', '\x2', '\x205', '\x202', '\x3', '\x2', '\x2', 
		'\x2', '\x205', '\x203', '\x3', '\x2', '\x2', '\x2', '\x205', '\x204', 
		'\x3', '\x2', '\x2', '\x2', '\x206', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\x207', '\x20B', '\x5', '\"', '\x12', '\x2', '\x208', '\x20B', '\x5', 
		'$', '\x13', '\x2', '\x209', '\x20B', '\x5', 'P', ')', '\x2', '\x20A', 
		'\x207', '\x3', '\x2', '\x2', '\x2', '\x20A', '\x208', '\x3', '\x2', '\x2', 
		'\x2', '\x20A', '\x209', '\x3', '\x2', '\x2', '\x2', '\x20B', '!', '\x3', 
		'\x2', '\x2', '\x2', '\x20C', '\x20D', '\x5', ',', '\x17', '\x2', '\x20D', 
		'\x20E', '\x5', '\xFE', '\x80', '\x2', '\x20E', '\x20F', '\x5', ',', '\x17', 
		'\x2', '\x20F', '#', '\x3', '\x2', '\x2', '\x2', '\x210', '\x214', '\x5', 
		'&', '\x14', '\x2', '\x211', '\x214', '\x5', '(', '\x15', '\x2', '\x212', 
		'\x214', '\x5', '*', '\x16', '\x2', '\x213', '\x210', '\x3', '\x2', '\x2', 
		'\x2', '\x213', '\x211', '\x3', '\x2', '\x2', '\x2', '\x213', '\x212', 
		'\x3', '\x2', '\x2', '\x2', '\x214', '%', '\x3', '\x2', '\x2', '\x2', 
		'\x215', '\x216', '\b', '\x14', '\x1', '\x2', '\x216', '\x217', '\x5', 
		',', '\x17', '\x2', '\x217', '\x218', '\a', '.', '\x2', '\x2', '\x218', 
		'\x219', '\x5', ',', '\x17', '\x2', '\x219', '\x21F', '\x3', '\x2', '\x2', 
		'\x2', '\x21A', '\x21B', '\f', '\x3', '\x2', '\x2', '\x21B', '\x21C', 
		'\a', '.', '\x2', '\x2', '\x21C', '\x21E', '\x5', ',', '\x17', '\x2', 
		'\x21D', '\x21A', '\x3', '\x2', '\x2', '\x2', '\x21E', '\x221', '\x3', 
		'\x2', '\x2', '\x2', '\x21F', '\x21D', '\x3', '\x2', '\x2', '\x2', '\x21F', 
		'\x220', '\x3', '\x2', '\x2', '\x2', '\x220', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\x221', '\x21F', '\x3', '\x2', '\x2', '\x2', '\x222', '\x223', 
		'\b', '\x15', '\x1', '\x2', '\x223', '\x224', '\x5', ',', '\x17', '\x2', 
		'\x224', '\x225', '\a', '/', '\x2', '\x2', '\x225', '\x226', '\x5', ',', 
		'\x17', '\x2', '\x226', '\x22C', '\x3', '\x2', '\x2', '\x2', '\x227', 
		'\x228', '\f', '\x3', '\x2', '\x2', '\x228', '\x229', '\a', '/', '\x2', 
		'\x2', '\x229', '\x22B', '\x5', ',', '\x17', '\x2', '\x22A', '\x227', 
		'\x3', '\x2', '\x2', '\x2', '\x22B', '\x22E', '\x3', '\x2', '\x2', '\x2', 
		'\x22C', '\x22A', '\x3', '\x2', '\x2', '\x2', '\x22C', '\x22D', '\x3', 
		'\x2', '\x2', '\x2', '\x22D', ')', '\x3', '\x2', '\x2', '\x2', '\x22E', 
		'\x22C', '\x3', '\x2', '\x2', '\x2', '\x22F', '\x230', '\b', '\x16', '\x1', 
		'\x2', '\x230', '\x231', '\x5', ',', '\x17', '\x2', '\x231', '\x232', 
		'\a', '\x45', '\x2', '\x2', '\x232', '\x233', '\x5', ',', '\x17', '\x2', 
		'\x233', '\x239', '\x3', '\x2', '\x2', '\x2', '\x234', '\x235', '\f', 
		'\x3', '\x2', '\x2', '\x235', '\x236', '\a', '\x45', '\x2', '\x2', '\x236', 
		'\x238', '\x5', ',', '\x17', '\x2', '\x237', '\x234', '\x3', '\x2', '\x2', 
		'\x2', '\x238', '\x23B', '\x3', '\x2', '\x2', '\x2', '\x239', '\x237', 
		'\x3', '\x2', '\x2', '\x2', '\x239', '\x23A', '\x3', '\x2', '\x2', '\x2', 
		'\x23A', '+', '\x3', '\x2', '\x2', '\x2', '\x23B', '\x239', '\x3', '\x2', 
		'\x2', '\x2', '\x23C', '\x247', '\x5', '.', '\x18', '\x2', '\x23D', '\x247', 
		'\x5', '\x36', '\x1C', '\x2', '\x23E', '\x247', '\x5', '\x38', '\x1D', 
		'\x2', '\x23F', '\x247', '\x5', '>', ' ', '\x2', '\x240', '\x247', '\x5', 
		'@', '!', '\x2', '\x241', '\x247', '\x5', 'Z', '.', '\x2', '\x242', '\x243', 
		'\a', '\f', '\x2', '\x2', '\x243', '\x244', '\x5', '\x1E', '\x10', '\x2', 
		'\x244', '\x245', '\a', '\r', '\x2', '\x2', '\x245', '\x247', '\x3', '\x2', 
		'\x2', '\x2', '\x246', '\x23C', '\x3', '\x2', '\x2', '\x2', '\x246', '\x23D', 
		'\x3', '\x2', '\x2', '\x2', '\x246', '\x23E', '\x3', '\x2', '\x2', '\x2', 
		'\x246', '\x23F', '\x3', '\x2', '\x2', '\x2', '\x246', '\x240', '\x3', 
		'\x2', '\x2', '\x2', '\x246', '\x241', '\x3', '\x2', '\x2', '\x2', '\x246', 
		'\x242', '\x3', '\x2', '\x2', '\x2', '\x247', '-', '\x3', '\x2', '\x2', 
		'\x2', '\x248', '\x249', '\x5', '\x30', '\x19', '\x2', '\x249', '\x24A', 
		'\x5', ',', '\x17', '\x2', '\x24A', '/', '\x3', '\x2', '\x2', '\x2', '\x24B', 
		'\x24C', '\x5', '\xF8', '}', '\x2', '\x24C', '\x24D', '\a', '\xE', '\x2', 
		'\x2', '\x24D', '\x252', '\x5', '\x32', '\x1A', '\x2', '\x24E', '\x24F', 
		'\a', '\x4', '\x2', '\x2', '\x24F', '\x251', '\x5', '\x32', '\x1A', '\x2', 
		'\x250', '\x24E', '\x3', '\x2', '\x2', '\x2', '\x251', '\x254', '\x3', 
		'\x2', '\x2', '\x2', '\x252', '\x250', '\x3', '\x2', '\x2', '\x2', '\x252', 
		'\x253', '\x3', '\x2', '\x2', '\x2', '\x253', '\x255', '\x3', '\x2', '\x2', 
		'\x2', '\x254', '\x252', '\x3', '\x2', '\x2', '\x2', '\x255', '\x256', 
		'\a', '\xF', '\x2', '\x2', '\x256', '\x257', '\a', '\x10', '\x2', '\x2', 
		'\x257', '\x31', '\x3', '\x2', '\x2', '\x2', '\x258', '\x25B', '\x5', 
		'\x34', '\x1B', '\x2', '\x259', '\x25B', '\x5', '\x12E', '\x98', '\x2', 
		'\x25A', '\x258', '\x3', '\x2', '\x2', '\x2', '\x25A', '\x259', '\x3', 
		'\x2', '\x2', '\x2', '\x25B', '\x33', '\x3', '\x2', '\x2', '\x2', '\x25C', 
		'\x25D', '\x5', '\x12E', '\x98', '\x2', '\x25D', '\x25E', '\a', '\x10', 
		'\x2', '\x2', '\x25E', '\x25F', '\x5', 'J', '&', '\x2', '\x25F', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x260', '\x261', '\x5', '\x100', '\x81', 
		'\x2', '\x261', '\x262', '\a', '\f', '\x2', '\x2', '\x262', '\x263', '\x5', 
		'\x1E', '\x10', '\x2', '\x263', '\x264', '\a', '\r', '\x2', '\x2', '\x264', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\x265', '\x26A', '\x5', ':', '\x1E', 
		'\x2', '\x266', '\x26A', '\x5', '\x12E', '\x98', '\x2', '\x267', '\x26A', 
		'\x5', '\x12C', '\x97', '\x2', '\x268', '\x26A', '\x5', '<', '\x1F', '\x2', 
		'\x269', '\x265', '\x3', '\x2', '\x2', '\x2', '\x269', '\x266', '\x3', 
		'\x2', '\x2', '\x2', '\x269', '\x267', '\x3', '\x2', '\x2', '\x2', '\x269', 
		'\x268', '\x3', '\x2', '\x2', '\x2', '\x26A', '\x39', '\x3', '\x2', '\x2', 
		'\x2', '\x26B', '\x27C', '\x5', '\x116', '\x8C', '\x2', '\x26C', '\x26D', 
		'\x5', '\x122', '\x92', '\x2', '\x26D', '\x26E', '\a', '\f', '\x2', '\x2', 
		'\x26E', '\x26F', '\x5', '\x42', '\"', '\x2', '\x26F', '\x270', '\a', 
		'\r', '\x2', '\x2', '\x270', '\x27C', '\x3', '\x2', '\x2', '\x2', '\x271', 
		'\x272', '\x5', '\x12A', '\x96', '\x2', '\x272', '\x273', '\a', '\f', 
		'\x2', '\x2', '\x273', '\x274', '\x5', '\x42', '\"', '\x2', '\x274', '\x275', 
		'\a', '\r', '\x2', '\x2', '\x275', '\x27C', '\x3', '\x2', '\x2', '\x2', 
		'\x276', '\x277', '\x5', '\x126', '\x94', '\x2', '\x277', '\x278', '\a', 
		'\f', '\x2', '\x2', '\x278', '\x279', '\x5', '\x42', '\"', '\x2', '\x279', 
		'\x27A', '\a', '\r', '\x2', '\x2', '\x27A', '\x27C', '\x3', '\x2', '\x2', 
		'\x2', '\x27B', '\x26B', '\x3', '\x2', '\x2', '\x2', '\x27B', '\x26C', 
		'\x3', '\x2', '\x2', '\x2', '\x27B', '\x271', '\x3', '\x2', '\x2', '\x2', 
		'\x27B', '\x276', '\x3', '\x2', '\x2', '\x2', '\x27C', ';', '\x3', '\x2', 
		'\x2', '\x2', '\x27D', '\x281', '\x5', '\xFE', '\x80', '\x2', '\x27E', 
		'\x281', '\x5', '\x10A', '\x86', '\x2', '\x27F', '\x281', '\x5', '\x100', 
		'\x81', '\x2', '\x280', '\x27D', '\x3', '\x2', '\x2', '\x2', '\x280', 
		'\x27E', '\x3', '\x2', '\x2', '\x2', '\x280', '\x27F', '\x3', '\x2', '\x2', 
		'\x2', '\x281', '=', '\x3', '\x2', '\x2', '\x2', '\x282', '\x283', '\a', 
		'\x11', '\x2', '\x2', '\x283', '\x284', '\x5', '\x1E', '\x10', '\x2', 
		'\x284', '\x285', '\a', '\x4', '\x2', '\x2', '\x285', '\x286', '\x5', 
		'\x1E', '\x10', '\x2', '\x286', '\x287', '\a', '\x4', '\x2', '\x2', '\x287', 
		'\x288', '\x5', '\x1E', '\x10', '\x2', '\x288', '\x289', '\a', '\r', '\x2', 
		'\x2', '\x289', '?', '\x3', '\x2', '\x2', '\x2', '\x28A', '\x28B', '\a', 
		'\x12', '\x2', '\x2', '\x28B', '\x28C', '\x5', ',', '\x17', '\x2', '\x28C', 
		'\x28D', '\a', '\x4', '\x2', '\x2', '\x28D', '\x28E', '\x5', '\x1C', '\xF', 
		'\x2', '\x28E', '\x28F', '\a', '\r', '\x2', '\x2', '\x28F', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\x290', '\x291', '\x5', '\\', '/', '\x2', '\x291', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x292', '\x293', '\x5', '\x46', '$', 
		'\x2', '\x293', '\x294', '\a', '\x10', '\x2', '\x2', '\x294', '\x295', 
		'\x5', 'J', '&', '\x2', '\x295', '\x45', '\x3', '\x2', '\x2', '\x2', '\x296', 
		'\x29C', '\x5', '\x38', '\x1D', '\x2', '\x297', '\x298', '\a', '\f', '\x2', 
		'\x2', '\x298', '\x299', '\x5', '\x1E', '\x10', '\x2', '\x299', '\x29A', 
		'\a', '\r', '\x2', '\x2', '\x29A', '\x29C', '\x3', '\x2', '\x2', '\x2', 
		'\x29B', '\x296', '\x3', '\x2', '\x2', '\x2', '\x29B', '\x297', '\x3', 
		'\x2', '\x2', '\x2', '\x29C', 'G', '\x3', '\x2', '\x2', '\x2', '\x29D', 
		'\x29E', '\x5', '\x38', '\x1D', '\x2', '\x29E', '\x29F', '\a', 'J', '\x2', 
		'\x2', '\x29F', '\x2A0', '\x5', '\x38', '\x1D', '\x2', '\x2A0', 'I', '\x3', 
		'\x2', '\x2', '\x2', '\x2A1', '\x2A5', '\x5', 'L', '\'', '\x2', '\x2A2', 
		'\x2A5', '\x5', 'R', '*', '\x2', '\x2A3', '\x2A5', '\x5', 'N', '(', '\x2', 
		'\x2A4', '\x2A1', '\x3', '\x2', '\x2', '\x2', '\x2A4', '\x2A2', '\x3', 
		'\x2', '\x2', '\x2', '\x2A4', '\x2A3', '\x3', '\x2', '\x2', '\x2', '\x2A5', 
		'K', '\x3', '\x2', '\x2', '\x2', '\x2A6', '\x2A7', '\x5', ',', '\x17', 
		'\x2', '\x2A7', 'M', '\x3', '\x2', '\x2', '\x2', '\x2A8', '\x2A9', '\x5', 
		'*', '\x16', '\x2', '\x2A9', 'O', '\x3', '\x2', '\x2', '\x2', '\x2AA', 
		'\x2AE', '\x5', 'R', '*', '\x2', '\x2AB', '\x2AE', '\x5', 'T', '+', '\x2', 
		'\x2AC', '\x2AE', '\x5', 'V', ',', '\x2', '\x2AD', '\x2AA', '\x3', '\x2', 
		'\x2', '\x2', '\x2AD', '\x2AB', '\x3', '\x2', '\x2', '\x2', '\x2AD', '\x2AC', 
		'\x3', '\x2', '\x2', '\x2', '\x2AE', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'\x2AF', '\x2B0', '\x5', 'L', '\'', '\x2', '\x2B0', '\x2B1', '\a', 'G', 
		'\x2', '\x2', '\x2B1', '\x2B2', '\x5', 'L', '\'', '\x2', '\x2B2', '\x2B8', 
		'\x3', '\x2', '\x2', '\x2', '\x2B3', '\x2B4', '\x5', 'L', '\'', '\x2', 
		'\x2B4', '\x2B5', '\a', 'G', '\x2', '\x2', '\x2B5', '\x2B6', '\x5', 'R', 
		'*', '\x2', '\x2B6', '\x2B8', '\x3', '\x2', '\x2', '\x2', '\x2B7', '\x2AF', 
		'\x3', '\x2', '\x2', '\x2', '\x2B7', '\x2B3', '\x3', '\x2', '\x2', '\x2', 
		'\x2B8', 'S', '\x3', '\x2', '\x2', '\x2', '\x2B9', '\x2BA', '\b', '+', 
		'\x1', '\x2', '\x2BA', '\x2BB', '\x5', 'L', '\'', '\x2', '\x2BB', '\x2BC', 
		'\a', 'H', '\x2', '\x2', '\x2BC', '\x2BD', '\x5', 'L', '\'', '\x2', '\x2BD', 
		'\x2C3', '\x3', '\x2', '\x2', '\x2', '\x2BE', '\x2BF', '\f', '\x3', '\x2', 
		'\x2', '\x2BF', '\x2C0', '\a', 'H', '\x2', '\x2', '\x2C0', '\x2C2', '\x5', 
		'L', '\'', '\x2', '\x2C1', '\x2BE', '\x3', '\x2', '\x2', '\x2', '\x2C2', 
		'\x2C5', '\x3', '\x2', '\x2', '\x2', '\x2C3', '\x2C1', '\x3', '\x2', '\x2', 
		'\x2', '\x2C3', '\x2C4', '\x3', '\x2', '\x2', '\x2', '\x2C4', 'U', '\x3', 
		'\x2', '\x2', '\x2', '\x2C5', '\x2C3', '\x3', '\x2', '\x2', '\x2', '\x2C6', 
		'\x2C7', '\b', ',', '\x1', '\x2', '\x2C7', '\x2C8', '\x5', 'L', '\'', 
		'\x2', '\x2C8', '\x2C9', '\a', 'I', '\x2', '\x2', '\x2C9', '\x2CA', '\x5', 
		'L', '\'', '\x2', '\x2CA', '\x2D0', '\x3', '\x2', '\x2', '\x2', '\x2CB', 
		'\x2CC', '\f', '\x3', '\x2', '\x2', '\x2CC', '\x2CD', '\a', 'I', '\x2', 
		'\x2', '\x2CD', '\x2CF', '\x5', 'L', '\'', '\x2', '\x2CE', '\x2CB', '\x3', 
		'\x2', '\x2', '\x2', '\x2CF', '\x2D2', '\x3', '\x2', '\x2', '\x2', '\x2D0', 
		'\x2CE', '\x3', '\x2', '\x2', '\x2', '\x2D0', '\x2D1', '\x3', '\x2', '\x2', 
		'\x2', '\x2D1', 'W', '\x3', '\x2', '\x2', '\x2', '\x2D2', '\x2D0', '\x3', 
		'\x2', '\x2', '\x2', '\x2D3', '\x2D4', '\x5', 'Z', '.', '\x2', '\x2D4', 
		'\x2D5', '\a', 'K', '\x2', '\x2', '\x2D5', '\x2D6', '\x5', 'Z', '.', '\x2', 
		'\x2D6', '\x2DC', '\x3', '\x2', '\x2', '\x2', '\x2D7', '\x2D8', '\a', 
		'\f', '\x2', '\x2', '\x2D8', '\x2D9', '\x5', 'X', '-', '\x2', '\x2D9', 
		'\x2DA', '\a', '\r', '\x2', '\x2', '\x2DA', '\x2DC', '\x3', '\x2', '\x2', 
		'\x2', '\x2DB', '\x2D3', '\x3', '\x2', '\x2', '\x2', '\x2DB', '\x2D7', 
		'\x3', '\x2', '\x2', '\x2', '\x2DC', 'Y', '\x3', '\x2', '\x2', '\x2', 
		'\x2DD', '\x2E8', '\a', '\x13', '\x2', '\x2', '\x2DE', '\x2DF', '\a', 
		'\xE', '\x2', '\x2', '\x2DF', '\x2E0', '\x5', '\\', '/', '\x2', '\x2E0', 
		'\x2E1', '\a', '\xF', '\x2', '\x2', '\x2E1', '\x2E8', '\x3', '\x2', '\x2', 
		'\x2', '\x2E2', '\x2E8', '\a', '\x14', '\x2', '\x2', '\x2E3', '\x2E4', 
		'\a', '\x15', '\x2', '\x2', '\x2E4', '\x2E5', '\x5', '\\', '/', '\x2', 
		'\x2E5', '\x2E6', '\a', '\x16', '\x2', '\x2', '\x2E6', '\x2E8', '\x3', 
		'\x2', '\x2', '\x2', '\x2E7', '\x2DD', '\x3', '\x2', '\x2', '\x2', '\x2E7', 
		'\x2DE', '\x3', '\x2', '\x2', '\x2', '\x2E7', '\x2E2', '\x3', '\x2', '\x2', 
		'\x2', '\x2E7', '\x2E3', '\x3', '\x2', '\x2', '\x2', '\x2E8', '[', '\x3', 
		'\x2', '\x2', '\x2', '\x2E9', '\x2EE', '\x5', '\x1E', '\x10', '\x2', '\x2EA', 
		'\x2EB', '\a', '\x4', '\x2', '\x2', '\x2EB', '\x2ED', '\x5', '\x1E', '\x10', 
		'\x2', '\x2EC', '\x2EA', '\x3', '\x2', '\x2', '\x2', '\x2ED', '\x2F0', 
		'\x3', '\x2', '\x2', '\x2', '\x2EE', '\x2EC', '\x3', '\x2', '\x2', '\x2', 
		'\x2EE', '\x2EF', '\x3', '\x2', '\x2', '\x2', '\x2EF', ']', '\x3', '\x2', 
		'\x2', '\x2', '\x2F0', '\x2EE', '\x3', '\x2', '\x2', '\x2', '\x2F1', '\x2F4', 
		'\x5', '`', '\x31', '\x2', '\x2F2', '\x2F4', '\x5', 'X', '-', '\x2', '\x2F3', 
		'\x2F1', '\x3', '\x2', '\x2', '\x2', '\x2F3', '\x2F2', '\x3', '\x2', '\x2', 
		'\x2', '\x2F4', '_', '\x3', '\x2', '\x2', '\x2', '\x2F5', '\x2F6', '\x5', 
		'\x1E', '\x10', '\x2', '\x2F6', '\x61', '\x3', '\x2', '\x2', '\x2', '\x2F7', 
		'\x2FB', '\x5', '\x64', '\x33', '\x2', '\x2F8', '\x2FB', '\x5', '\x98', 
		'M', '\x2', '\x2F9', '\x2FB', '\x5', '\x92', 'J', '\x2', '\x2FA', '\x2F7', 
		'\x3', '\x2', '\x2', '\x2', '\x2FA', '\x2F8', '\x3', '\x2', '\x2', '\x2', 
		'\x2FA', '\x2F9', '\x3', '\x2', '\x2', '\x2', '\x2FB', '\x63', '\x3', 
		'\x2', '\x2', '\x2', '\x2FC', '\x300', '\x5', '\x66', '\x34', '\x2', '\x2FD', 
		'\x300', '\x5', 'p', '\x39', '\x2', '\x2FE', '\x300', '\x5', '\x9A', 'N', 
		'\x2', '\x2FF', '\x2FC', '\x3', '\x2', '\x2', '\x2', '\x2FF', '\x2FD', 
		'\x3', '\x2', '\x2', '\x2', '\x2FF', '\x2FE', '\x3', '\x2', '\x2', '\x2', 
		'\x300', '\x65', '\x3', '\x2', '\x2', '\x2', '\x301', '\x304', '\x5', 
		'h', '\x35', '\x2', '\x302', '\x304', '\x5', 'j', '\x36', '\x2', '\x303', 
		'\x301', '\x3', '\x2', '\x2', '\x2', '\x303', '\x302', '\x3', '\x2', '\x2', 
		'\x2', '\x304', 'g', '\x3', '\x2', '\x2', '\x2', '\x305', '\x306', '\x5', 
		'p', '\x39', '\x2', '\x306', '\x307', '\x5', '\x108', '\x85', '\x2', '\x307', 
		'\x308', '\x5', 'p', '\x39', '\x2', '\x308', 'i', '\x3', '\x2', '\x2', 
		'\x2', '\x309', '\x30C', '\x5', 'l', '\x37', '\x2', '\x30A', '\x30C', 
		'\x5', 'n', '\x38', '\x2', '\x30B', '\x309', '\x3', '\x2', '\x2', '\x2', 
		'\x30B', '\x30A', '\x3', '\x2', '\x2', '\x2', '\x30C', 'k', '\x3', '\x2', 
		'\x2', '\x2', '\x30D', '\x30E', '\b', '\x37', '\x1', '\x2', '\x30E', '\x30F', 
		'\x5', 'p', '\x39', '\x2', '\x30F', '\x310', '\a', '.', '\x2', '\x2', 
		'\x310', '\x311', '\x5', 'p', '\x39', '\x2', '\x311', '\x317', '\x3', 
		'\x2', '\x2', '\x2', '\x312', '\x313', '\f', '\x3', '\x2', '\x2', '\x313', 
		'\x314', '\a', '.', '\x2', '\x2', '\x314', '\x316', '\x5', 'p', '\x39', 
		'\x2', '\x315', '\x312', '\x3', '\x2', '\x2', '\x2', '\x316', '\x319', 
		'\x3', '\x2', '\x2', '\x2', '\x317', '\x315', '\x3', '\x2', '\x2', '\x2', 
		'\x317', '\x318', '\x3', '\x2', '\x2', '\x2', '\x318', 'm', '\x3', '\x2', 
		'\x2', '\x2', '\x319', '\x317', '\x3', '\x2', '\x2', '\x2', '\x31A', '\x31B', 
		'\b', '\x38', '\x1', '\x2', '\x31B', '\x31C', '\x5', 'p', '\x39', '\x2', 
		'\x31C', '\x31D', '\a', '/', '\x2', '\x2', '\x31D', '\x31E', '\x5', 'p', 
		'\x39', '\x2', '\x31E', '\x324', '\x3', '\x2', '\x2', '\x2', '\x31F', 
		'\x320', '\f', '\x3', '\x2', '\x2', '\x320', '\x321', '\a', '/', '\x2', 
		'\x2', '\x321', '\x323', '\x5', 'p', '\x39', '\x2', '\x322', '\x31F', 
		'\x3', '\x2', '\x2', '\x2', '\x323', '\x326', '\x3', '\x2', '\x2', '\x2', 
		'\x324', '\x322', '\x3', '\x2', '\x2', '\x2', '\x324', '\x325', '\x3', 
		'\x2', '\x2', '\x2', '\x325', 'o', '\x3', '\x2', '\x2', '\x2', '\x326', 
		'\x324', '\x3', '\x2', '\x2', '\x2', '\x327', '\x331', '\x5', 'r', ':', 
		'\x2', '\x328', '\x331', '\x5', 'z', '>', '\x2', '\x329', '\x331', '\x5', 
		'|', '?', '\x2', '\x32A', '\x331', '\x5', '~', '@', '\x2', '\x32B', '\x331', 
		'\x5', '\x80', '\x41', '\x2', '\x32C', '\x32D', '\a', '\f', '\x2', '\x2', 
		'\x32D', '\x32E', '\x5', '\x64', '\x33', '\x2', '\x32E', '\x32F', '\a', 
		'\r', '\x2', '\x2', '\x32F', '\x331', '\x3', '\x2', '\x2', '\x2', '\x330', 
		'\x327', '\x3', '\x2', '\x2', '\x2', '\x330', '\x328', '\x3', '\x2', '\x2', 
		'\x2', '\x330', '\x329', '\x3', '\x2', '\x2', '\x2', '\x330', '\x32A', 
		'\x3', '\x2', '\x2', '\x2', '\x330', '\x32B', '\x3', '\x2', '\x2', '\x2', 
		'\x330', '\x32C', '\x3', '\x2', '\x2', '\x2', '\x331', 'q', '\x3', '\x2', 
		'\x2', '\x2', '\x332', '\x333', '\x5', '\x106', '\x84', '\x2', '\x333', 
		'\x334', '\a', '\xE', '\x2', '\x2', '\x334', '\x335', '\x5', 't', ';', 
		'\x2', '\x335', '\x336', '\a', '\xF', '\x2', '\x2', '\x336', '\x337', 
		'\a', '\x10', '\x2', '\x2', '\x337', '\x338', '\x5', 'p', '\x39', '\x2', 
		'\x338', 's', '\x3', '\x2', '\x2', '\x2', '\x339', '\x33E', '\x5', 'v', 
		'<', '\x2', '\x33A', '\x33B', '\a', '\x4', '\x2', '\x2', '\x33B', '\x33D', 
		'\x5', 'v', '<', '\x2', '\x33C', '\x33A', '\x3', '\x2', '\x2', '\x2', 
		'\x33D', '\x340', '\x3', '\x2', '\x2', '\x2', '\x33E', '\x33C', '\x3', 
		'\x2', '\x2', '\x2', '\x33E', '\x33F', '\x3', '\x2', '\x2', '\x2', '\x33F', 
		'u', '\x3', '\x2', '\x2', '\x2', '\x340', '\x33E', '\x3', '\x2', '\x2', 
		'\x2', '\x341', '\x344', '\x5', 'x', '=', '\x2', '\x342', '\x344', '\x5', 
		'\x12E', '\x98', '\x2', '\x343', '\x341', '\x3', '\x2', '\x2', '\x2', 
		'\x343', '\x342', '\x3', '\x2', '\x2', '\x2', '\x344', 'w', '\x3', '\x2', 
		'\x2', '\x2', '\x345', '\x346', '\x5', '\x12E', '\x98', '\x2', '\x346', 
		'\x347', '\a', '\x10', '\x2', '\x2', '\x347', '\x348', '\x5', '\xA4', 
		'S', '\x2', '\x348', 'y', '\x3', '\x2', '\x2', '\x2', '\x349', '\x34A', 
		'\x5', '\x10C', '\x87', '\x2', '\x34A', '\x34B', '\x5', 'p', '\x39', '\x2', 
		'\x34B', '\x34E', '\x3', '\x2', '\x2', '\x2', '\x34C', '\x34E', '\x5', 
		'\xC8', '\x65', '\x2', '\x34D', '\x349', '\x3', '\x2', '\x2', '\x2', '\x34D', 
		'\x34C', '\x3', '\x2', '\x2', '\x2', '\x34E', '{', '\x3', '\x2', '\x2', 
		'\x2', '\x34F', '\x350', '\x5', '\xCA', '\x66', '\x2', '\x350', '}', '\x3', 
		'\x2', '\x2', '\x2', '\x351', '\x352', '\a', '\x17', '\x2', '\x2', '\x352', 
		'\x353', '\x5', '\x64', '\x33', '\x2', '\x353', '\x354', '\a', '\x4', 
		'\x2', '\x2', '\x354', '\x355', '\x5', '\x64', '\x33', '\x2', '\x355', 
		'\x356', '\a', '\x4', '\x2', '\x2', '\x356', '\x357', '\x5', '\x64', '\x33', 
		'\x2', '\x357', '\x358', '\a', '\r', '\x2', '\x2', '\x358', '\x7F', '\x3', 
		'\x2', '\x2', '\x2', '\x359', '\x35A', '\a', '\x18', '\x2', '\x2', '\x35A', 
		'\x35B', '\x5', '\x82', '\x42', '\x2', '\x35B', '\x35C', '\a', '\x4', 
		'\x2', '\x2', '\x35C', '\x35D', '\x5', '\x62', '\x32', '\x2', '\x35D', 
		'\x35E', '\a', '\r', '\x2', '\x2', '\x35E', '\x366', '\x3', '\x2', '\x2', 
		'\x2', '\x35F', '\x360', '\a', '\x19', '\x2', '\x2', '\x360', '\x361', 
		'\x5', '\x8A', '\x46', '\x2', '\x361', '\x362', '\a', '\x4', '\x2', '\x2', 
		'\x362', '\x363', '\x5', '\x62', '\x32', '\x2', '\x363', '\x364', '\a', 
		'\r', '\x2', '\x2', '\x364', '\x366', '\x3', '\x2', '\x2', '\x2', '\x365', 
		'\x359', '\x3', '\x2', '\x2', '\x2', '\x365', '\x35F', '\x3', '\x2', '\x2', 
		'\x2', '\x366', '\x81', '\x3', '\x2', '\x2', '\x2', '\x367', '\x36D', 
		'\x5', '\x86', '\x44', '\x2', '\x368', '\x369', '\a', '\xE', '\x2', '\x2', 
		'\x369', '\x36A', '\x5', '\x84', '\x43', '\x2', '\x36A', '\x36B', '\a', 
		'\xF', '\x2', '\x2', '\x36B', '\x36D', '\x3', '\x2', '\x2', '\x2', '\x36C', 
		'\x367', '\x3', '\x2', '\x2', '\x2', '\x36C', '\x368', '\x3', '\x2', '\x2', 
		'\x2', '\x36D', '\x83', '\x3', '\x2', '\x2', '\x2', '\x36E', '\x373', 
		'\x5', '\x86', '\x44', '\x2', '\x36F', '\x370', '\a', '\x4', '\x2', '\x2', 
		'\x370', '\x372', '\x5', '\x86', '\x44', '\x2', '\x371', '\x36F', '\x3', 
		'\x2', '\x2', '\x2', '\x372', '\x375', '\x3', '\x2', '\x2', '\x2', '\x373', 
		'\x371', '\x3', '\x2', '\x2', '\x2', '\x373', '\x374', '\x3', '\x2', '\x2', 
		'\x2', '\x374', '\x85', '\x3', '\x2', '\x2', '\x2', '\x375', '\x373', 
		'\x3', '\x2', '\x2', '\x2', '\x376', '\x377', '\a', ';', '\x2', '\x2', 
		'\x377', '\x378', '\a', '\xE', '\x2', '\x2', '\x378', '\x379', '\x5', 
		't', ';', '\x2', '\x379', '\x37A', '\a', '\xF', '\x2', '\x2', '\x37A', 
		'\x37B', '\a', '\x10', '\x2', '\x2', '\x37B', '\x37C', '\x5', '\x86', 
		'\x44', '\x2', '\x37C', '\x37F', '\x3', '\x2', '\x2', '\x2', '\x37D', 
		'\x37F', '\x5', '\x88', '\x45', '\x2', '\x37E', '\x376', '\x3', '\x2', 
		'\x2', '\x2', '\x37E', '\x37D', '\x3', '\x2', '\x2', '\x2', '\x37F', '\x87', 
		'\x3', '\x2', '\x2', '\x2', '\x380', '\x381', '\x5', '\xD6', 'l', '\x2', 
		'\x381', '\x382', '\a', ':', '\x2', '\x2', '\x382', '\x383', '\x5', '\xE2', 
		'r', '\x2', '\x383', '\x389', '\x3', '\x2', '\x2', '\x2', '\x384', '\x385', 
		'\a', '\f', '\x2', '\x2', '\x385', '\x386', '\x5', '\x88', '\x45', '\x2', 
		'\x386', '\x387', '\a', '\r', '\x2', '\x2', '\x387', '\x389', '\x3', '\x2', 
		'\x2', '\x2', '\x388', '\x380', '\x3', '\x2', '\x2', '\x2', '\x388', '\x384', 
		'\x3', '\x2', '\x2', '\x2', '\x389', '\x89', '\x3', '\x2', '\x2', '\x2', 
		'\x38A', '\x390', '\x5', '\x8E', 'H', '\x2', '\x38B', '\x38C', '\a', '\xE', 
		'\x2', '\x2', '\x38C', '\x38D', '\x5', '\x8C', 'G', '\x2', '\x38D', '\x38E', 
		'\a', '\xF', '\x2', '\x2', '\x38E', '\x390', '\x3', '\x2', '\x2', '\x2', 
		'\x38F', '\x38A', '\x3', '\x2', '\x2', '\x2', '\x38F', '\x38B', '\x3', 
		'\x2', '\x2', '\x2', '\x390', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x391', 
		'\x396', '\x5', '\x8E', 'H', '\x2', '\x392', '\x393', '\a', '\x4', '\x2', 
		'\x2', '\x393', '\x395', '\x5', '\x8E', 'H', '\x2', '\x394', '\x392', 
		'\x3', '\x2', '\x2', '\x2', '\x395', '\x398', '\x3', '\x2', '\x2', '\x2', 
		'\x396', '\x394', '\x3', '\x2', '\x2', '\x2', '\x396', '\x397', '\x3', 
		'\x2', '\x2', '\x2', '\x397', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x398', 
		'\x396', '\x3', '\x2', '\x2', '\x2', '\x399', '\x39A', '\a', ';', '\x2', 
		'\x2', '\x39A', '\x39B', '\a', '\xE', '\x2', '\x2', '\x39B', '\x39C', 
		'\x5', 't', ';', '\x2', '\x39C', '\x39D', '\a', '\xF', '\x2', '\x2', '\x39D', 
		'\x39E', '\a', '\x10', '\x2', '\x2', '\x39E', '\x39F', '\x5', '\x8E', 
		'H', '\x2', '\x39F', '\x3A2', '\x3', '\x2', '\x2', '\x2', '\x3A0', '\x3A2', 
		'\x5', '\x90', 'I', '\x2', '\x3A1', '\x399', '\x3', '\x2', '\x2', '\x2', 
		'\x3A1', '\x3A0', '\x3', '\x2', '\x2', '\x2', '\x3A2', '\x8F', '\x3', 
		'\x2', '\x2', '\x2', '\x3A3', '\x3A4', '\x5', '\xCC', 'g', '\x2', '\x3A4', 
		'\x3A5', '\a', '\x30', '\x2', '\x2', '\x3A5', '\x3A6', '\x5', 'p', '\x39', 
		'\x2', '\x3A6', '\x3AC', '\x3', '\x2', '\x2', '\x2', '\x3A7', '\x3A8', 
		'\a', '\f', '\x2', '\x2', '\x3A8', '\x3A9', '\x5', '\x90', 'I', '\x2', 
		'\x3A9', '\x3AA', '\a', '\r', '\x2', '\x2', '\x3AA', '\x3AC', '\x3', '\x2', 
		'\x2', '\x2', '\x3AB', '\x3A3', '\x3', '\x2', '\x2', '\x2', '\x3AB', '\x3A7', 
		'\x3', '\x2', '\x2', '\x2', '\x3AC', '\x91', '\x3', '\x2', '\x2', '\x2', 
		'\x3AD', '\x3AE', '\x5', '\x94', 'K', '\x2', '\x3AE', '\x3AF', '\a', 'K', 
		'\x2', '\x2', '\x3AF', '\x3B0', '\x5', '\x94', 'K', '\x2', '\x3B0', '\x3B6', 
		'\x3', '\x2', '\x2', '\x2', '\x3B1', '\x3B2', '\a', '\f', '\x2', '\x2', 
		'\x3B2', '\x3B3', '\x5', '\x92', 'J', '\x2', '\x3B3', '\x3B4', '\a', '\r', 
		'\x2', '\x2', '\x3B4', '\x3B6', '\x3', '\x2', '\x2', '\x2', '\x3B5', '\x3AD', 
		'\x3', '\x2', '\x2', '\x2', '\x3B5', '\x3B1', '\x3', '\x2', '\x2', '\x2', 
		'\x3B6', '\x93', '\x3', '\x2', '\x2', '\x2', '\x3B7', '\x3BD', '\a', '\x13', 
		'\x2', '\x2', '\x3B8', '\x3B9', '\a', '\xE', '\x2', '\x2', '\x3B9', '\x3BA', 
		'\x5', '\x96', 'L', '\x2', '\x3BA', '\x3BB', '\a', '\xF', '\x2', '\x2', 
		'\x3BB', '\x3BD', '\x3', '\x2', '\x2', '\x2', '\x3BC', '\x3B7', '\x3', 
		'\x2', '\x2', '\x2', '\x3BC', '\x3B8', '\x3', '\x2', '\x2', '\x2', '\x3BD', 
		'\x95', '\x3', '\x2', '\x2', '\x2', '\x3BE', '\x3C3', '\x5', '\x64', '\x33', 
		'\x2', '\x3BF', '\x3C0', '\a', '\x4', '\x2', '\x2', '\x3C0', '\x3C2', 
		'\x5', '\x64', '\x33', '\x2', '\x3C1', '\x3BF', '\x3', '\x2', '\x2', '\x2', 
		'\x3C2', '\x3C5', '\x3', '\x2', '\x2', '\x2', '\x3C3', '\x3C1', '\x3', 
		'\x2', '\x2', '\x2', '\x3C3', '\x3C4', '\x3', '\x2', '\x2', '\x2', '\x3C4', 
		'\x97', '\x3', '\x2', '\x2', '\x2', '\x3C5', '\x3C3', '\x3', '\x2', '\x2', 
		'\x2', '\x3C6', '\x3C7', '\x5', '\x118', '\x8D', '\x2', '\x3C7', '\x3C8', 
		'\a', '\x10', '\x2', '\x2', '\x3C8', '\x3C9', '\x5', '\x9C', 'O', '\x2', 
		'\x3C9', '\x3CF', '\x3', '\x2', '\x2', '\x2', '\x3CA', '\x3CB', '\a', 
		'\f', '\x2', '\x2', '\x3CB', '\x3CC', '\x5', '\x98', 'M', '\x2', '\x3CC', 
		'\x3CD', '\a', '\r', '\x2', '\x2', '\x3CD', '\x3CF', '\x3', '\x2', '\x2', 
		'\x2', '\x3CE', '\x3C6', '\x3', '\x2', '\x2', '\x2', '\x3CE', '\x3CA', 
		'\x3', '\x2', '\x2', '\x2', '\x3CF', '\x99', '\x3', '\x2', '\x2', '\x2', 
		'\x3D0', '\x3D1', '\x5', '\x118', '\x8D', '\x2', '\x3D1', '\x3D2', '\a', 
		'J', '\x2', '\x2', '\x3D2', '\x3D3', '\x5', '\x116', '\x8C', '\x2', '\x3D3', 
		'\x9B', '\x3', '\x2', '\x2', '\x2', '\x3D4', '\x3DC', '\x5', '\xA4', 'S', 
		'\x2', '\x3D5', '\x3DC', '\x5', '\xA8', 'U', '\x2', '\x3D6', '\x3DC', 
		'\x5', '\x9E', 'P', '\x2', '\x3D7', '\x3D8', '\a', '\f', '\x2', '\x2', 
		'\x3D8', '\x3D9', '\x5', '\x9C', 'O', '\x2', '\x3D9', '\x3DA', '\a', '\r', 
		'\x2', '\x2', '\x3DA', '\x3DC', '\x3', '\x2', '\x2', '\x2', '\x3DB', '\x3D4', 
		'\x3', '\x2', '\x2', '\x2', '\x3DB', '\x3D5', '\x3', '\x2', '\x2', '\x2', 
		'\x3DB', '\x3D6', '\x3', '\x2', '\x2', '\x2', '\x3DB', '\x3D7', '\x3', 
		'\x2', '\x2', '\x2', '\x3DC', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x3DD', 
		'\x3DE', '\a', '\x38', '\x2', '\x2', '\x3DE', '\x3DF', '\a', '\xE', '\x2', 
		'\x2', '\x3DF', '\x3E0', '\x5', 't', ';', '\x2', '\x3E0', '\x3E1', '\a', 
		'\xF', '\x2', '\x2', '\x3E1', '\x3E2', '\a', '\x10', '\x2', '\x2', '\x3E2', 
		'\x3E3', '\x5', '\xA0', 'Q', '\x2', '\x3E3', '\x9F', '\x3', '\x2', '\x2', 
		'\x2', '\x3E4', '\x3EA', '\x5', '\xA4', 'S', '\x2', '\x3E5', '\x3E6', 
		'\a', '\f', '\x2', '\x2', '\x3E6', '\x3E7', '\x5', '\xA8', 'U', '\x2', 
		'\x3E7', '\x3E8', '\a', '\r', '\x2', '\x2', '\x3E8', '\x3EA', '\x3', '\x2', 
		'\x2', '\x2', '\x3E9', '\x3E4', '\x3', '\x2', '\x2', '\x2', '\x3E9', '\x3E5', 
		'\x3', '\x2', '\x2', '\x2', '\x3EA', '\xA1', '\x3', '\x2', '\x2', '\x2', 
		'\x3EB', '\x3F1', '\x5', '\xA4', 'S', '\x2', '\x3EC', '\x3ED', '\a', '\f', 
		'\x2', '\x2', '\x3ED', '\x3EE', '\x5', '\xAA', 'V', '\x2', '\x3EE', '\x3EF', 
		'\a', '\r', '\x2', '\x2', '\x3EF', '\x3F1', '\x3', '\x2', '\x2', '\x2', 
		'\x3F0', '\x3EB', '\x3', '\x2', '\x2', '\x2', '\x3F0', '\x3EC', '\x3', 
		'\x2', '\x2', '\x2', '\x3F1', '\xA3', '\x3', '\x2', '\x2', '\x2', '\x3F2', 
		'\x3FB', '\x5', '\x10E', '\x88', '\x2', '\x3F3', '\x3FB', '\x5', '\x112', 
		'\x8A', '\x2', '\x3F4', '\x3F5', '\x5', '\x110', '\x89', '\x2', '\x3F5', 
		'\x3F6', '\a', '\f', '\x2', '\x2', '\x3F6', '\x3F7', '\x5', '\xA6', 'T', 
		'\x2', '\x3F7', '\x3F8', '\a', '\r', '\x2', '\x2', '\x3F8', '\x3FB', '\x3', 
		'\x2', '\x2', '\x2', '\x3F9', '\x3FB', '\x5', '\x12E', '\x98', '\x2', 
		'\x3FA', '\x3F2', '\x3', '\x2', '\x2', '\x2', '\x3FA', '\x3F3', '\x3', 
		'\x2', '\x2', '\x2', '\x3FA', '\x3F4', '\x3', '\x2', '\x2', '\x2', '\x3FA', 
		'\x3F9', '\x3', '\x2', '\x2', '\x2', '\x3FB', '\xA5', '\x3', '\x2', '\x2', 
		'\x2', '\x3FC', '\x401', '\x5', '\xA4', 'S', '\x2', '\x3FD', '\x3FE', 
		'\a', '\x4', '\x2', '\x2', '\x3FE', '\x400', '\x5', '\xA4', 'S', '\x2', 
		'\x3FF', '\x3FD', '\x3', '\x2', '\x2', '\x2', '\x400', '\x403', '\x3', 
		'\x2', '\x2', '\x2', '\x401', '\x3FF', '\x3', '\x2', '\x2', '\x2', '\x401', 
		'\x402', '\x3', '\x2', '\x2', '\x2', '\x402', '\xA7', '\x3', '\x2', '\x2', 
		'\x2', '\x403', '\x401', '\x3', '\x2', '\x2', '\x2', '\x404', '\x405', 
		'\x5', '\xA2', 'R', '\x2', '\x405', '\x406', '\a', 'G', '\x2', '\x2', 
		'\x406', '\x407', '\x5', '\xA4', 'S', '\x2', '\x407', '\xA9', '\x3', '\x2', 
		'\x2', '\x2', '\x408', '\x409', '\b', 'V', '\x1', '\x2', '\x409', '\x40A', 
		'\x5', '\xA2', 'R', '\x2', '\x40A', '\x40B', '\a', 'H', '\x2', '\x2', 
		'\x40B', '\x40C', '\x5', '\xA4', 'S', '\x2', '\x40C', '\x412', '\x3', 
		'\x2', '\x2', '\x2', '\x40D', '\x40E', '\f', '\x3', '\x2', '\x2', '\x40E', 
		'\x40F', '\a', 'H', '\x2', '\x2', '\x40F', '\x411', '\x5', '\xA4', 'S', 
		'\x2', '\x410', '\x40D', '\x3', '\x2', '\x2', '\x2', '\x411', '\x414', 
		'\x3', '\x2', '\x2', '\x2', '\x412', '\x410', '\x3', '\x2', '\x2', '\x2', 
		'\x412', '\x413', '\x3', '\x2', '\x2', '\x2', '\x413', '\xAB', '\x3', 
		'\x2', '\x2', '\x2', '\x414', '\x412', '\x3', '\x2', '\x2', '\x2', '\x415', 
		'\x418', '\x5', '\xAE', 'X', '\x2', '\x416', '\x418', '\x5', '\x98', 'M', 
		'\x2', '\x417', '\x415', '\x3', '\x2', '\x2', '\x2', '\x417', '\x416', 
		'\x3', '\x2', '\x2', '\x2', '\x418', '\xAD', '\x3', '\x2', '\x2', '\x2', 
		'\x419', '\x41C', '\x5', '\xB0', 'Y', '\x2', '\x41A', '\x41C', '\x5', 
		'\xF2', 'z', '\x2', '\x41B', '\x419', '\x3', '\x2', '\x2', '\x2', '\x41B', 
		'\x41A', '\x3', '\x2', '\x2', '\x2', '\x41C', '\xAF', '\x3', '\x2', '\x2', 
		'\x2', '\x41D', '\x41E', '\a', ';', '\x2', '\x2', '\x41E', '\x41F', '\a', 
		'\xE', '\x2', '\x2', '\x41F', '\x420', '\x5', 't', ';', '\x2', '\x420', 
		'\x421', '\a', '\xF', '\x2', '\x2', '\x421', '\x422', '\a', '\x10', '\x2', 
		'\x2', '\x422', '\x423', '\x5', '\xF2', 'z', '\x2', '\x423', '\xB1', '\x3', 
		'\x2', '\x2', '\x2', '\x424', '\x427', '\x5', '\xB4', '[', '\x2', '\x425', 
		'\x427', '\x5', '\xEC', 'w', '\x2', '\x426', '\x424', '\x3', '\x2', '\x2', 
		'\x2', '\x426', '\x425', '\x3', '\x2', '\x2', '\x2', '\x427', '\xB3', 
		'\x3', '\x2', '\x2', '\x2', '\x428', '\x42B', '\x5', '\xB6', '\\', '\x2', 
		'\x429', '\x42B', '\x5', '\xC0', '\x61', '\x2', '\x42A', '\x428', '\x3', 
		'\x2', '\x2', '\x2', '\x42A', '\x429', '\x3', '\x2', '\x2', '\x2', '\x42B', 
		'\xB5', '\x3', '\x2', '\x2', '\x2', '\x42C', '\x42F', '\x5', '\xB8', ']', 
		'\x2', '\x42D', '\x42F', '\x5', '\xBA', '^', '\x2', '\x42E', '\x42C', 
		'\x3', '\x2', '\x2', '\x2', '\x42E', '\x42D', '\x3', '\x2', '\x2', '\x2', 
		'\x42F', '\xB7', '\x3', '\x2', '\x2', '\x2', '\x430', '\x431', '\x5', 
		'\xC0', '\x61', '\x2', '\x431', '\x432', '\x5', '\x108', '\x85', '\x2', 
		'\x432', '\x433', '\x5', '\xC0', '\x61', '\x2', '\x433', '\xB9', '\x3', 
		'\x2', '\x2', '\x2', '\x434', '\x437', '\x5', '\xBC', '_', '\x2', '\x435', 
		'\x437', '\x5', '\xBE', '`', '\x2', '\x436', '\x434', '\x3', '\x2', '\x2', 
		'\x2', '\x436', '\x435', '\x3', '\x2', '\x2', '\x2', '\x437', '\xBB', 
		'\x3', '\x2', '\x2', '\x2', '\x438', '\x439', '\b', '_', '\x1', '\x2', 
		'\x439', '\x43A', '\x5', '\xC0', '\x61', '\x2', '\x43A', '\x43B', '\a', 
		'.', '\x2', '\x2', '\x43B', '\x43C', '\x5', '\xC0', '\x61', '\x2', '\x43C', 
		'\x442', '\x3', '\x2', '\x2', '\x2', '\x43D', '\x43E', '\f', '\x3', '\x2', 
		'\x2', '\x43E', '\x43F', '\a', '.', '\x2', '\x2', '\x43F', '\x441', '\x5', 
		'\xC0', '\x61', '\x2', '\x440', '\x43D', '\x3', '\x2', '\x2', '\x2', '\x441', 
		'\x444', '\x3', '\x2', '\x2', '\x2', '\x442', '\x440', '\x3', '\x2', '\x2', 
		'\x2', '\x442', '\x443', '\x3', '\x2', '\x2', '\x2', '\x443', '\xBD', 
		'\x3', '\x2', '\x2', '\x2', '\x444', '\x442', '\x3', '\x2', '\x2', '\x2', 
		'\x445', '\x446', '\b', '`', '\x1', '\x2', '\x446', '\x447', '\x5', '\xC0', 
		'\x61', '\x2', '\x447', '\x448', '\a', '/', '\x2', '\x2', '\x448', '\x449', 
		'\x5', '\xC0', '\x61', '\x2', '\x449', '\x44F', '\x3', '\x2', '\x2', '\x2', 
		'\x44A', '\x44B', '\f', '\x3', '\x2', '\x2', '\x44B', '\x44C', '\a', '/', 
		'\x2', '\x2', '\x44C', '\x44E', '\x5', '\xC0', '\x61', '\x2', '\x44D', 
		'\x44A', '\x3', '\x2', '\x2', '\x2', '\x44E', '\x451', '\x3', '\x2', '\x2', 
		'\x2', '\x44F', '\x44D', '\x3', '\x2', '\x2', '\x2', '\x44F', '\x450', 
		'\x3', '\x2', '\x2', '\x2', '\x450', '\xBF', '\x3', '\x2', '\x2', '\x2', 
		'\x451', '\x44F', '\x3', '\x2', '\x2', '\x2', '\x452', '\x45A', '\x5', 
		'\xC2', '\x62', '\x2', '\x453', '\x45A', '\x5', '\xC6', '\x64', '\x2', 
		'\x454', '\x45A', '\x5', '\xCA', '\x66', '\x2', '\x455', '\x456', '\a', 
		'\f', '\x2', '\x2', '\x456', '\x457', '\x5', '\xB4', '[', '\x2', '\x457', 
		'\x458', '\a', '\r', '\x2', '\x2', '\x458', '\x45A', '\x3', '\x2', '\x2', 
		'\x2', '\x459', '\x452', '\x3', '\x2', '\x2', '\x2', '\x459', '\x453', 
		'\x3', '\x2', '\x2', '\x2', '\x459', '\x454', '\x3', '\x2', '\x2', '\x2', 
		'\x459', '\x455', '\x3', '\x2', '\x2', '\x2', '\x45A', '\xC1', '\x3', 
		'\x2', '\x2', '\x2', '\x45B', '\x45C', '\x5', '\x106', '\x84', '\x2', 
		'\x45C', '\x45D', '\a', '\xE', '\x2', '\x2', '\x45D', '\x45E', '\x5', 
		'\xC4', '\x63', '\x2', '\x45E', '\x45F', '\a', '\xF', '\x2', '\x2', '\x45F', 
		'\x460', '\a', '\x10', '\x2', '\x2', '\x460', '\x461', '\x5', '\xC0', 
		'\x61', '\x2', '\x461', '\xC3', '\x3', '\x2', '\x2', '\x2', '\x462', '\x467', 
		'\x5', '\x12E', '\x98', '\x2', '\x463', '\x464', '\a', '\x4', '\x2', '\x2', 
		'\x464', '\x466', '\x5', '\x12E', '\x98', '\x2', '\x465', '\x463', '\x3', 
		'\x2', '\x2', '\x2', '\x466', '\x469', '\x3', '\x2', '\x2', '\x2', '\x467', 
		'\x465', '\x3', '\x2', '\x2', '\x2', '\x467', '\x468', '\x3', '\x2', '\x2', 
		'\x2', '\x468', '\xC5', '\x3', '\x2', '\x2', '\x2', '\x469', '\x467', 
		'\x3', '\x2', '\x2', '\x2', '\x46A', '\x46B', '\x5', '\x10C', '\x87', 
		'\x2', '\x46B', '\x46C', '\x5', '\xC0', '\x61', '\x2', '\x46C', '\x46F', 
		'\x3', '\x2', '\x2', '\x2', '\x46D', '\x46F', '\x5', '\xC8', '\x65', '\x2', 
		'\x46E', '\x46A', '\x3', '\x2', '\x2', '\x2', '\x46E', '\x46D', '\x3', 
		'\x2', '\x2', '\x2', '\x46F', '\xC7', '\x3', '\x2', '\x2', '\x2', '\x470', 
		'\x471', '\x5', '\xE2', 'r', '\x2', '\x471', '\x472', '\a', '\x39', '\x2', 
		'\x2', '\x472', '\x473', '\x5', '\xE2', 'r', '\x2', '\x473', '\xC9', '\x3', 
		'\x2', '\x2', '\x2', '\x474', '\x478', '\x5', '\xCC', 'g', '\x2', '\x475', 
		'\x478', '\x5', '\xCE', 'h', '\x2', '\x476', '\x478', '\x5', '\xD4', 'k', 
		'\x2', '\x477', '\x474', '\x3', '\x2', '\x2', '\x2', '\x477', '\x475', 
		'\x3', '\x2', '\x2', '\x2', '\x477', '\x476', '\x3', '\x2', '\x2', '\x2', 
		'\x478', '\xCB', '\x3', '\x2', '\x2', '\x2', '\x479', '\x47A', '\x5', 
		'\xD6', 'l', '\x2', '\x47A', '\xCD', '\x3', '\x2', '\x2', '\x2', '\x47B', 
		'\x47E', '\x5', '\xD0', 'i', '\x2', '\x47C', '\x47E', '\x5', '\xD2', 'j', 
		'\x2', '\x47D', '\x47B', '\x3', '\x2', '\x2', '\x2', '\x47D', '\x47C', 
		'\x3', '\x2', '\x2', '\x2', '\x47E', '\xCF', '\x3', '\x2', '\x2', '\x2', 
		'\x47F', '\x480', '\x5', '\xD8', 'm', '\x2', '\x480', '\xD1', '\x3', '\x2', 
		'\x2', '\x2', '\x481', '\x482', '\x5', '\xE2', 'r', '\x2', '\x482', '\x483', 
		'\x5', '\x11E', '\x90', '\x2', '\x483', '\x484', '\x5', '\xE2', 'r', '\x2', 
		'\x484', '\xD3', '\x3', '\x2', '\x2', '\x2', '\x485', '\x486', '\x5', 
		'\xDE', 'p', '\x2', '\x486', '\xD5', '\x3', '\x2', '\x2', '\x2', '\x487', 
		'\x48E', '\x5', '\x120', '\x91', '\x2', '\x488', '\x489', '\x5', '\x122', 
		'\x92', '\x2', '\x489', '\x48A', '\a', '\f', '\x2', '\x2', '\x48A', '\x48B', 
		'\x5', '\xE0', 'q', '\x2', '\x48B', '\x48C', '\a', '\r', '\x2', '\x2', 
		'\x48C', '\x48E', '\x3', '\x2', '\x2', '\x2', '\x48D', '\x487', '\x3', 
		'\x2', '\x2', '\x2', '\x48D', '\x488', '\x3', '\x2', '\x2', '\x2', '\x48E', 
		'\xD7', '\x3', '\x2', '\x2', '\x2', '\x48F', '\x492', '\x5', '\x12C', 
		'\x97', '\x2', '\x490', '\x492', '\x5', '\xDA', 'n', '\x2', '\x491', '\x48F', 
		'\x3', '\x2', '\x2', '\x2', '\x491', '\x490', '\x3', '\x2', '\x2', '\x2', 
		'\x492', '\xD9', '\x3', '\x2', '\x2', '\x2', '\x493', '\x494', '\x5', 
		'\xDC', 'o', '\x2', '\x494', '\xDB', '\x3', '\x2', '\x2', '\x2', '\x495', 
		'\x49C', '\x5', '\x128', '\x95', '\x2', '\x496', '\x497', '\x5', '\x12A', 
		'\x96', '\x2', '\x497', '\x498', '\a', '\f', '\x2', '\x2', '\x498', '\x499', 
		'\x5', '\xE0', 'q', '\x2', '\x499', '\x49A', '\a', '\r', '\x2', '\x2', 
		'\x49A', '\x49C', '\x3', '\x2', '\x2', '\x2', '\x49B', '\x495', '\x3', 
		'\x2', '\x2', '\x2', '\x49B', '\x496', '\x3', '\x2', '\x2', '\x2', '\x49C', 
		'\xDD', '\x3', '\x2', '\x2', '\x2', '\x49D', '\x4A4', '\x5', '\x124', 
		'\x93', '\x2', '\x49E', '\x49F', '\x5', '\x126', '\x94', '\x2', '\x49F', 
		'\x4A0', '\a', '\f', '\x2', '\x2', '\x4A0', '\x4A1', '\x5', '\xE0', 'q', 
		'\x2', '\x4A1', '\x4A2', '\a', '\r', '\x2', '\x2', '\x4A2', '\x4A4', '\x3', 
		'\x2', '\x2', '\x2', '\x4A3', '\x49D', '\x3', '\x2', '\x2', '\x2', '\x4A3', 
		'\x49E', '\x3', '\x2', '\x2', '\x2', '\x4A4', '\xDF', '\x3', '\x2', '\x2', 
		'\x2', '\x4A5', '\x4AA', '\x5', '\xE2', 'r', '\x2', '\x4A6', '\x4A7', 
		'\a', '\x4', '\x2', '\x2', '\x4A7', '\x4A9', '\x5', '\xE2', 'r', '\x2', 
		'\x4A8', '\x4A6', '\x3', '\x2', '\x2', '\x2', '\x4A9', '\x4AC', '\x3', 
		'\x2', '\x2', '\x2', '\x4AA', '\x4A8', '\x3', '\x2', '\x2', '\x2', '\x4AA', 
		'\x4AB', '\x3', '\x2', '\x2', '\x2', '\x4AB', '\xE1', '\x3', '\x2', '\x2', 
		'\x2', '\x4AC', '\x4AA', '\x3', '\x2', '\x2', '\x2', '\x4AD', '\x4B3', 
		'\x5', '\xE4', 's', '\x2', '\x4AE', '\x4B3', '\x5', '\x12E', '\x98', '\x2', 
		'\x4AF', '\x4B3', '\x5', '\xE6', 't', '\x2', '\x4B0', '\x4B3', '\x5', 
		'\xE8', 'u', '\x2', '\x4B1', '\x4B3', '\x5', '\xEA', 'v', '\x2', '\x4B2', 
		'\x4AD', '\x3', '\x2', '\x2', '\x2', '\x4B2', '\x4AE', '\x3', '\x2', '\x2', 
		'\x2', '\x4B2', '\x4AF', '\x3', '\x2', '\x2', '\x2', '\x4B2', '\x4B0', 
		'\x3', '\x2', '\x2', '\x2', '\x4B2', '\x4B1', '\x3', '\x2', '\x2', '\x2', 
		'\x4B3', '\xE3', '\x3', '\x2', '\x2', '\x2', '\x4B4', '\x4B8', '\x5', 
		'\xD6', 'l', '\x2', '\x4B5', '\x4B8', '\x5', '\xD8', 'm', '\x2', '\x4B6', 
		'\x4B8', '\x5', '\xDE', 'p', '\x2', '\x4B7', '\x4B4', '\x3', '\x2', '\x2', 
		'\x2', '\x4B7', '\x4B5', '\x3', '\x2', '\x2', '\x2', '\x4B7', '\x4B6', 
		'\x3', '\x2', '\x2', '\x2', '\x4B8', '\xE5', '\x3', '\x2', '\x2', '\x2', 
		'\x4B9', '\x4BA', '\a', '\x1A', '\x2', '\x2', '\x4BA', '\x4BB', '\x5', 
		'\x64', '\x33', '\x2', '\x4BB', '\x4BC', '\a', '\x4', '\x2', '\x2', '\x4BC', 
		'\x4BD', '\x5', '\xE2', 'r', '\x2', '\x4BD', '\x4BE', '\a', '\x4', '\x2', 
		'\x2', '\x4BE', '\x4BF', '\x5', '\xE2', 'r', '\x2', '\x4BF', '\x4C0', 
		'\a', '\r', '\x2', '\x2', '\x4C0', '\xE7', '\x3', '\x2', '\x2', '\x2', 
		'\x4C1', '\x4C2', '\a', '\x1B', '\x2', '\x2', '\x4C2', '\x4C3', '\x5', 
		'\x8A', '\x46', '\x2', '\x4C3', '\x4C4', '\a', '\x4', '\x2', '\x2', '\x4C4', 
		'\x4C5', '\x5', '\xE2', 'r', '\x2', '\x4C5', '\x4C6', '\a', '\r', '\x2', 
		'\x2', '\x4C6', '\x4CE', '\x3', '\x2', '\x2', '\x2', '\x4C7', '\x4C8', 
		'\a', '\x1C', '\x2', '\x2', '\x4C8', '\x4C9', '\x5', '\x82', '\x42', '\x2', 
		'\x4C9', '\x4CA', '\a', '\x4', '\x2', '\x2', '\x4CA', '\x4CB', '\x5', 
		'\xE2', 'r', '\x2', '\x4CB', '\x4CC', '\a', '\r', '\x2', '\x2', '\x4CC', 
		'\x4CE', '\x3', '\x2', '\x2', '\x2', '\x4CD', '\x4C1', '\x3', '\x2', '\x2', 
		'\x2', '\x4CD', '\x4C7', '\x3', '\x2', '\x2', '\x2', '\x4CE', '\xE9', 
		'\x3', '\x2', '\x2', '\x2', '\x4CF', '\x4D5', '\a', '\x14', '\x2', '\x2', 
		'\x4D0', '\x4D1', '\a', '\x15', '\x2', '\x2', '\x4D1', '\x4D2', '\x5', 
		'\xE0', 'q', '\x2', '\x4D2', '\x4D3', '\a', '\x16', '\x2', '\x2', '\x4D3', 
		'\x4D5', '\x3', '\x2', '\x2', '\x2', '\x4D4', '\x4CF', '\x3', '\x2', '\x2', 
		'\x2', '\x4D4', '\x4D0', '\x3', '\x2', '\x2', '\x2', '\x4D5', '\xEB', 
		'\x3', '\x2', '\x2', '\x2', '\x4D6', '\x4D7', '\x5', '\xEE', 'x', '\x2', 
		'\x4D7', '\x4D8', '\a', 'K', '\x2', '\x2', '\x4D8', '\x4D9', '\x5', '\xEE', 
		'x', '\x2', '\x4D9', '\x4DF', '\x3', '\x2', '\x2', '\x2', '\x4DA', '\x4DB', 
		'\a', '\f', '\x2', '\x2', '\x4DB', '\x4DC', '\x5', '\xEC', 'w', '\x2', 
		'\x4DC', '\x4DD', '\a', '\r', '\x2', '\x2', '\x4DD', '\x4DF', '\x3', '\x2', 
		'\x2', '\x2', '\x4DE', '\x4D6', '\x3', '\x2', '\x2', '\x2', '\x4DE', '\x4DA', 
		'\x3', '\x2', '\x2', '\x2', '\x4DF', '\xED', '\x3', '\x2', '\x2', '\x2', 
		'\x4E0', '\x4E6', '\a', '\x13', '\x2', '\x2', '\x4E1', '\x4E2', '\a', 
		'\xE', '\x2', '\x2', '\x4E2', '\x4E3', '\x5', '\xF0', 'y', '\x2', '\x4E3', 
		'\x4E4', '\a', '\xF', '\x2', '\x2', '\x4E4', '\x4E6', '\x3', '\x2', '\x2', 
		'\x2', '\x4E5', '\x4E0', '\x3', '\x2', '\x2', '\x2', '\x4E5', '\x4E1', 
		'\x3', '\x2', '\x2', '\x2', '\x4E6', '\xEF', '\x3', '\x2', '\x2', '\x2', 
		'\x4E7', '\x4EC', '\x5', '\xB4', '[', '\x2', '\x4E8', '\x4E9', '\a', '\x4', 
		'\x2', '\x2', '\x4E9', '\x4EB', '\x5', '\xB4', '[', '\x2', '\x4EA', '\x4E8', 
		'\x3', '\x2', '\x2', '\x2', '\x4EB', '\x4EE', '\x3', '\x2', '\x2', '\x2', 
		'\x4EC', '\x4EA', '\x3', '\x2', '\x2', '\x2', '\x4EC', '\x4ED', '\x3', 
		'\x2', '\x2', '\x2', '\x4ED', '\xF1', '\x3', '\x2', '\x2', '\x2', '\x4EE', 
		'\x4EC', '\x3', '\x2', '\x2', '\x2', '\x4EF', '\x4F5', '\x5', '\xF4', 
		'{', '\x2', '\x4F0', '\x4F1', '\a', '\f', '\x2', '\x2', '\x4F1', '\x4F2', 
		'\x5', '\xF4', '{', '\x2', '\x4F2', '\x4F3', '\a', '\r', '\x2', '\x2', 
		'\x4F3', '\x4F5', '\x3', '\x2', '\x2', '\x2', '\x4F4', '\x4EF', '\x3', 
		'\x2', '\x2', '\x2', '\x4F4', '\x4F0', '\x3', '\x2', '\x2', '\x2', '\x4F5', 
		'\xF3', '\x3', '\x2', '\x2', '\x2', '\x4F6', '\x4F7', '\b', '{', '\x1', 
		'\x2', '\x4F7', '\x4F8', '\x5', '\xF6', '|', '\x2', '\x4F8', '\x4FE', 
		'\x3', '\x2', '\x2', '\x2', '\x4F9', '\x4FA', '\f', '\x3', '\x2', '\x2', 
		'\x4FA', '\x4FB', '\a', '.', '\x2', '\x2', '\x4FB', '\x4FD', '\x5', '\xF6', 
		'|', '\x2', '\x4FC', '\x4F9', '\x3', '\x2', '\x2', '\x2', '\x4FD', '\x500', 
		'\x3', '\x2', '\x2', '\x2', '\x4FE', '\x4FC', '\x3', '\x2', '\x2', '\x2', 
		'\x4FE', '\x4FF', '\x3', '\x2', '\x2', '\x2', '\x4FF', '\xF5', '\x3', 
		'\x2', '\x2', '\x2', '\x500', '\x4FE', '\x3', '\x2', '\x2', '\x2', '\x501', 
		'\x506', '\x5', '\xCA', '\x66', '\x2', '\x502', '\x503', '\a', '\x36', 
		'\x2', '\x2', '\x503', '\x506', '\x5', '\xCA', '\x66', '\x2', '\x504', 
		'\x506', '\x5', '\xC8', '\x65', '\x2', '\x505', '\x501', '\x3', '\x2', 
		'\x2', '\x2', '\x505', '\x502', '\x3', '\x2', '\x2', '\x2', '\x505', '\x504', 
		'\x3', '\x2', '\x2', '\x2', '\x506', '\xF7', '\x3', '\x2', '\x2', '\x2', 
		'\x507', '\x50B', '\x5', '\x106', '\x84', '\x2', '\x508', '\x50B', '\x5', 
		'\xFA', '~', '\x2', '\x509', '\x50B', '\x5', '\xFC', '\x7F', '\x2', '\x50A', 
		'\x507', '\x3', '\x2', '\x2', '\x2', '\x50A', '\x508', '\x3', '\x2', '\x2', 
		'\x2', '\x50A', '\x509', '\x3', '\x2', '\x2', '\x2', '\x50B', '\xF9', 
		'\x3', '\x2', '\x2', '\x2', '\x50C', '\x50D', '\t', '\x2', '\x2', '\x2', 
		'\x50D', '\xFB', '\x3', '\x2', '\x2', '\x2', '\x50E', '\x50F', '\t', '\x3', 
		'\x2', '\x2', '\x50F', '\xFD', '\x3', '\x2', '\x2', '\x2', '\x510', '\x515', 
		'\a', ':', '\x2', '\x2', '\x511', '\x515', '\a', '\x39', '\x2', '\x2', 
		'\x512', '\x515', '\x5', '\x108', '\x85', '\x2', '\x513', '\x515', '\a', 
		'\x46', '\x2', '\x2', '\x514', '\x510', '\x3', '\x2', '\x2', '\x2', '\x514', 
		'\x511', '\x3', '\x2', '\x2', '\x2', '\x514', '\x512', '\x3', '\x2', '\x2', 
		'\x2', '\x514', '\x513', '\x3', '\x2', '\x2', '\x2', '\x515', '\xFF', 
		'\x3', '\x2', '\x2', '\x2', '\x516', '\x519', '\x5', '\x10C', '\x87', 
		'\x2', '\x517', '\x519', '\x5', '\x102', '\x82', '\x2', '\x518', '\x516', 
		'\x3', '\x2', '\x2', '\x2', '\x518', '\x517', '\x3', '\x2', '\x2', '\x2', 
		'\x519', '\x101', '\x3', '\x2', '\x2', '\x2', '\x51A', '\x51B', '\t', 
		'\x4', '\x2', '\x2', '\x51B', '\x103', '\x3', '\x2', '\x2', '\x2', '\x51C', 
		'\x51F', '\x5', '\x108', '\x85', '\x2', '\x51D', '\x51F', '\a', '\x46', 
		'\x2', '\x2', '\x51E', '\x51C', '\x3', '\x2', '\x2', '\x2', '\x51E', '\x51D', 
		'\x3', '\x2', '\x2', '\x2', '\x51F', '\x105', '\x3', '\x2', '\x2', '\x2', 
		'\x520', '\x521', '\t', '\x5', '\x2', '\x2', '\x521', '\x107', '\x3', 
		'\x2', '\x2', '\x2', '\x522', '\x523', '\t', '\x6', '\x2', '\x2', '\x523', 
		'\x109', '\x3', '\x2', '\x2', '\x2', '\x524', '\x525', '\t', '\a', '\x2', 
		'\x2', '\x525', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x526', '\x527', 
		'\a', '\x36', '\x2', '\x2', '\x527', '\x10D', '\x3', '\x2', '\x2', '\x2', 
		'\x528', '\x529', '\x5', '\x110', '\x89', '\x2', '\x529', '\x10F', '\x3', 
		'\x2', '\x2', '\x2', '\x52A', '\x52B', '\x5', '\x188', '\xC5', '\x2', 
		'\x52B', '\x111', '\x3', '\x2', '\x2', '\x2', '\x52C', '\x52D', '\a', 
		']', '\x2', '\x2', '\x52D', '\x113', '\x3', '\x2', '\x2', '\x2', '\x52E', 
		'\x52F', '\x5', '\x18C', '\xC7', '\x2', '\x52F', '\x115', '\x3', '\x2', 
		'\x2', '\x2', '\x530', '\x533', '\x5', '\x118', '\x8D', '\x2', '\x531', 
		'\x533', '\x5', '\x128', '\x95', '\x2', '\x532', '\x530', '\x3', '\x2', 
		'\x2', '\x2', '\x532', '\x531', '\x3', '\x2', '\x2', '\x2', '\x533', '\x117', 
		'\x3', '\x2', '\x2', '\x2', '\x534', '\x537', '\x5', '\x120', '\x91', 
		'\x2', '\x535', '\x537', '\x5', '\x124', '\x93', '\x2', '\x536', '\x534', 
		'\x3', '\x2', '\x2', '\x2', '\x536', '\x535', '\x3', '\x2', '\x2', '\x2', 
		'\x537', '\x119', '\x3', '\x2', '\x2', '\x2', '\x538', '\x539', '\a', 
		']', '\x2', '\x2', '\x539', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x53A', 
		'\x53B', '\a', ']', '\x2', '\x2', '\x53B', '\x11D', '\x3', '\x2', '\x2', 
		'\x2', '\x53C', '\x53D', '\t', '\b', '\x2', '\x2', '\x53D', '\x11F', '\x3', 
		'\x2', '\x2', '\x2', '\x53E', '\x53F', '\x5', '\x122', '\x92', '\x2', 
		'\x53F', '\x121', '\x3', '\x2', '\x2', '\x2', '\x540', '\x541', '\x5', 
		'\x188', '\xC5', '\x2', '\x541', '\x123', '\x3', '\x2', '\x2', '\x2', 
		'\x542', '\x543', '\x5', '\x126', '\x94', '\x2', '\x543', '\x125', '\x3', 
		'\x2', '\x2', '\x2', '\x544', '\x545', '\x5', '\x18C', '\xC7', '\x2', 
		'\x545', '\x127', '\x3', '\x2', '\x2', '\x2', '\x546', '\x547', '\x5', 
		'\x12A', '\x96', '\x2', '\x547', '\x129', '\x3', '\x2', '\x2', '\x2', 
		'\x548', '\x549', '\x5', '\x18A', '\xC6', '\x2', '\x549', '\x12B', '\x3', 
		'\x2', '\x2', '\x2', '\x54A', '\x54D', '\x5', '\x18E', '\xC8', '\x2', 
		'\x54B', '\x54D', '\a', '\x62', '\x2', '\x2', '\x54C', '\x54A', '\x3', 
		'\x2', '\x2', '\x2', '\x54C', '\x54B', '\x3', '\x2', '\x2', '\x2', '\x54D', 
		'\x12D', '\x3', '\x2', '\x2', '\x2', '\x54E', '\x54F', '\a', '_', '\x2', 
		'\x2', '\x54F', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x550', '\x559', 
		'\x5', '\x134', '\x9B', '\x2', '\x551', '\x559', '\x5', '\x142', '\xA2', 
		'\x2', '\x552', '\x559', '\x5', '\x146', '\xA4', '\x2', '\x553', '\x559', 
		'\a', '`', '\x2', '\x2', '\x554', '\x555', '\a', '\xE', '\x2', '\x2', 
		'\x555', '\x556', '\x5', '\x132', '\x9A', '\x2', '\x556', '\x557', '\a', 
		'\xF', '\x2', '\x2', '\x557', '\x559', '\x3', '\x2', '\x2', '\x2', '\x558', 
		'\x550', '\x3', '\x2', '\x2', '\x2', '\x558', '\x551', '\x3', '\x2', '\x2', 
		'\x2', '\x558', '\x552', '\x3', '\x2', '\x2', '\x2', '\x558', '\x553', 
		'\x3', '\x2', '\x2', '\x2', '\x558', '\x554', '\x3', '\x2', '\x2', '\x2', 
		'\x559', '\x131', '\x3', '\x2', '\x2', '\x2', '\x55A', '\x55F', '\x5', 
		'\x130', '\x99', '\x2', '\x55B', '\x55C', '\a', '\x4', '\x2', '\x2', '\x55C', 
		'\x55E', '\x5', '\x130', '\x99', '\x2', '\x55D', '\x55B', '\x3', '\x2', 
		'\x2', '\x2', '\x55E', '\x561', '\x3', '\x2', '\x2', '\x2', '\x55F', '\x55D', 
		'\x3', '\x2', '\x2', '\x2', '\x55F', '\x560', '\x3', '\x2', '\x2', '\x2', 
		'\x560', '\x133', '\x3', '\x2', '\x2', '\x2', '\x561', '\x55F', '\x3', 
		'\x2', '\x2', '\x2', '\x562', '\x565', '\x5', '\x186', '\xC4', '\x2', 
		'\x563', '\x565', '\x5', '\x136', '\x9C', '\x2', '\x564', '\x562', '\x3', 
		'\x2', '\x2', '\x2', '\x564', '\x563', '\x3', '\x2', '\x2', '\x2', '\x565', 
		'\x135', '\x3', '\x2', '\x2', '\x2', '\x566', '\x567', '\a', '\x1D', '\x2', 
		'\x2', '\x567', '\x568', '\x5', '\x138', '\x9D', '\x2', '\x568', '\x569', 
		'\a', '\x4', '\x2', '\x2', '\x569', '\x56A', '\x5', '\x156', '\xAC', '\x2', 
		'\x56A', '\x56B', '\a', '\x4', '\x2', '\x2', '\x56B', '\x56C', '\x5', 
		'\x13A', '\x9E', '\x2', '\x56C', '\x56D', '\a', '\r', '\x2', '\x2', '\x56D', 
		'\x137', '\x3', '\x2', '\x2', '\x2', '\x56E', '\x56F', '\x5', '\x188', 
		'\xC5', '\x2', '\x56F', '\x139', '\x3', '\x2', '\x2', '\x2', '\x570', 
		'\x576', '\a', '\x13', '\x2', '\x2', '\x571', '\x572', '\a', '\xE', '\x2', 
		'\x2', '\x572', '\x573', '\x5', '\x13C', '\x9F', '\x2', '\x573', '\x574', 
		'\a', '\xF', '\x2', '\x2', '\x574', '\x576', '\x3', '\x2', '\x2', '\x2', 
		'\x575', '\x570', '\x3', '\x2', '\x2', '\x2', '\x575', '\x571', '\x3', 
		'\x2', '\x2', '\x2', '\x576', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x577', 
		'\x57C', '\x5', '\x13E', '\xA0', '\x2', '\x578', '\x579', '\a', '\x4', 
		'\x2', '\x2', '\x579', '\x57B', '\x5', '\x13E', '\xA0', '\x2', '\x57A', 
		'\x578', '\x3', '\x2', '\x2', '\x2', '\x57B', '\x57E', '\x3', '\x2', '\x2', 
		'\x2', '\x57C', '\x57A', '\x3', '\x2', '\x2', '\x2', '\x57C', '\x57D', 
		'\x3', '\x2', '\x2', '\x2', '\x57D', '\x13D', '\x3', '\x2', '\x2', '\x2', 
		'\x57E', '\x57C', '\x3', '\x2', '\x2', '\x2', '\x57F', '\x581', '\x5', 
		'\x130', '\x99', '\x2', '\x580', '\x582', '\x5', '\x140', '\xA1', '\x2', 
		'\x581', '\x580', '\x3', '\x2', '\x2', '\x2', '\x581', '\x582', '\x3', 
		'\x2', '\x2', '\x2', '\x582', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x583', 
		'\x584', '\a', '\x10', '\x2', '\x2', '\x584', '\x585', '\x5', '\x182', 
		'\xC2', '\x2', '\x585', '\x141', '\x3', '\x2', '\x2', '\x2', '\x586', 
		'\x587', '\a', '\x1E', '\x2', '\x2', '\x587', '\x589', '\x5', '\x144', 
		'\xA3', '\x2', '\x588', '\x58A', '\x5', '\x154', '\xAB', '\x2', '\x589', 
		'\x588', '\x3', '\x2', '\x2', '\x2', '\x589', '\x58A', '\x3', '\x2', '\x2', 
		'\x2', '\x58A', '\x58B', '\x3', '\x2', '\x2', '\x2', '\x58B', '\x58C', 
		'\a', '\r', '\x2', '\x2', '\x58C', '\x143', '\x3', '\x2', '\x2', '\x2', 
		'\x58D', '\x58E', '\a', '`', '\x2', '\x2', '\x58E', '\x145', '\x3', '\x2', 
		'\x2', '\x2', '\x58F', '\x593', '\x5', '\x148', '\xA5', '\x2', '\x590', 
		'\x593', '\x5', '\x14C', '\xA7', '\x2', '\x591', '\x593', '\x5', '\x150', 
		'\xA9', '\x2', '\x592', '\x58F', '\x3', '\x2', '\x2', '\x2', '\x592', 
		'\x590', '\x3', '\x2', '\x2', '\x2', '\x592', '\x591', '\x3', '\x2', '\x2', 
		'\x2', '\x593', '\x147', '\x3', '\x2', '\x2', '\x2', '\x594', '\x595', 
		'\a', '\x1F', '\x2', '\x2', '\x595', '\x597', '\x5', '\x190', '\xC9', 
		'\x2', '\x596', '\x598', '\x5', '\x14A', '\xA6', '\x2', '\x597', '\x596', 
		'\x3', '\x2', '\x2', '\x2', '\x597', '\x598', '\x3', '\x2', '\x2', '\x2', 
		'\x598', '\x599', '\x3', '\x2', '\x2', '\x2', '\x599', '\x59A', '\a', 
		'\r', '\x2', '\x2', '\x59A', '\x149', '\x3', '\x2', '\x2', '\x2', '\x59B', 
		'\x59C', '\a', '\x4', '\x2', '\x2', '\x59C', '\x59D', '\x5', '\x186', 
		'\xC4', '\x2', '\x59D', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x59E', 
		'\x59F', '\a', ' ', '\x2', '\x2', '\x59F', '\x5A1', '\x5', '\x14E', '\xA8', 
		'\x2', '\x5A0', '\x5A2', '\x5', '\x154', '\xAB', '\x2', '\x5A1', '\x5A0', 
		'\x3', '\x2', '\x2', '\x2', '\x5A1', '\x5A2', '\x3', '\x2', '\x2', '\x2', 
		'\x5A2', '\x5A3', '\x3', '\x2', '\x2', '\x2', '\x5A3', '\x5A4', '\a', 
		'\r', '\x2', '\x2', '\x5A4', '\x14D', '\x3', '\x2', '\x2', '\x2', '\x5A5', 
		'\x5A6', '\a', '`', '\x2', '\x2', '\x5A6', '\x14F', '\x3', '\x2', '\x2', 
		'\x2', '\x5A7', '\x5A8', '\a', '!', '\x2', '\x2', '\x5A8', '\x5AA', '\x5', 
		'\x152', '\xAA', '\x2', '\x5A9', '\x5AB', '\x5', '\x154', '\xAB', '\x2', 
		'\x5AA', '\x5A9', '\x3', '\x2', '\x2', '\x2', '\x5AA', '\x5AB', '\x3', 
		'\x2', '\x2', '\x2', '\x5AB', '\x5AC', '\x3', '\x2', '\x2', '\x2', '\x5AC', 
		'\x5AD', '\a', '\r', '\x2', '\x2', '\x5AD', '\x151', '\x3', '\x2', '\x2', 
		'\x2', '\x5AE', '\x5AF', '\x5', '\x188', '\xC5', '\x2', '\x5AF', '\x153', 
		'\x3', '\x2', '\x2', '\x2', '\x5B0', '\x5B1', '\a', '\x4', '\x2', '\x2', 
		'\x5B1', '\x5B2', '\x5', '\x156', '\xAC', '\x2', '\x5B2', '\x155', '\x3', 
		'\x2', '\x2', '\x2', '\x5B3', '\x5BA', '\a', '\x13', '\x2', '\x2', '\x5B4', 
		'\x5B5', '\a', '\xE', '\x2', '\x2', '\x5B5', '\x5B6', '\x5', '\x158', 
		'\xAD', '\x2', '\x5B6', '\x5B7', '\a', '\xF', '\x2', '\x2', '\x5B7', '\x5BA', 
		'\x3', '\x2', '\x2', '\x2', '\x5B8', '\x5BA', '\x5', '\x182', '\xC2', 
		'\x2', '\x5B9', '\x5B3', '\x3', '\x2', '\x2', '\x2', '\x5B9', '\x5B4', 
		'\x3', '\x2', '\x2', '\x2', '\x5B9', '\x5B8', '\x3', '\x2', '\x2', '\x2', 
		'\x5BA', '\x157', '\x3', '\x2', '\x2', '\x2', '\x5BB', '\x5C0', '\x5', 
		'\x15A', '\xAE', '\x2', '\x5BC', '\x5BD', '\a', '\x4', '\x2', '\x2', '\x5BD', 
		'\x5BF', '\x5', '\x15A', '\xAE', '\x2', '\x5BE', '\x5BC', '\x3', '\x2', 
		'\x2', '\x2', '\x5BF', '\x5C2', '\x3', '\x2', '\x2', '\x2', '\x5C0', '\x5BE', 
		'\x3', '\x2', '\x2', '\x2', '\x5C0', '\x5C1', '\x3', '\x2', '\x2', '\x2', 
		'\x5C1', '\x159', '\x3', '\x2', '\x2', '\x2', '\x5C2', '\x5C0', '\x3', 
		'\x2', '\x2', '\x2', '\x5C3', '\x5C7', '\x5', '\x15C', '\xAF', '\x2', 
		'\x5C4', '\x5C7', '\x5', '\x162', '\xB2', '\x2', '\x5C5', '\x5C7', '\x5', 
		'\x17E', '\xC0', '\x2', '\x5C6', '\x5C3', '\x3', '\x2', '\x2', '\x2', 
		'\x5C6', '\x5C4', '\x3', '\x2', '\x2', '\x2', '\x5C6', '\x5C5', '\x3', 
		'\x2', '\x2', '\x2', '\x5C7', '\x15B', '\x3', '\x2', '\x2', '\x2', '\x5C8', 
		'\x5CB', '\x5', '\x15E', '\xB0', '\x2', '\x5C9', '\x5CB', '\x5', '\x160', 
		'\xB1', '\x2', '\x5CA', '\x5C8', '\x3', '\x2', '\x2', '\x2', '\x5CA', 
		'\x5C9', '\x3', '\x2', '\x2', '\x2', '\x5CB', '\x15D', '\x3', '\x2', '\x2', 
		'\x2', '\x5CC', '\x5CD', '\a', '\"', '\x2', '\x2', '\x5CD', '\x5CE', '\x5', 
		'\x188', '\xC5', '\x2', '\x5CE', '\x5CF', '\a', '\r', '\x2', '\x2', '\x5CF', 
		'\x15F', '\x3', '\x2', '\x2', '\x2', '\x5D0', '\x5D1', '\a', '#', '\x2', 
		'\x2', '\x5D1', '\x5D2', '\x5', '\x188', '\xC5', '\x2', '\x5D2', '\x5D3', 
		'\a', '\r', '\x2', '\x2', '\x5D3', '\x161', '\x3', '\x2', '\x2', '\x2', 
		'\x5D4', '\x5D9', '\x5', '\x164', '\xB3', '\x2', '\x5D5', '\x5D9', '\x5', 
		'\x16A', '\xB6', '\x2', '\x5D6', '\x5D9', '\x5', '\x16E', '\xB8', '\x2', 
		'\x5D7', '\x5D9', '\x5', '\x16C', '\xB7', '\x2', '\x5D8', '\x5D4', '\x3', 
		'\x2', '\x2', '\x2', '\x5D8', '\x5D5', '\x3', '\x2', '\x2', '\x2', '\x5D8', 
		'\x5D6', '\x3', '\x2', '\x2', '\x2', '\x5D8', '\x5D7', '\x3', '\x2', '\x2', 
		'\x2', '\x5D9', '\x163', '\x3', '\x2', '\x2', '\x2', '\x5DA', '\x5DB', 
		'\a', '$', '\x2', '\x2', '\x5DB', '\x5DC', '\x5', '\x166', '\xB4', '\x2', 
		'\x5DC', '\x5DD', '\a', '\r', '\x2', '\x2', '\x5DD', '\x5E0', '\x3', '\x2', 
		'\x2', '\x2', '\x5DE', '\x5E0', '\x5', '\x168', '\xB5', '\x2', '\x5DF', 
		'\x5DA', '\x3', '\x2', '\x2', '\x2', '\x5DF', '\x5DE', '\x3', '\x2', '\x2', 
		'\x2', '\x5E0', '\x165', '\x3', '\x2', '\x2', '\x2', '\x5E1', '\x5E2', 
		'\a', '`', '\x2', '\x2', '\x5E2', '\x167', '\x3', '\x2', '\x2', '\x2', 
		'\x5E3', '\x5E4', '\x5', '\x138', '\x9D', '\x2', '\x5E4', '\x5E5', '\a', 
		'\f', '\x2', '\x2', '\x5E5', '\x5E6', '\x5', '\x188', '\xC5', '\x2', '\x5E6', 
		'\x5E7', '\a', '\x4', '\x2', '\x2', '\x5E7', '\x5E8', '\x5', '\x182', 
		'\xC2', '\x2', '\x5E8', '\x5E9', '\a', '\r', '\x2', '\x2', '\x5E9', '\x169', 
		'\x3', '\x2', '\x2', '\x2', '\x5EA', '\x5EB', '\a', '%', '\x2', '\x2', 
		'\x5EB', '\x5EC', '\a', '\xE', '\x2', '\x2', '\x5EC', '\x5ED', '\x5', 
		'\x178', '\xBD', '\x2', '\x5ED', '\x5EE', '\a', '\xF', '\x2', '\x2', '\x5EE', 
		'\x5EF', '\a', '\r', '\x2', '\x2', '\x5EF', '\x16B', '\x3', '\x2', '\x2', 
		'\x2', '\x5F0', '\x5F1', '\a', '&', '\x2', '\x2', '\x5F1', '\x5F2', '\x5', 
		'\x148', '\xA5', '\x2', '\x5F2', '\x5F3', '\a', '\r', '\x2', '\x2', '\x5F3', 
		'\x16D', '\x3', '\x2', '\x2', '\x2', '\x5F4', '\x5F5', '\a', '\'', '\x2', 
		'\x2', '\x5F5', '\x5F6', '\x5', '\x188', '\xC5', '\x2', '\x5F6', '\x5F7', 
		'\a', '\x4', '\x2', '\x2', '\x5F7', '\x5F8', '\a', '\xE', '\x2', '\x2', 
		'\x5F8', '\x5F9', '\x5', '\x170', '\xB9', '\x2', '\x5F9', '\x5FA', '\a', 
		'\xF', '\x2', '\x2', '\x5FA', '\x5FB', '\a', '\r', '\x2', '\x2', '\x5FB', 
		'\x16F', '\x3', '\x2', '\x2', '\x2', '\x5FC', '\x601', '\x5', '\x172', 
		'\xBA', '\x2', '\x5FD', '\x5FE', '\a', '\x4', '\x2', '\x2', '\x5FE', '\x600', 
		'\x5', '\x172', '\xBA', '\x2', '\x5FF', '\x5FD', '\x3', '\x2', '\x2', 
		'\x2', '\x600', '\x603', '\x3', '\x2', '\x2', '\x2', '\x601', '\x5FF', 
		'\x3', '\x2', '\x2', '\x2', '\x601', '\x602', '\x3', '\x2', '\x2', '\x2', 
		'\x602', '\x171', '\x3', '\x2', '\x2', '\x2', '\x603', '\x601', '\x3', 
		'\x2', '\x2', '\x2', '\x604', '\x607', '\x5', '\x122', '\x92', '\x2', 
		'\x605', '\x607', '\x5', '\x12E', '\x98', '\x2', '\x606', '\x604', '\x3', 
		'\x2', '\x2', '\x2', '\x606', '\x605', '\x3', '\x2', '\x2', '\x2', '\x607', 
		'\x173', '\x3', '\x2', '\x2', '\x2', '\x608', '\x609', '\a', '(', '\x2', 
		'\x2', '\x609', '\x60B', '\x5', '\x190', '\xC9', '\x2', '\x60A', '\x60C', 
		'\x5', '\x176', '\xBC', '\x2', '\x60B', '\x60A', '\x3', '\x2', '\x2', 
		'\x2', '\x60B', '\x60C', '\x3', '\x2', '\x2', '\x2', '\x60C', '\x60D', 
		'\x3', '\x2', '\x2', '\x2', '\x60D', '\x60E', '\a', '\x5', '\x2', '\x2', 
		'\x60E', '\x175', '\x3', '\x2', '\x2', '\x2', '\x60F', '\x610', '\a', 
		'\x4', '\x2', '\x2', '\x610', '\x611', '\a', '\xE', '\x2', '\x2', '\x611', 
		'\x612', '\x5', '\x178', '\xBD', '\x2', '\x612', '\x613', '\a', '\xF', 
		'\x2', '\x2', '\x613', '\x177', '\x3', '\x2', '\x2', '\x2', '\x614', '\x619', 
		'\x5', '\x186', '\xC4', '\x2', '\x615', '\x616', '\a', '\x4', '\x2', '\x2', 
		'\x616', '\x618', '\x5', '\x186', '\xC4', '\x2', '\x617', '\x615', '\x3', 
		'\x2', '\x2', '\x2', '\x618', '\x61B', '\x3', '\x2', '\x2', '\x2', '\x619', 
		'\x617', '\x3', '\x2', '\x2', '\x2', '\x619', '\x61A', '\x3', '\x2', '\x2', 
		'\x2', '\x61A', '\x179', '\x3', '\x2', '\x2', '\x2', '\x61B', '\x619', 
		'\x3', '\x2', '\x2', '\x2', '\x61C', '\x623', '\x5', '\x17C', '\xBF', 
		'\x2', '\x61D', '\x61E', '\x5', '\x17C', '\xBF', '\x2', '\x61E', '\x61F', 
		'\a', '\x10', '\x2', '\x2', '\x61F', '\x620', '\x5', '\x17A', '\xBE', 
		'\x2', '\x620', '\x623', '\x3', '\x2', '\x2', '\x2', '\x621', '\x623', 
		'\x5', '\x182', '\xC2', '\x2', '\x622', '\x61C', '\x3', '\x2', '\x2', 
		'\x2', '\x622', '\x61D', '\x3', '\x2', '\x2', '\x2', '\x622', '\x621', 
		'\x3', '\x2', '\x2', '\x2', '\x623', '\x17B', '\x3', '\x2', '\x2', '\x2', 
		'\x624', '\x62B', '\x5', '\x188', '\xC5', '\x2', '\x625', '\x62B', '\x5', 
		'\x17E', '\xC0', '\x2', '\x626', '\x62B', '\x5', '\x12E', '\x98', '\x2', 
		'\x627', '\x62B', '\x5', '\x18E', '\xC8', '\x2', '\x628', '\x62B', '\a', 
		'\x62', '\x2', '\x2', '\x629', '\x62B', '\x5', '\x180', '\xC1', '\x2', 
		'\x62A', '\x624', '\x3', '\x2', '\x2', '\x2', '\x62A', '\x625', '\x3', 
		'\x2', '\x2', '\x2', '\x62A', '\x626', '\x3', '\x2', '\x2', '\x2', '\x62A', 
		'\x627', '\x3', '\x2', '\x2', '\x2', '\x62A', '\x628', '\x3', '\x2', '\x2', 
		'\x2', '\x62A', '\x629', '\x3', '\x2', '\x2', '\x2', '\x62B', '\x17D', 
		'\x3', '\x2', '\x2', '\x2', '\x62C', '\x62D', '\x5', '\x188', '\xC5', 
		'\x2', '\x62D', '\x62E', '\a', '\f', '\x2', '\x2', '\x62E', '\x62F', '\x5', 
		'\x184', '\xC3', '\x2', '\x62F', '\x630', '\a', '\r', '\x2', '\x2', '\x630', 
		'\x17F', '\x3', '\x2', '\x2', '\x2', '\x631', '\x632', '\a', ')', '\x2', 
		'\x2', '\x632', '\x633', '\x5', '\x1C', '\xF', '\x2', '\x633', '\x634', 
		'\a', '\r', '\x2', '\x2', '\x634', '\x646', '\x3', '\x2', '\x2', '\x2', 
		'\x635', '\x636', '\a', '*', '\x2', '\x2', '\x636', '\x637', '\x5', '\x62', 
		'\x32', '\x2', '\x637', '\x638', '\a', '\r', '\x2', '\x2', '\x638', '\x646', 
		'\x3', '\x2', '\x2', '\x2', '\x639', '\x63A', '\a', '+', '\x2', '\x2', 
		'\x63A', '\x63B', '\x5', '\xB2', 'Z', '\x2', '\x63B', '\x63C', '\a', '\r', 
		'\x2', '\x2', '\x63C', '\x646', '\x3', '\x2', '\x2', '\x2', '\x63D', '\x63E', 
		'\a', ',', '\x2', '\x2', '\x63E', '\x63F', '\x5', '\xF2', 'z', '\x2', 
		'\x63F', '\x640', '\a', '\r', '\x2', '\x2', '\x640', '\x646', '\x3', '\x2', 
		'\x2', '\x2', '\x641', '\x642', '\a', '-', '\x2', '\x2', '\x642', '\x643', 
		'\x5', '\xE2', 'r', '\x2', '\x643', '\x644', '\a', '\r', '\x2', '\x2', 
		'\x644', '\x646', '\x3', '\x2', '\x2', '\x2', '\x645', '\x631', '\x3', 
		'\x2', '\x2', '\x2', '\x645', '\x635', '\x3', '\x2', '\x2', '\x2', '\x645', 
		'\x639', '\x3', '\x2', '\x2', '\x2', '\x645', '\x63D', '\x3', '\x2', '\x2', 
		'\x2', '\x645', '\x641', '\x3', '\x2', '\x2', '\x2', '\x646', '\x181', 
		'\x3', '\x2', '\x2', '\x2', '\x647', '\x64D', '\a', '\x13', '\x2', '\x2', 
		'\x648', '\x649', '\a', '\xE', '\x2', '\x2', '\x649', '\x64A', '\x5', 
		'\x184', '\xC3', '\x2', '\x64A', '\x64B', '\a', '\xF', '\x2', '\x2', '\x64B', 
		'\x64D', '\x3', '\x2', '\x2', '\x2', '\x64C', '\x647', '\x3', '\x2', '\x2', 
		'\x2', '\x64C', '\x648', '\x3', '\x2', '\x2', '\x2', '\x64D', '\x183', 
		'\x3', '\x2', '\x2', '\x2', '\x64E', '\x653', '\x5', '\x17A', '\xBE', 
		'\x2', '\x64F', '\x650', '\a', '\x4', '\x2', '\x2', '\x650', '\x652', 
		'\x5', '\x17A', '\xBE', '\x2', '\x651', '\x64F', '\x3', '\x2', '\x2', 
		'\x2', '\x652', '\x655', '\x3', '\x2', '\x2', '\x2', '\x653', '\x651', 
		'\x3', '\x2', '\x2', '\x2', '\x653', '\x654', '\x3', '\x2', '\x2', '\x2', 
		'\x654', '\x185', '\x3', '\x2', '\x2', '\x2', '\x655', '\x653', '\x3', 
		'\x2', '\x2', '\x2', '\x656', '\x659', '\x5', '\x188', '\xC5', '\x2', 
		'\x657', '\x659', '\a', 'R', '\x2', '\x2', '\x658', '\x656', '\x3', '\x2', 
		'\x2', '\x2', '\x658', '\x657', '\x3', '\x2', '\x2', '\x2', '\x659', '\x187', 
		'\x3', '\x2', '\x2', '\x2', '\x65A', '\x65B', '\t', '\t', '\x2', '\x2', 
		'\x65B', '\x189', '\x3', '\x2', '\x2', '\x2', '\x65C', '\x65D', '\a', 
		']', '\x2', '\x2', '\x65D', '\x18B', '\x3', '\x2', '\x2', '\x2', '\x65E', 
		'\x65F', '\a', '^', '\x2', '\x2', '\x65F', '\x18D', '\x3', '\x2', '\x2', 
		'\x2', '\x660', '\x661', '\t', '\n', '\x2', '\x2', '\x661', '\x18F', '\x3', 
		'\x2', '\x2', '\x2', '\x662', '\x663', '\a', '\x61', '\x2', '\x2', '\x663', 
		'\x191', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x195', '\x19C', '\x1A5', 
		'\x1AE', '\x1BB', '\x1C6', '\x1D1', '\x1DC', '\x1E7', '\x1F2', '\x1F9', 
		'\x1FF', '\x205', '\x20A', '\x213', '\x21F', '\x22C', '\x239', '\x246', 
		'\x252', '\x25A', '\x269', '\x27B', '\x280', '\x29B', '\x2A4', '\x2AD', 
		'\x2B7', '\x2C3', '\x2D0', '\x2DB', '\x2E7', '\x2EE', '\x2F3', '\x2FA', 
		'\x2FF', '\x303', '\x30B', '\x317', '\x324', '\x330', '\x33E', '\x343', 
		'\x34D', '\x365', '\x36C', '\x373', '\x37E', '\x388', '\x38F', '\x396', 
		'\x3A1', '\x3AB', '\x3B5', '\x3BC', '\x3C3', '\x3CE', '\x3DB', '\x3E9', 
		'\x3F0', '\x3FA', '\x401', '\x412', '\x417', '\x41B', '\x426', '\x42A', 
		'\x42E', '\x436', '\x442', '\x44F', '\x459', '\x467', '\x46E', '\x477', 
		'\x47D', '\x48D', '\x491', '\x49B', '\x4A3', '\x4AA', '\x4B2', '\x4B7', 
		'\x4CD', '\x4D4', '\x4DE', '\x4E5', '\x4EC', '\x4F4', '\x4FE', '\x505', 
		'\x50A', '\x514', '\x518', '\x51E', '\x532', '\x536', '\x54C', '\x558', 
		'\x55F', '\x564', '\x575', '\x57C', '\x581', '\x589', '\x592', '\x597', 
		'\x5A1', '\x5AA', '\x5B9', '\x5C0', '\x5C6', '\x5CA', '\x5D8', '\x5DF', 
		'\x601', '\x606', '\x60B', '\x619', '\x622', '\x62A', '\x645', '\x64C', 
		'\x653', '\x658',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
